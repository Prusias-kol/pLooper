/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 805:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {



  var __assign = this && this.__assign || function () {
    __assign = Object.assign || function (t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
  
        for (var p in s) {
          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
      }
  
      return t;
    };
  
    return __assign.apply(this, arguments);
  };
  
  Object.defineProperty(exports, "__esModule", ({
    value: true
  }));
  
  var named_references_1 = __webpack_require__(547);
  
  var numeric_unicode_map_1 = __webpack_require__(125);
  
  var surrogate_pairs_1 = __webpack_require__(663);
  
  var allNamedReferences = __assign(__assign({}, named_references_1.namedReferences), {
    all: named_references_1.namedReferences.html5
  });
  
  function replaceUsingRegExp(macroText, macroRegExp, macroReplacer) {
    macroRegExp.lastIndex = 0;
    var replaceMatch = macroRegExp.exec(macroText);
    var replaceResult;
  
    if (replaceMatch) {
      replaceResult = "";
      var replaceLastIndex = 0;
  
      do {
        if (replaceLastIndex !== replaceMatch.index) {
          replaceResult += macroText.substring(replaceLastIndex, replaceMatch.index);
        }
  
        var replaceInput = replaceMatch[0];
        replaceResult += macroReplacer(replaceInput);
        replaceLastIndex = replaceMatch.index + replaceInput.length;
      } while (replaceMatch = macroRegExp.exec(macroText));
  
      if (replaceLastIndex !== macroText.length) {
        replaceResult += macroText.substring(replaceLastIndex);
      }
    } else {
      replaceResult = macroText;
    }
  
    return replaceResult;
  }
  
  var encodeRegExps = {
    specialChars: /[<>'"&]/g,
    nonAscii: /[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,
    nonAsciiPrintable: /[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,
    nonAsciiPrintableOnly: /[\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,
    extensive: /[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g
  };
  var defaultEncodeOptions = {
    mode: "specialChars",
    level: "all",
    numeric: "decimal"
  };
  
  function encode(text, _a) {
    var _b = _a === void 0 ? defaultEncodeOptions : _a,
        _c = _b.mode,
        mode = _c === void 0 ? "specialChars" : _c,
        _d = _b.numeric,
        numeric = _d === void 0 ? "decimal" : _d,
        _e = _b.level,
        level = _e === void 0 ? "all" : _e;
  
    if (!text) {
      return "";
    }
  
    var encodeRegExp = encodeRegExps[mode];
    var references = allNamedReferences[level].characters;
    var isHex = numeric === "hexadecimal";
    return replaceUsingRegExp(text, encodeRegExp, function (input) {
      var result = references[input];
  
      if (!result) {
        var code = input.length > 1 ? surrogate_pairs_1.getCodePoint(input, 0) : input.charCodeAt(0);
        result = (isHex ? "&#x" + code.toString(16) : "&#" + code) + ";";
      }
  
      return result;
    });
  }
  
  exports.encode = encode;
  var defaultDecodeOptions = {
    scope: "body",
    level: "all"
  };
  var strict = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g;
  var attribute = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;
  var baseDecodeRegExps = {
    xml: {
      strict: strict,
      attribute: attribute,
      body: named_references_1.bodyRegExps.xml
    },
    html4: {
      strict: strict,
      attribute: attribute,
      body: named_references_1.bodyRegExps.html4
    },
    html5: {
      strict: strict,
      attribute: attribute,
      body: named_references_1.bodyRegExps.html5
    }
  };
  
  var decodeRegExps = __assign(__assign({}, baseDecodeRegExps), {
    all: baseDecodeRegExps.html5
  });
  
  var fromCharCode = String.fromCharCode;
  var outOfBoundsChar = fromCharCode(65533);
  var defaultDecodeEntityOptions = {
    level: "all"
  };
  
  function getDecodedEntity(entity, references, isAttribute, isStrict) {
    var decodeResult = entity;
    var decodeEntityLastChar = entity[entity.length - 1];
  
    if (isAttribute && decodeEntityLastChar === "=") {
      decodeResult = entity;
    } else if (isStrict && decodeEntityLastChar !== ";") {
      decodeResult = entity;
    } else {
      var decodeResultByReference = references[entity];
  
      if (decodeResultByReference) {
        decodeResult = decodeResultByReference;
      } else if (entity[0] === "&" && entity[1] === "#") {
        var decodeSecondChar = entity[2];
        var decodeCode = decodeSecondChar == "x" || decodeSecondChar == "X" ? parseInt(entity.substr(3), 16) : parseInt(entity.substr(2));
        decodeResult = decodeCode >= 1114111 ? outOfBoundsChar : decodeCode > 65535 ? surrogate_pairs_1.fromCodePoint(decodeCode) : fromCharCode(numeric_unicode_map_1.numericUnicodeMap[decodeCode] || decodeCode);
      }
    }
  
    return decodeResult;
  }
  
  function decodeEntity(entity, _a) {
    var _b = (_a === void 0 ? defaultDecodeEntityOptions : _a).level,
        level = _b === void 0 ? "all" : _b;
  
    if (!entity) {
      return "";
    }
  
    return getDecodedEntity(entity, allNamedReferences[level].entities, false, false);
  }
  
  exports.decodeEntity = decodeEntity;
  
  function decode(text, _a) {
    var _b = _a === void 0 ? defaultDecodeOptions : _a,
        _c = _b.level,
        level = _c === void 0 ? "all" : _c,
        _d = _b.scope,
        scope = _d === void 0 ? level === "xml" ? "strict" : "body" : _d;
  
    if (!text) {
      return "";
    }
  
    var decodeRegExp = decodeRegExps[level][scope];
    var references = allNamedReferences[level].entities;
    var isAttribute = scope === "attribute";
    var isStrict = scope === "strict";
    return replaceUsingRegExp(text, decodeRegExp, function (entity) {
      return getDecodedEntity(entity, references, isAttribute, isStrict);
    });
  }
  
  exports.decode = decode;
  
  /***/ }),
  
  /***/ 547:
  /***/ ((__unused_webpack_module, exports) => {
  
  
  
  Object.defineProperty(exports, "__esModule", ({
    value: true
  }));
  exports.bodyRegExps = {
    xml: /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,
    html4: /&notin;|&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,
    html5: /&centerdot;|&copysr;|&divideontimes;|&gtcc;|&gtcir;|&gtdot;|&gtlPar;|&gtquest;|&gtrapprox;|&gtrarr;|&gtrdot;|&gtreqless;|&gtreqqless;|&gtrless;|&gtrsim;|&ltcc;|&ltcir;|&ltdot;|&lthree;|&ltimes;|&ltlarr;|&ltquest;|&ltrPar;|&ltri;|&ltrie;|&ltrif;|&notin;|&notinE;|&notindot;|&notinva;|&notinvb;|&notinvc;|&notni;|&notniva;|&notnivb;|&notnivc;|&parallel;|&timesb;|&timesbar;|&timesd;|&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g
  };
  exports.namedReferences = {
    xml: {
      entities: {
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&apos;": "'",
        "&amp;": "&"
      },
      characters: {
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&apos;",
        "&": "&amp;"
      }
    },
    html4: {
      entities: {
        "&apos;": "'",
        "&nbsp": " ",
        "&nbsp;": " ",
        "&iexcl": "¡",
        "&iexcl;": "¡",
        "&cent": "¢",
        "&cent;": "¢",
        "&pound": "£",
        "&pound;": "£",
        "&curren": "¤",
        "&curren;": "¤",
        "&yen": "¥",
        "&yen;": "¥",
        "&brvbar": "¦",
        "&brvbar;": "¦",
        "&sect": "§",
        "&sect;": "§",
        "&uml": "¨",
        "&uml;": "¨",
        "&copy": "©",
        "&copy;": "©",
        "&ordf": "ª",
        "&ordf;": "ª",
        "&laquo": "«",
        "&laquo;": "«",
        "&not": "¬",
        "&not;": "¬",
        "&shy": "­",
        "&shy;": "­",
        "&reg": "®",
        "&reg;": "®",
        "&macr": "¯",
        "&macr;": "¯",
        "&deg": "°",
        "&deg;": "°",
        "&plusmn": "±",
        "&plusmn;": "±",
        "&sup2": "²",
        "&sup2;": "²",
        "&sup3": "³",
        "&sup3;": "³",
        "&acute": "´",
        "&acute;": "´",
        "&micro": "µ",
        "&micro;": "µ",
        "&para": "¶",
        "&para;": "¶",
        "&middot": "·",
        "&middot;": "·",
        "&cedil": "¸",
        "&cedil;": "¸",
        "&sup1": "¹",
        "&sup1;": "¹",
        "&ordm": "º",
        "&ordm;": "º",
        "&raquo": "»",
        "&raquo;": "»",
        "&frac14": "¼",
        "&frac14;": "¼",
        "&frac12": "½",
        "&frac12;": "½",
        "&frac34": "¾",
        "&frac34;": "¾",
        "&iquest": "¿",
        "&iquest;": "¿",
        "&Agrave": "À",
        "&Agrave;": "À",
        "&Aacute": "Á",
        "&Aacute;": "Á",
        "&Acirc": "Â",
        "&Acirc;": "Â",
        "&Atilde": "Ã",
        "&Atilde;": "Ã",
        "&Auml": "Ä",
        "&Auml;": "Ä",
        "&Aring": "Å",
        "&Aring;": "Å",
        "&AElig": "Æ",
        "&AElig;": "Æ",
        "&Ccedil": "Ç",
        "&Ccedil;": "Ç",
        "&Egrave": "È",
        "&Egrave;": "È",
        "&Eacute": "É",
        "&Eacute;": "É",
        "&Ecirc": "Ê",
        "&Ecirc;": "Ê",
        "&Euml": "Ë",
        "&Euml;": "Ë",
        "&Igrave": "Ì",
        "&Igrave;": "Ì",
        "&Iacute": "Í",
        "&Iacute;": "Í",
        "&Icirc": "Î",
        "&Icirc;": "Î",
        "&Iuml": "Ï",
        "&Iuml;": "Ï",
        "&ETH": "Ð",
        "&ETH;": "Ð",
        "&Ntilde": "Ñ",
        "&Ntilde;": "Ñ",
        "&Ograve": "Ò",
        "&Ograve;": "Ò",
        "&Oacute": "Ó",
        "&Oacute;": "Ó",
        "&Ocirc": "Ô",
        "&Ocirc;": "Ô",
        "&Otilde": "Õ",
        "&Otilde;": "Õ",
        "&Ouml": "Ö",
        "&Ouml;": "Ö",
        "&times": "×",
        "&times;": "×",
        "&Oslash": "Ø",
        "&Oslash;": "Ø",
        "&Ugrave": "Ù",
        "&Ugrave;": "Ù",
        "&Uacute": "Ú",
        "&Uacute;": "Ú",
        "&Ucirc": "Û",
        "&Ucirc;": "Û",
        "&Uuml": "Ü",
        "&Uuml;": "Ü",
        "&Yacute": "Ý",
        "&Yacute;": "Ý",
        "&THORN": "Þ",
        "&THORN;": "Þ",
        "&szlig": "ß",
        "&szlig;": "ß",
        "&agrave": "à",
        "&agrave;": "à",
        "&aacute": "á",
        "&aacute;": "á",
        "&acirc": "â",
        "&acirc;": "â",
        "&atilde": "ã",
        "&atilde;": "ã",
        "&auml": "ä",
        "&auml;": "ä",
        "&aring": "å",
        "&aring;": "å",
        "&aelig": "æ",
        "&aelig;": "æ",
        "&ccedil": "ç",
        "&ccedil;": "ç",
        "&egrave": "è",
        "&egrave;": "è",
        "&eacute": "é",
        "&eacute;": "é",
        "&ecirc": "ê",
        "&ecirc;": "ê",
        "&euml": "ë",
        "&euml;": "ë",
        "&igrave": "ì",
        "&igrave;": "ì",
        "&iacute": "í",
        "&iacute;": "í",
        "&icirc": "î",
        "&icirc;": "î",
        "&iuml": "ï",
        "&iuml;": "ï",
        "&eth": "ð",
        "&eth;": "ð",
        "&ntilde": "ñ",
        "&ntilde;": "ñ",
        "&ograve": "ò",
        "&ograve;": "ò",
        "&oacute": "ó",
        "&oacute;": "ó",
        "&ocirc": "ô",
        "&ocirc;": "ô",
        "&otilde": "õ",
        "&otilde;": "õ",
        "&ouml": "ö",
        "&ouml;": "ö",
        "&divide": "÷",
        "&divide;": "÷",
        "&oslash": "ø",
        "&oslash;": "ø",
        "&ugrave": "ù",
        "&ugrave;": "ù",
        "&uacute": "ú",
        "&uacute;": "ú",
        "&ucirc": "û",
        "&ucirc;": "û",
        "&uuml": "ü",
        "&uuml;": "ü",
        "&yacute": "ý",
        "&yacute;": "ý",
        "&thorn": "þ",
        "&thorn;": "þ",
        "&yuml": "ÿ",
        "&yuml;": "ÿ",
        "&quot": '"',
        "&quot;": '"',
        "&amp": "&",
        "&amp;": "&",
        "&lt": "<",
        "&lt;": "<",
        "&gt": ">",
        "&gt;": ">",
        "&OElig;": "Œ",
        "&oelig;": "œ",
        "&Scaron;": "Š",
        "&scaron;": "š",
        "&Yuml;": "Ÿ",
        "&circ;": "ˆ",
        "&tilde;": "˜",
        "&ensp;": " ",
        "&emsp;": " ",
        "&thinsp;": " ",
        "&zwnj;": "‌",
        "&zwj;": "‍",
        "&lrm;": "‎",
        "&rlm;": "‏",
        "&ndash;": "–",
        "&mdash;": "—",
        "&lsquo;": "‘",
        "&rsquo;": "’",
        "&sbquo;": "‚",
        "&ldquo;": "“",
        "&rdquo;": "”",
        "&bdquo;": "„",
        "&dagger;": "†",
        "&Dagger;": "‡",
        "&permil;": "‰",
        "&lsaquo;": "‹",
        "&rsaquo;": "›",
        "&euro;": "€",
        "&fnof;": "ƒ",
        "&Alpha;": "Α",
        "&Beta;": "Β",
        "&Gamma;": "Γ",
        "&Delta;": "Δ",
        "&Epsilon;": "Ε",
        "&Zeta;": "Ζ",
        "&Eta;": "Η",
        "&Theta;": "Θ",
        "&Iota;": "Ι",
        "&Kappa;": "Κ",
        "&Lambda;": "Λ",
        "&Mu;": "Μ",
        "&Nu;": "Ν",
        "&Xi;": "Ξ",
        "&Omicron;": "Ο",
        "&Pi;": "Π",
        "&Rho;": "Ρ",
        "&Sigma;": "Σ",
        "&Tau;": "Τ",
        "&Upsilon;": "Υ",
        "&Phi;": "Φ",
        "&Chi;": "Χ",
        "&Psi;": "Ψ",
        "&Omega;": "Ω",
        "&alpha;": "α",
        "&beta;": "β",
        "&gamma;": "γ",
        "&delta;": "δ",
        "&epsilon;": "ε",
        "&zeta;": "ζ",
        "&eta;": "η",
        "&theta;": "θ",
        "&iota;": "ι",
        "&kappa;": "κ",
        "&lambda;": "λ",
        "&mu;": "μ",
        "&nu;": "ν",
        "&xi;": "ξ",
        "&omicron;": "ο",
        "&pi;": "π",
        "&rho;": "ρ",
        "&sigmaf;": "ς",
        "&sigma;": "σ",
        "&tau;": "τ",
        "&upsilon;": "υ",
        "&phi;": "φ",
        "&chi;": "χ",
        "&psi;": "ψ",
        "&omega;": "ω",
        "&thetasym;": "ϑ",
        "&upsih;": "ϒ",
        "&piv;": "ϖ",
        "&bull;": "•",
        "&hellip;": "…",
        "&prime;": "′",
        "&Prime;": "″",
        "&oline;": "‾",
        "&frasl;": "⁄",
        "&weierp;": "℘",
        "&image;": "ℑ",
        "&real;": "ℜ",
        "&trade;": "™",
        "&alefsym;": "ℵ",
        "&larr;": "←",
        "&uarr;": "↑",
        "&rarr;": "→",
        "&darr;": "↓",
        "&harr;": "↔",
        "&crarr;": "↵",
        "&lArr;": "⇐",
        "&uArr;": "⇑",
        "&rArr;": "⇒",
        "&dArr;": "⇓",
        "&hArr;": "⇔",
        "&forall;": "∀",
        "&part;": "∂",
        "&exist;": "∃",
        "&empty;": "∅",
        "&nabla;": "∇",
        "&isin;": "∈",
        "&notin;": "∉",
        "&ni;": "∋",
        "&prod;": "∏",
        "&sum;": "∑",
        "&minus;": "−",
        "&lowast;": "∗",
        "&radic;": "√",
        "&prop;": "∝",
        "&infin;": "∞",
        "&ang;": "∠",
        "&and;": "∧",
        "&or;": "∨",
        "&cap;": "∩",
        "&cup;": "∪",
        "&int;": "∫",
        "&there4;": "∴",
        "&sim;": "∼",
        "&cong;": "≅",
        "&asymp;": "≈",
        "&ne;": "≠",
        "&equiv;": "≡",
        "&le;": "≤",
        "&ge;": "≥",
        "&sub;": "⊂",
        "&sup;": "⊃",
        "&nsub;": "⊄",
        "&sube;": "⊆",
        "&supe;": "⊇",
        "&oplus;": "⊕",
        "&otimes;": "⊗",
        "&perp;": "⊥",
        "&sdot;": "⋅",
        "&lceil;": "⌈",
        "&rceil;": "⌉",
        "&lfloor;": "⌊",
        "&rfloor;": "⌋",
        "&lang;": "〈",
        "&rang;": "〉",
        "&loz;": "◊",
        "&spades;": "♠",
        "&clubs;": "♣",
        "&hearts;": "♥",
        "&diams;": "♦"
      },
      characters: {
        "'": "&apos;",
        " ": "&nbsp;",
        "¡": "&iexcl;",
        "¢": "&cent;",
        "£": "&pound;",
        "¤": "&curren;",
        "¥": "&yen;",
        "¦": "&brvbar;",
        "§": "&sect;",
        "¨": "&uml;",
        "©": "&copy;",
        "ª": "&ordf;",
        "«": "&laquo;",
        "¬": "&not;",
        "­": "&shy;",
        "®": "&reg;",
        "¯": "&macr;",
        "°": "&deg;",
        "±": "&plusmn;",
        "²": "&sup2;",
        "³": "&sup3;",
        "´": "&acute;",
        "µ": "&micro;",
        "¶": "&para;",
        "·": "&middot;",
        "¸": "&cedil;",
        "¹": "&sup1;",
        "º": "&ordm;",
        "»": "&raquo;",
        "¼": "&frac14;",
        "½": "&frac12;",
        "¾": "&frac34;",
        "¿": "&iquest;",
        "À": "&Agrave;",
        "Á": "&Aacute;",
        "Â": "&Acirc;",
        "Ã": "&Atilde;",
        "Ä": "&Auml;",
        "Å": "&Aring;",
        "Æ": "&AElig;",
        "Ç": "&Ccedil;",
        "È": "&Egrave;",
        "É": "&Eacute;",
        "Ê": "&Ecirc;",
        "Ë": "&Euml;",
        "Ì": "&Igrave;",
        "Í": "&Iacute;",
        "Î": "&Icirc;",
        "Ï": "&Iuml;",
        "Ð": "&ETH;",
        "Ñ": "&Ntilde;",
        "Ò": "&Ograve;",
        "Ó": "&Oacute;",
        "Ô": "&Ocirc;",
        "Õ": "&Otilde;",
        "Ö": "&Ouml;",
        "×": "&times;",
        "Ø": "&Oslash;",
        "Ù": "&Ugrave;",
        "Ú": "&Uacute;",
        "Û": "&Ucirc;",
        "Ü": "&Uuml;",
        "Ý": "&Yacute;",
        "Þ": "&THORN;",
        "ß": "&szlig;",
        "à": "&agrave;",
        "á": "&aacute;",
        "â": "&acirc;",
        "ã": "&atilde;",
        "ä": "&auml;",
        "å": "&aring;",
        "æ": "&aelig;",
        "ç": "&ccedil;",
        "è": "&egrave;",
        "é": "&eacute;",
        "ê": "&ecirc;",
        "ë": "&euml;",
        "ì": "&igrave;",
        "í": "&iacute;",
        "î": "&icirc;",
        "ï": "&iuml;",
        "ð": "&eth;",
        "ñ": "&ntilde;",
        "ò": "&ograve;",
        "ó": "&oacute;",
        "ô": "&ocirc;",
        "õ": "&otilde;",
        "ö": "&ouml;",
        "÷": "&divide;",
        "ø": "&oslash;",
        "ù": "&ugrave;",
        "ú": "&uacute;",
        "û": "&ucirc;",
        "ü": "&uuml;",
        "ý": "&yacute;",
        "þ": "&thorn;",
        "ÿ": "&yuml;",
        '"': "&quot;",
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        "Œ": "&OElig;",
        "œ": "&oelig;",
        "Š": "&Scaron;",
        "š": "&scaron;",
        "Ÿ": "&Yuml;",
        "ˆ": "&circ;",
        "˜": "&tilde;",
        " ": "&ensp;",
        " ": "&emsp;",
        " ": "&thinsp;",
        "‌": "&zwnj;",
        "‍": "&zwj;",
        "‎": "&lrm;",
        "‏": "&rlm;",
        "–": "&ndash;",
        "—": "&mdash;",
        "‘": "&lsquo;",
        "’": "&rsquo;",
        "‚": "&sbquo;",
        "“": "&ldquo;",
        "”": "&rdquo;",
        "„": "&bdquo;",
        "†": "&dagger;",
        "‡": "&Dagger;",
        "‰": "&permil;",
        "‹": "&lsaquo;",
        "›": "&rsaquo;",
        "€": "&euro;",
        "ƒ": "&fnof;",
        "Α": "&Alpha;",
        "Β": "&Beta;",
        "Γ": "&Gamma;",
        "Δ": "&Delta;",
        "Ε": "&Epsilon;",
        "Ζ": "&Zeta;",
        "Η": "&Eta;",
        "Θ": "&Theta;",
        "Ι": "&Iota;",
        "Κ": "&Kappa;",
        "Λ": "&Lambda;",
        "Μ": "&Mu;",
        "Ν": "&Nu;",
        "Ξ": "&Xi;",
        "Ο": "&Omicron;",
        "Π": "&Pi;",
        "Ρ": "&Rho;",
        "Σ": "&Sigma;",
        "Τ": "&Tau;",
        "Υ": "&Upsilon;",
        "Φ": "&Phi;",
        "Χ": "&Chi;",
        "Ψ": "&Psi;",
        "Ω": "&Omega;",
        "α": "&alpha;",
        "β": "&beta;",
        "γ": "&gamma;",
        "δ": "&delta;",
        "ε": "&epsilon;",
        "ζ": "&zeta;",
        "η": "&eta;",
        "θ": "&theta;",
        "ι": "&iota;",
        "κ": "&kappa;",
        "λ": "&lambda;",
        "μ": "&mu;",
        "ν": "&nu;",
        "ξ": "&xi;",
        "ο": "&omicron;",
        "π": "&pi;",
        "ρ": "&rho;",
        "ς": "&sigmaf;",
        "σ": "&sigma;",
        "τ": "&tau;",
        "υ": "&upsilon;",
        "φ": "&phi;",
        "χ": "&chi;",
        "ψ": "&psi;",
        "ω": "&omega;",
        "ϑ": "&thetasym;",
        "ϒ": "&upsih;",
        "ϖ": "&piv;",
        "•": "&bull;",
        "…": "&hellip;",
        "′": "&prime;",
        "″": "&Prime;",
        "‾": "&oline;",
        "⁄": "&frasl;",
        "℘": "&weierp;",
        "ℑ": "&image;",
        "ℜ": "&real;",
        "™": "&trade;",
        "ℵ": "&alefsym;",
        "←": "&larr;",
        "↑": "&uarr;",
        "→": "&rarr;",
        "↓": "&darr;",
        "↔": "&harr;",
        "↵": "&crarr;",
        "⇐": "&lArr;",
        "⇑": "&uArr;",
        "⇒": "&rArr;",
        "⇓": "&dArr;",
        "⇔": "&hArr;",
        "∀": "&forall;",
        "∂": "&part;",
        "∃": "&exist;",
        "∅": "&empty;",
        "∇": "&nabla;",
        "∈": "&isin;",
        "∉": "&notin;",
        "∋": "&ni;",
        "∏": "&prod;",
        "∑": "&sum;",
        "−": "&minus;",
        "∗": "&lowast;",
        "√": "&radic;",
        "∝": "&prop;",
        "∞": "&infin;",
        "∠": "&ang;",
        "∧": "&and;",
        "∨": "&or;",
        "∩": "&cap;",
        "∪": "&cup;",
        "∫": "&int;",
        "∴": "&there4;",
        "∼": "&sim;",
        "≅": "&cong;",
        "≈": "&asymp;",
        "≠": "&ne;",
        "≡": "&equiv;",
        "≤": "&le;",
        "≥": "&ge;",
        "⊂": "&sub;",
        "⊃": "&sup;",
        "⊄": "&nsub;",
        "⊆": "&sube;",
        "⊇": "&supe;",
        "⊕": "&oplus;",
        "⊗": "&otimes;",
        "⊥": "&perp;",
        "⋅": "&sdot;",
        "⌈": "&lceil;",
        "⌉": "&rceil;",
        "⌊": "&lfloor;",
        "⌋": "&rfloor;",
        "〈": "&lang;",
        "〉": "&rang;",
        "◊": "&loz;",
        "♠": "&spades;",
        "♣": "&clubs;",
        "♥": "&hearts;",
        "♦": "&diams;"
      }
    },
    html5: {
      entities: {
        "&AElig": "Æ",
        "&AElig;": "Æ",
        "&AMP": "&",
        "&AMP;": "&",
        "&Aacute": "Á",
        "&Aacute;": "Á",
        "&Abreve;": "Ă",
        "&Acirc": "Â",
        "&Acirc;": "Â",
        "&Acy;": "А",
        "&Afr;": "𝔄",
        "&Agrave": "À",
        "&Agrave;": "À",
        "&Alpha;": "Α",
        "&Amacr;": "Ā",
        "&And;": "⩓",
        "&Aogon;": "Ą",
        "&Aopf;": "𝔸",
        "&ApplyFunction;": "⁡",
        "&Aring": "Å",
        "&Aring;": "Å",
        "&Ascr;": "𝒜",
        "&Assign;": "≔",
        "&Atilde": "Ã",
        "&Atilde;": "Ã",
        "&Auml": "Ä",
        "&Auml;": "Ä",
        "&Backslash;": "∖",
        "&Barv;": "⫧",
        "&Barwed;": "⌆",
        "&Bcy;": "Б",
        "&Because;": "∵",
        "&Bernoullis;": "ℬ",
        "&Beta;": "Β",
        "&Bfr;": "𝔅",
        "&Bopf;": "𝔹",
        "&Breve;": "˘",
        "&Bscr;": "ℬ",
        "&Bumpeq;": "≎",
        "&CHcy;": "Ч",
        "&COPY": "©",
        "&COPY;": "©",
        "&Cacute;": "Ć",
        "&Cap;": "⋒",
        "&CapitalDifferentialD;": "ⅅ",
        "&Cayleys;": "ℭ",
        "&Ccaron;": "Č",
        "&Ccedil": "Ç",
        "&Ccedil;": "Ç",
        "&Ccirc;": "Ĉ",
        "&Cconint;": "∰",
        "&Cdot;": "Ċ",
        "&Cedilla;": "¸",
        "&CenterDot;": "·",
        "&Cfr;": "ℭ",
        "&Chi;": "Χ",
        "&CircleDot;": "⊙",
        "&CircleMinus;": "⊖",
        "&CirclePlus;": "⊕",
        "&CircleTimes;": "⊗",
        "&ClockwiseContourIntegral;": "∲",
        "&CloseCurlyDoubleQuote;": "”",
        "&CloseCurlyQuote;": "’",
        "&Colon;": "∷",
        "&Colone;": "⩴",
        "&Congruent;": "≡",
        "&Conint;": "∯",
        "&ContourIntegral;": "∮",
        "&Copf;": "ℂ",
        "&Coproduct;": "∐",
        "&CounterClockwiseContourIntegral;": "∳",
        "&Cross;": "⨯",
        "&Cscr;": "𝒞",
        "&Cup;": "⋓",
        "&CupCap;": "≍",
        "&DD;": "ⅅ",
        "&DDotrahd;": "⤑",
        "&DJcy;": "Ђ",
        "&DScy;": "Ѕ",
        "&DZcy;": "Џ",
        "&Dagger;": "‡",
        "&Darr;": "↡",
        "&Dashv;": "⫤",
        "&Dcaron;": "Ď",
        "&Dcy;": "Д",
        "&Del;": "∇",
        "&Delta;": "Δ",
        "&Dfr;": "𝔇",
        "&DiacriticalAcute;": "´",
        "&DiacriticalDot;": "˙",
        "&DiacriticalDoubleAcute;": "˝",
        "&DiacriticalGrave;": "`",
        "&DiacriticalTilde;": "˜",
        "&Diamond;": "⋄",
        "&DifferentialD;": "ⅆ",
        "&Dopf;": "𝔻",
        "&Dot;": "¨",
        "&DotDot;": "⃜",
        "&DotEqual;": "≐",
        "&DoubleContourIntegral;": "∯",
        "&DoubleDot;": "¨",
        "&DoubleDownArrow;": "⇓",
        "&DoubleLeftArrow;": "⇐",
        "&DoubleLeftRightArrow;": "⇔",
        "&DoubleLeftTee;": "⫤",
        "&DoubleLongLeftArrow;": "⟸",
        "&DoubleLongLeftRightArrow;": "⟺",
        "&DoubleLongRightArrow;": "⟹",
        "&DoubleRightArrow;": "⇒",
        "&DoubleRightTee;": "⊨",
        "&DoubleUpArrow;": "⇑",
        "&DoubleUpDownArrow;": "⇕",
        "&DoubleVerticalBar;": "∥",
        "&DownArrow;": "↓",
        "&DownArrowBar;": "⤓",
        "&DownArrowUpArrow;": "⇵",
        "&DownBreve;": "̑",
        "&DownLeftRightVector;": "⥐",
        "&DownLeftTeeVector;": "⥞",
        "&DownLeftVector;": "↽",
        "&DownLeftVectorBar;": "⥖",
        "&DownRightTeeVector;": "⥟",
        "&DownRightVector;": "⇁",
        "&DownRightVectorBar;": "⥗",
        "&DownTee;": "⊤",
        "&DownTeeArrow;": "↧",
        "&Downarrow;": "⇓",
        "&Dscr;": "𝒟",
        "&Dstrok;": "Đ",
        "&ENG;": "Ŋ",
        "&ETH": "Ð",
        "&ETH;": "Ð",
        "&Eacute": "É",
        "&Eacute;": "É",
        "&Ecaron;": "Ě",
        "&Ecirc": "Ê",
        "&Ecirc;": "Ê",
        "&Ecy;": "Э",
        "&Edot;": "Ė",
        "&Efr;": "𝔈",
        "&Egrave": "È",
        "&Egrave;": "È",
        "&Element;": "∈",
        "&Emacr;": "Ē",
        "&EmptySmallSquare;": "◻",
        "&EmptyVerySmallSquare;": "▫",
        "&Eogon;": "Ę",
        "&Eopf;": "𝔼",
        "&Epsilon;": "Ε",
        "&Equal;": "⩵",
        "&EqualTilde;": "≂",
        "&Equilibrium;": "⇌",
        "&Escr;": "ℰ",
        "&Esim;": "⩳",
        "&Eta;": "Η",
        "&Euml": "Ë",
        "&Euml;": "Ë",
        "&Exists;": "∃",
        "&ExponentialE;": "ⅇ",
        "&Fcy;": "Ф",
        "&Ffr;": "𝔉",
        "&FilledSmallSquare;": "◼",
        "&FilledVerySmallSquare;": "▪",
        "&Fopf;": "𝔽",
        "&ForAll;": "∀",
        "&Fouriertrf;": "ℱ",
        "&Fscr;": "ℱ",
        "&GJcy;": "Ѓ",
        "&GT": ">",
        "&GT;": ">",
        "&Gamma;": "Γ",
        "&Gammad;": "Ϝ",
        "&Gbreve;": "Ğ",
        "&Gcedil;": "Ģ",
        "&Gcirc;": "Ĝ",
        "&Gcy;": "Г",
        "&Gdot;": "Ġ",
        "&Gfr;": "𝔊",
        "&Gg;": "⋙",
        "&Gopf;": "𝔾",
        "&GreaterEqual;": "≥",
        "&GreaterEqualLess;": "⋛",
        "&GreaterFullEqual;": "≧",
        "&GreaterGreater;": "⪢",
        "&GreaterLess;": "≷",
        "&GreaterSlantEqual;": "⩾",
        "&GreaterTilde;": "≳",
        "&Gscr;": "𝒢",
        "&Gt;": "≫",
        "&HARDcy;": "Ъ",
        "&Hacek;": "ˇ",
        "&Hat;": "^",
        "&Hcirc;": "Ĥ",
        "&Hfr;": "ℌ",
        "&HilbertSpace;": "ℋ",
        "&Hopf;": "ℍ",
        "&HorizontalLine;": "─",
        "&Hscr;": "ℋ",
        "&Hstrok;": "Ħ",
        "&HumpDownHump;": "≎",
        "&HumpEqual;": "≏",
        "&IEcy;": "Е",
        "&IJlig;": "Ĳ",
        "&IOcy;": "Ё",
        "&Iacute": "Í",
        "&Iacute;": "Í",
        "&Icirc": "Î",
        "&Icirc;": "Î",
        "&Icy;": "И",
        "&Idot;": "İ",
        "&Ifr;": "ℑ",
        "&Igrave": "Ì",
        "&Igrave;": "Ì",
        "&Im;": "ℑ",
        "&Imacr;": "Ī",
        "&ImaginaryI;": "ⅈ",
        "&Implies;": "⇒",
        "&Int;": "∬",
        "&Integral;": "∫",
        "&Intersection;": "⋂",
        "&InvisibleComma;": "⁣",
        "&InvisibleTimes;": "⁢",
        "&Iogon;": "Į",
        "&Iopf;": "𝕀",
        "&Iota;": "Ι",
        "&Iscr;": "ℐ",
        "&Itilde;": "Ĩ",
        "&Iukcy;": "І",
        "&Iuml": "Ï",
        "&Iuml;": "Ï",
        "&Jcirc;": "Ĵ",
        "&Jcy;": "Й",
        "&Jfr;": "𝔍",
        "&Jopf;": "𝕁",
        "&Jscr;": "𝒥",
        "&Jsercy;": "Ј",
        "&Jukcy;": "Є",
        "&KHcy;": "Х",
        "&KJcy;": "Ќ",
        "&Kappa;": "Κ",
        "&Kcedil;": "Ķ",
        "&Kcy;": "К",
        "&Kfr;": "𝔎",
        "&Kopf;": "𝕂",
        "&Kscr;": "𝒦",
        "&LJcy;": "Љ",
        "&LT": "<",
        "&LT;": "<",
        "&Lacute;": "Ĺ",
        "&Lambda;": "Λ",
        "&Lang;": "⟪",
        "&Laplacetrf;": "ℒ",
        "&Larr;": "↞",
        "&Lcaron;": "Ľ",
        "&Lcedil;": "Ļ",
        "&Lcy;": "Л",
        "&LeftAngleBracket;": "⟨",
        "&LeftArrow;": "←",
        "&LeftArrowBar;": "⇤",
        "&LeftArrowRightArrow;": "⇆",
        "&LeftCeiling;": "⌈",
        "&LeftDoubleBracket;": "⟦",
        "&LeftDownTeeVector;": "⥡",
        "&LeftDownVector;": "⇃",
        "&LeftDownVectorBar;": "⥙",
        "&LeftFloor;": "⌊",
        "&LeftRightArrow;": "↔",
        "&LeftRightVector;": "⥎",
        "&LeftTee;": "⊣",
        "&LeftTeeArrow;": "↤",
        "&LeftTeeVector;": "⥚",
        "&LeftTriangle;": "⊲",
        "&LeftTriangleBar;": "⧏",
        "&LeftTriangleEqual;": "⊴",
        "&LeftUpDownVector;": "⥑",
        "&LeftUpTeeVector;": "⥠",
        "&LeftUpVector;": "↿",
        "&LeftUpVectorBar;": "⥘",
        "&LeftVector;": "↼",
        "&LeftVectorBar;": "⥒",
        "&Leftarrow;": "⇐",
        "&Leftrightarrow;": "⇔",
        "&LessEqualGreater;": "⋚",
        "&LessFullEqual;": "≦",
        "&LessGreater;": "≶",
        "&LessLess;": "⪡",
        "&LessSlantEqual;": "⩽",
        "&LessTilde;": "≲",
        "&Lfr;": "𝔏",
        "&Ll;": "⋘",
        "&Lleftarrow;": "⇚",
        "&Lmidot;": "Ŀ",
        "&LongLeftArrow;": "⟵",
        "&LongLeftRightArrow;": "⟷",
        "&LongRightArrow;": "⟶",
        "&Longleftarrow;": "⟸",
        "&Longleftrightarrow;": "⟺",
        "&Longrightarrow;": "⟹",
        "&Lopf;": "𝕃",
        "&LowerLeftArrow;": "↙",
        "&LowerRightArrow;": "↘",
        "&Lscr;": "ℒ",
        "&Lsh;": "↰",
        "&Lstrok;": "Ł",
        "&Lt;": "≪",
        "&Map;": "⤅",
        "&Mcy;": "М",
        "&MediumSpace;": " ",
        "&Mellintrf;": "ℳ",
        "&Mfr;": "𝔐",
        "&MinusPlus;": "∓",
        "&Mopf;": "𝕄",
        "&Mscr;": "ℳ",
        "&Mu;": "Μ",
        "&NJcy;": "Њ",
        "&Nacute;": "Ń",
        "&Ncaron;": "Ň",
        "&Ncedil;": "Ņ",
        "&Ncy;": "Н",
        "&NegativeMediumSpace;": "​",
        "&NegativeThickSpace;": "​",
        "&NegativeThinSpace;": "​",
        "&NegativeVeryThinSpace;": "​",
        "&NestedGreaterGreater;": "≫",
        "&NestedLessLess;": "≪",
        "&NewLine;": "\n",
        "&Nfr;": "𝔑",
        "&NoBreak;": "⁠",
        "&NonBreakingSpace;": " ",
        "&Nopf;": "ℕ",
        "&Not;": "⫬",
        "&NotCongruent;": "≢",
        "&NotCupCap;": "≭",
        "&NotDoubleVerticalBar;": "∦",
        "&NotElement;": "∉",
        "&NotEqual;": "≠",
        "&NotEqualTilde;": "≂̸",
        "&NotExists;": "∄",
        "&NotGreater;": "≯",
        "&NotGreaterEqual;": "≱",
        "&NotGreaterFullEqual;": "≧̸",
        "&NotGreaterGreater;": "≫̸",
        "&NotGreaterLess;": "≹",
        "&NotGreaterSlantEqual;": "⩾̸",
        "&NotGreaterTilde;": "≵",
        "&NotHumpDownHump;": "≎̸",
        "&NotHumpEqual;": "≏̸",
        "&NotLeftTriangle;": "⋪",
        "&NotLeftTriangleBar;": "⧏̸",
        "&NotLeftTriangleEqual;": "⋬",
        "&NotLess;": "≮",
        "&NotLessEqual;": "≰",
        "&NotLessGreater;": "≸",
        "&NotLessLess;": "≪̸",
        "&NotLessSlantEqual;": "⩽̸",
        "&NotLessTilde;": "≴",
        "&NotNestedGreaterGreater;": "⪢̸",
        "&NotNestedLessLess;": "⪡̸",
        "&NotPrecedes;": "⊀",
        "&NotPrecedesEqual;": "⪯̸",
        "&NotPrecedesSlantEqual;": "⋠",
        "&NotReverseElement;": "∌",
        "&NotRightTriangle;": "⋫",
        "&NotRightTriangleBar;": "⧐̸",
        "&NotRightTriangleEqual;": "⋭",
        "&NotSquareSubset;": "⊏̸",
        "&NotSquareSubsetEqual;": "⋢",
        "&NotSquareSuperset;": "⊐̸",
        "&NotSquareSupersetEqual;": "⋣",
        "&NotSubset;": "⊂⃒",
        "&NotSubsetEqual;": "⊈",
        "&NotSucceeds;": "⊁",
        "&NotSucceedsEqual;": "⪰̸",
        "&NotSucceedsSlantEqual;": "⋡",
        "&NotSucceedsTilde;": "≿̸",
        "&NotSuperset;": "⊃⃒",
        "&NotSupersetEqual;": "⊉",
        "&NotTilde;": "≁",
        "&NotTildeEqual;": "≄",
        "&NotTildeFullEqual;": "≇",
        "&NotTildeTilde;": "≉",
        "&NotVerticalBar;": "∤",
        "&Nscr;": "𝒩",
        "&Ntilde": "Ñ",
        "&Ntilde;": "Ñ",
        "&Nu;": "Ν",
        "&OElig;": "Œ",
        "&Oacute": "Ó",
        "&Oacute;": "Ó",
        "&Ocirc": "Ô",
        "&Ocirc;": "Ô",
        "&Ocy;": "О",
        "&Odblac;": "Ő",
        "&Ofr;": "𝔒",
        "&Ograve": "Ò",
        "&Ograve;": "Ò",
        "&Omacr;": "Ō",
        "&Omega;": "Ω",
        "&Omicron;": "Ο",
        "&Oopf;": "𝕆",
        "&OpenCurlyDoubleQuote;": "“",
        "&OpenCurlyQuote;": "‘",
        "&Or;": "⩔",
        "&Oscr;": "𝒪",
        "&Oslash": "Ø",
        "&Oslash;": "Ø",
        "&Otilde": "Õ",
        "&Otilde;": "Õ",
        "&Otimes;": "⨷",
        "&Ouml": "Ö",
        "&Ouml;": "Ö",
        "&OverBar;": "‾",
        "&OverBrace;": "⏞",
        "&OverBracket;": "⎴",
        "&OverParenthesis;": "⏜",
        "&PartialD;": "∂",
        "&Pcy;": "П",
        "&Pfr;": "𝔓",
        "&Phi;": "Φ",
        "&Pi;": "Π",
        "&PlusMinus;": "±",
        "&Poincareplane;": "ℌ",
        "&Popf;": "ℙ",
        "&Pr;": "⪻",
        "&Precedes;": "≺",
        "&PrecedesEqual;": "⪯",
        "&PrecedesSlantEqual;": "≼",
        "&PrecedesTilde;": "≾",
        "&Prime;": "″",
        "&Product;": "∏",
        "&Proportion;": "∷",
        "&Proportional;": "∝",
        "&Pscr;": "𝒫",
        "&Psi;": "Ψ",
        "&QUOT": '"',
        "&QUOT;": '"',
        "&Qfr;": "𝔔",
        "&Qopf;": "ℚ",
        "&Qscr;": "𝒬",
        "&RBarr;": "⤐",
        "&REG": "®",
        "&REG;": "®",
        "&Racute;": "Ŕ",
        "&Rang;": "⟫",
        "&Rarr;": "↠",
        "&Rarrtl;": "⤖",
        "&Rcaron;": "Ř",
        "&Rcedil;": "Ŗ",
        "&Rcy;": "Р",
        "&Re;": "ℜ",
        "&ReverseElement;": "∋",
        "&ReverseEquilibrium;": "⇋",
        "&ReverseUpEquilibrium;": "⥯",
        "&Rfr;": "ℜ",
        "&Rho;": "Ρ",
        "&RightAngleBracket;": "⟩",
        "&RightArrow;": "→",
        "&RightArrowBar;": "⇥",
        "&RightArrowLeftArrow;": "⇄",
        "&RightCeiling;": "⌉",
        "&RightDoubleBracket;": "⟧",
        "&RightDownTeeVector;": "⥝",
        "&RightDownVector;": "⇂",
        "&RightDownVectorBar;": "⥕",
        "&RightFloor;": "⌋",
        "&RightTee;": "⊢",
        "&RightTeeArrow;": "↦",
        "&RightTeeVector;": "⥛",
        "&RightTriangle;": "⊳",
        "&RightTriangleBar;": "⧐",
        "&RightTriangleEqual;": "⊵",
        "&RightUpDownVector;": "⥏",
        "&RightUpTeeVector;": "⥜",
        "&RightUpVector;": "↾",
        "&RightUpVectorBar;": "⥔",
        "&RightVector;": "⇀",
        "&RightVectorBar;": "⥓",
        "&Rightarrow;": "⇒",
        "&Ropf;": "ℝ",
        "&RoundImplies;": "⥰",
        "&Rrightarrow;": "⇛",
        "&Rscr;": "ℛ",
        "&Rsh;": "↱",
        "&RuleDelayed;": "⧴",
        "&SHCHcy;": "Щ",
        "&SHcy;": "Ш",
        "&SOFTcy;": "Ь",
        "&Sacute;": "Ś",
        "&Sc;": "⪼",
        "&Scaron;": "Š",
        "&Scedil;": "Ş",
        "&Scirc;": "Ŝ",
        "&Scy;": "С",
        "&Sfr;": "𝔖",
        "&ShortDownArrow;": "↓",
        "&ShortLeftArrow;": "←",
        "&ShortRightArrow;": "→",
        "&ShortUpArrow;": "↑",
        "&Sigma;": "Σ",
        "&SmallCircle;": "∘",
        "&Sopf;": "𝕊",
        "&Sqrt;": "√",
        "&Square;": "□",
        "&SquareIntersection;": "⊓",
        "&SquareSubset;": "⊏",
        "&SquareSubsetEqual;": "⊑",
        "&SquareSuperset;": "⊐",
        "&SquareSupersetEqual;": "⊒",
        "&SquareUnion;": "⊔",
        "&Sscr;": "𝒮",
        "&Star;": "⋆",
        "&Sub;": "⋐",
        "&Subset;": "⋐",
        "&SubsetEqual;": "⊆",
        "&Succeeds;": "≻",
        "&SucceedsEqual;": "⪰",
        "&SucceedsSlantEqual;": "≽",
        "&SucceedsTilde;": "≿",
        "&SuchThat;": "∋",
        "&Sum;": "∑",
        "&Sup;": "⋑",
        "&Superset;": "⊃",
        "&SupersetEqual;": "⊇",
        "&Supset;": "⋑",
        "&THORN": "Þ",
        "&THORN;": "Þ",
        "&TRADE;": "™",
        "&TSHcy;": "Ћ",
        "&TScy;": "Ц",
        "&Tab;": "\t",
        "&Tau;": "Τ",
        "&Tcaron;": "Ť",
        "&Tcedil;": "Ţ",
        "&Tcy;": "Т",
        "&Tfr;": "𝔗",
        "&Therefore;": "∴",
        "&Theta;": "Θ",
        "&ThickSpace;": "  ",
        "&ThinSpace;": " ",
        "&Tilde;": "∼",
        "&TildeEqual;": "≃",
        "&TildeFullEqual;": "≅",
        "&TildeTilde;": "≈",
        "&Topf;": "𝕋",
        "&TripleDot;": "⃛",
        "&Tscr;": "𝒯",
        "&Tstrok;": "Ŧ",
        "&Uacute": "Ú",
        "&Uacute;": "Ú",
        "&Uarr;": "↟",
        "&Uarrocir;": "⥉",
        "&Ubrcy;": "Ў",
        "&Ubreve;": "Ŭ",
        "&Ucirc": "Û",
        "&Ucirc;": "Û",
        "&Ucy;": "У",
        "&Udblac;": "Ű",
        "&Ufr;": "𝔘",
        "&Ugrave": "Ù",
        "&Ugrave;": "Ù",
        "&Umacr;": "Ū",
        "&UnderBar;": "_",
        "&UnderBrace;": "⏟",
        "&UnderBracket;": "⎵",
        "&UnderParenthesis;": "⏝",
        "&Union;": "⋃",
        "&UnionPlus;": "⊎",
        "&Uogon;": "Ų",
        "&Uopf;": "𝕌",
        "&UpArrow;": "↑",
        "&UpArrowBar;": "⤒",
        "&UpArrowDownArrow;": "⇅",
        "&UpDownArrow;": "↕",
        "&UpEquilibrium;": "⥮",
        "&UpTee;": "⊥",
        "&UpTeeArrow;": "↥",
        "&Uparrow;": "⇑",
        "&Updownarrow;": "⇕",
        "&UpperLeftArrow;": "↖",
        "&UpperRightArrow;": "↗",
        "&Upsi;": "ϒ",
        "&Upsilon;": "Υ",
        "&Uring;": "Ů",
        "&Uscr;": "𝒰",
        "&Utilde;": "Ũ",
        "&Uuml": "Ü",
        "&Uuml;": "Ü",
        "&VDash;": "⊫",
        "&Vbar;": "⫫",
        "&Vcy;": "В",
        "&Vdash;": "⊩",
        "&Vdashl;": "⫦",
        "&Vee;": "⋁",
        "&Verbar;": "‖",
        "&Vert;": "‖",
        "&VerticalBar;": "∣",
        "&VerticalLine;": "|",
        "&VerticalSeparator;": "❘",
        "&VerticalTilde;": "≀",
        "&VeryThinSpace;": " ",
        "&Vfr;": "𝔙",
        "&Vopf;": "𝕍",
        "&Vscr;": "𝒱",
        "&Vvdash;": "⊪",
        "&Wcirc;": "Ŵ",
        "&Wedge;": "⋀",
        "&Wfr;": "𝔚",
        "&Wopf;": "𝕎",
        "&Wscr;": "𝒲",
        "&Xfr;": "𝔛",
        "&Xi;": "Ξ",
        "&Xopf;": "𝕏",
        "&Xscr;": "𝒳",
        "&YAcy;": "Я",
        "&YIcy;": "Ї",
        "&YUcy;": "Ю",
        "&Yacute": "Ý",
        "&Yacute;": "Ý",
        "&Ycirc;": "Ŷ",
        "&Ycy;": "Ы",
        "&Yfr;": "𝔜",
        "&Yopf;": "𝕐",
        "&Yscr;": "𝒴",
        "&Yuml;": "Ÿ",
        "&ZHcy;": "Ж",
        "&Zacute;": "Ź",
        "&Zcaron;": "Ž",
        "&Zcy;": "З",
        "&Zdot;": "Ż",
        "&ZeroWidthSpace;": "​",
        "&Zeta;": "Ζ",
        "&Zfr;": "ℨ",
        "&Zopf;": "ℤ",
        "&Zscr;": "𝒵",
        "&aacute": "á",
        "&aacute;": "á",
        "&abreve;": "ă",
        "&ac;": "∾",
        "&acE;": "∾̳",
        "&acd;": "∿",
        "&acirc": "â",
        "&acirc;": "â",
        "&acute": "´",
        "&acute;": "´",
        "&acy;": "а",
        "&aelig": "æ",
        "&aelig;": "æ",
        "&af;": "⁡",
        "&afr;": "𝔞",
        "&agrave": "à",
        "&agrave;": "à",
        "&alefsym;": "ℵ",
        "&aleph;": "ℵ",
        "&alpha;": "α",
        "&amacr;": "ā",
        "&amalg;": "⨿",
        "&amp": "&",
        "&amp;": "&",
        "&and;": "∧",
        "&andand;": "⩕",
        "&andd;": "⩜",
        "&andslope;": "⩘",
        "&andv;": "⩚",
        "&ang;": "∠",
        "&ange;": "⦤",
        "&angle;": "∠",
        "&angmsd;": "∡",
        "&angmsdaa;": "⦨",
        "&angmsdab;": "⦩",
        "&angmsdac;": "⦪",
        "&angmsdad;": "⦫",
        "&angmsdae;": "⦬",
        "&angmsdaf;": "⦭",
        "&angmsdag;": "⦮",
        "&angmsdah;": "⦯",
        "&angrt;": "∟",
        "&angrtvb;": "⊾",
        "&angrtvbd;": "⦝",
        "&angsph;": "∢",
        "&angst;": "Å",
        "&angzarr;": "⍼",
        "&aogon;": "ą",
        "&aopf;": "𝕒",
        "&ap;": "≈",
        "&apE;": "⩰",
        "&apacir;": "⩯",
        "&ape;": "≊",
        "&apid;": "≋",
        "&apos;": "'",
        "&approx;": "≈",
        "&approxeq;": "≊",
        "&aring": "å",
        "&aring;": "å",
        "&ascr;": "𝒶",
        "&ast;": "*",
        "&asymp;": "≈",
        "&asympeq;": "≍",
        "&atilde": "ã",
        "&atilde;": "ã",
        "&auml": "ä",
        "&auml;": "ä",
        "&awconint;": "∳",
        "&awint;": "⨑",
        "&bNot;": "⫭",
        "&backcong;": "≌",
        "&backepsilon;": "϶",
        "&backprime;": "‵",
        "&backsim;": "∽",
        "&backsimeq;": "⋍",
        "&barvee;": "⊽",
        "&barwed;": "⌅",
        "&barwedge;": "⌅",
        "&bbrk;": "⎵",
        "&bbrktbrk;": "⎶",
        "&bcong;": "≌",
        "&bcy;": "б",
        "&bdquo;": "„",
        "&becaus;": "∵",
        "&because;": "∵",
        "&bemptyv;": "⦰",
        "&bepsi;": "϶",
        "&bernou;": "ℬ",
        "&beta;": "β",
        "&beth;": "ℶ",
        "&between;": "≬",
        "&bfr;": "𝔟",
        "&bigcap;": "⋂",
        "&bigcirc;": "◯",
        "&bigcup;": "⋃",
        "&bigodot;": "⨀",
        "&bigoplus;": "⨁",
        "&bigotimes;": "⨂",
        "&bigsqcup;": "⨆",
        "&bigstar;": "★",
        "&bigtriangledown;": "▽",
        "&bigtriangleup;": "△",
        "&biguplus;": "⨄",
        "&bigvee;": "⋁",
        "&bigwedge;": "⋀",
        "&bkarow;": "⤍",
        "&blacklozenge;": "⧫",
        "&blacksquare;": "▪",
        "&blacktriangle;": "▴",
        "&blacktriangledown;": "▾",
        "&blacktriangleleft;": "◂",
        "&blacktriangleright;": "▸",
        "&blank;": "␣",
        "&blk12;": "▒",
        "&blk14;": "░",
        "&blk34;": "▓",
        "&block;": "█",
        "&bne;": "=⃥",
        "&bnequiv;": "≡⃥",
        "&bnot;": "⌐",
        "&bopf;": "𝕓",
        "&bot;": "⊥",
        "&bottom;": "⊥",
        "&bowtie;": "⋈",
        "&boxDL;": "╗",
        "&boxDR;": "╔",
        "&boxDl;": "╖",
        "&boxDr;": "╓",
        "&boxH;": "═",
        "&boxHD;": "╦",
        "&boxHU;": "╩",
        "&boxHd;": "╤",
        "&boxHu;": "╧",
        "&boxUL;": "╝",
        "&boxUR;": "╚",
        "&boxUl;": "╜",
        "&boxUr;": "╙",
        "&boxV;": "║",
        "&boxVH;": "╬",
        "&boxVL;": "╣",
        "&boxVR;": "╠",
        "&boxVh;": "╫",
        "&boxVl;": "╢",
        "&boxVr;": "╟",
        "&boxbox;": "⧉",
        "&boxdL;": "╕",
        "&boxdR;": "╒",
        "&boxdl;": "┐",
        "&boxdr;": "┌",
        "&boxh;": "─",
        "&boxhD;": "╥",
        "&boxhU;": "╨",
        "&boxhd;": "┬",
        "&boxhu;": "┴",
        "&boxminus;": "⊟",
        "&boxplus;": "⊞",
        "&boxtimes;": "⊠",
        "&boxuL;": "╛",
        "&boxuR;": "╘",
        "&boxul;": "┘",
        "&boxur;": "└",
        "&boxv;": "│",
        "&boxvH;": "╪",
        "&boxvL;": "╡",
        "&boxvR;": "╞",
        "&boxvh;": "┼",
        "&boxvl;": "┤",
        "&boxvr;": "├",
        "&bprime;": "‵",
        "&breve;": "˘",
        "&brvbar": "¦",
        "&brvbar;": "¦",
        "&bscr;": "𝒷",
        "&bsemi;": "⁏",
        "&bsim;": "∽",
        "&bsime;": "⋍",
        "&bsol;": "\\",
        "&bsolb;": "⧅",
        "&bsolhsub;": "⟈",
        "&bull;": "•",
        "&bullet;": "•",
        "&bump;": "≎",
        "&bumpE;": "⪮",
        "&bumpe;": "≏",
        "&bumpeq;": "≏",
        "&cacute;": "ć",
        "&cap;": "∩",
        "&capand;": "⩄",
        "&capbrcup;": "⩉",
        "&capcap;": "⩋",
        "&capcup;": "⩇",
        "&capdot;": "⩀",
        "&caps;": "∩︀",
        "&caret;": "⁁",
        "&caron;": "ˇ",
        "&ccaps;": "⩍",
        "&ccaron;": "č",
        "&ccedil": "ç",
        "&ccedil;": "ç",
        "&ccirc;": "ĉ",
        "&ccups;": "⩌",
        "&ccupssm;": "⩐",
        "&cdot;": "ċ",
        "&cedil": "¸",
        "&cedil;": "¸",
        "&cemptyv;": "⦲",
        "&cent": "¢",
        "&cent;": "¢",
        "&centerdot;": "·",
        "&cfr;": "𝔠",
        "&chcy;": "ч",
        "&check;": "✓",
        "&checkmark;": "✓",
        "&chi;": "χ",
        "&cir;": "○",
        "&cirE;": "⧃",
        "&circ;": "ˆ",
        "&circeq;": "≗",
        "&circlearrowleft;": "↺",
        "&circlearrowright;": "↻",
        "&circledR;": "®",
        "&circledS;": "Ⓢ",
        "&circledast;": "⊛",
        "&circledcirc;": "⊚",
        "&circleddash;": "⊝",
        "&cire;": "≗",
        "&cirfnint;": "⨐",
        "&cirmid;": "⫯",
        "&cirscir;": "⧂",
        "&clubs;": "♣",
        "&clubsuit;": "♣",
        "&colon;": ":",
        "&colone;": "≔",
        "&coloneq;": "≔",
        "&comma;": ",",
        "&commat;": "@",
        "&comp;": "∁",
        "&compfn;": "∘",
        "&complement;": "∁",
        "&complexes;": "ℂ",
        "&cong;": "≅",
        "&congdot;": "⩭",
        "&conint;": "∮",
        "&copf;": "𝕔",
        "&coprod;": "∐",
        "&copy": "©",
        "&copy;": "©",
        "&copysr;": "℗",
        "&crarr;": "↵",
        "&cross;": "✗",
        "&cscr;": "𝒸",
        "&csub;": "⫏",
        "&csube;": "⫑",
        "&csup;": "⫐",
        "&csupe;": "⫒",
        "&ctdot;": "⋯",
        "&cudarrl;": "⤸",
        "&cudarrr;": "⤵",
        "&cuepr;": "⋞",
        "&cuesc;": "⋟",
        "&cularr;": "↶",
        "&cularrp;": "⤽",
        "&cup;": "∪",
        "&cupbrcap;": "⩈",
        "&cupcap;": "⩆",
        "&cupcup;": "⩊",
        "&cupdot;": "⊍",
        "&cupor;": "⩅",
        "&cups;": "∪︀",
        "&curarr;": "↷",
        "&curarrm;": "⤼",
        "&curlyeqprec;": "⋞",
        "&curlyeqsucc;": "⋟",
        "&curlyvee;": "⋎",
        "&curlywedge;": "⋏",
        "&curren": "¤",
        "&curren;": "¤",
        "&curvearrowleft;": "↶",
        "&curvearrowright;": "↷",
        "&cuvee;": "⋎",
        "&cuwed;": "⋏",
        "&cwconint;": "∲",
        "&cwint;": "∱",
        "&cylcty;": "⌭",
        "&dArr;": "⇓",
        "&dHar;": "⥥",
        "&dagger;": "†",
        "&daleth;": "ℸ",
        "&darr;": "↓",
        "&dash;": "‐",
        "&dashv;": "⊣",
        "&dbkarow;": "⤏",
        "&dblac;": "˝",
        "&dcaron;": "ď",
        "&dcy;": "д",
        "&dd;": "ⅆ",
        "&ddagger;": "‡",
        "&ddarr;": "⇊",
        "&ddotseq;": "⩷",
        "&deg": "°",
        "&deg;": "°",
        "&delta;": "δ",
        "&demptyv;": "⦱",
        "&dfisht;": "⥿",
        "&dfr;": "𝔡",
        "&dharl;": "⇃",
        "&dharr;": "⇂",
        "&diam;": "⋄",
        "&diamond;": "⋄",
        "&diamondsuit;": "♦",
        "&diams;": "♦",
        "&die;": "¨",
        "&digamma;": "ϝ",
        "&disin;": "⋲",
        "&div;": "÷",
        "&divide": "÷",
        "&divide;": "÷",
        "&divideontimes;": "⋇",
        "&divonx;": "⋇",
        "&djcy;": "ђ",
        "&dlcorn;": "⌞",
        "&dlcrop;": "⌍",
        "&dollar;": "$",
        "&dopf;": "𝕕",
        "&dot;": "˙",
        "&doteq;": "≐",
        "&doteqdot;": "≑",
        "&dotminus;": "∸",
        "&dotplus;": "∔",
        "&dotsquare;": "⊡",
        "&doublebarwedge;": "⌆",
        "&downarrow;": "↓",
        "&downdownarrows;": "⇊",
        "&downharpoonleft;": "⇃",
        "&downharpoonright;": "⇂",
        "&drbkarow;": "⤐",
        "&drcorn;": "⌟",
        "&drcrop;": "⌌",
        "&dscr;": "𝒹",
        "&dscy;": "ѕ",
        "&dsol;": "⧶",
        "&dstrok;": "đ",
        "&dtdot;": "⋱",
        "&dtri;": "▿",
        "&dtrif;": "▾",
        "&duarr;": "⇵",
        "&duhar;": "⥯",
        "&dwangle;": "⦦",
        "&dzcy;": "џ",
        "&dzigrarr;": "⟿",
        "&eDDot;": "⩷",
        "&eDot;": "≑",
        "&eacute": "é",
        "&eacute;": "é",
        "&easter;": "⩮",
        "&ecaron;": "ě",
        "&ecir;": "≖",
        "&ecirc": "ê",
        "&ecirc;": "ê",
        "&ecolon;": "≕",
        "&ecy;": "э",
        "&edot;": "ė",
        "&ee;": "ⅇ",
        "&efDot;": "≒",
        "&efr;": "𝔢",
        "&eg;": "⪚",
        "&egrave": "è",
        "&egrave;": "è",
        "&egs;": "⪖",
        "&egsdot;": "⪘",
        "&el;": "⪙",
        "&elinters;": "⏧",
        "&ell;": "ℓ",
        "&els;": "⪕",
        "&elsdot;": "⪗",
        "&emacr;": "ē",
        "&empty;": "∅",
        "&emptyset;": "∅",
        "&emptyv;": "∅",
        "&emsp13;": " ",
        "&emsp14;": " ",
        "&emsp;": " ",
        "&eng;": "ŋ",
        "&ensp;": " ",
        "&eogon;": "ę",
        "&eopf;": "𝕖",
        "&epar;": "⋕",
        "&eparsl;": "⧣",
        "&eplus;": "⩱",
        "&epsi;": "ε",
        "&epsilon;": "ε",
        "&epsiv;": "ϵ",
        "&eqcirc;": "≖",
        "&eqcolon;": "≕",
        "&eqsim;": "≂",
        "&eqslantgtr;": "⪖",
        "&eqslantless;": "⪕",
        "&equals;": "=",
        "&equest;": "≟",
        "&equiv;": "≡",
        "&equivDD;": "⩸",
        "&eqvparsl;": "⧥",
        "&erDot;": "≓",
        "&erarr;": "⥱",
        "&escr;": "ℯ",
        "&esdot;": "≐",
        "&esim;": "≂",
        "&eta;": "η",
        "&eth": "ð",
        "&eth;": "ð",
        "&euml": "ë",
        "&euml;": "ë",
        "&euro;": "€",
        "&excl;": "!",
        "&exist;": "∃",
        "&expectation;": "ℰ",
        "&exponentiale;": "ⅇ",
        "&fallingdotseq;": "≒",
        "&fcy;": "ф",
        "&female;": "♀",
        "&ffilig;": "ﬃ",
        "&fflig;": "ﬀ",
        "&ffllig;": "ﬄ",
        "&ffr;": "𝔣",
        "&filig;": "ﬁ",
        "&fjlig;": "fj",
        "&flat;": "♭",
        "&fllig;": "ﬂ",
        "&fltns;": "▱",
        "&fnof;": "ƒ",
        "&fopf;": "𝕗",
        "&forall;": "∀",
        "&fork;": "⋔",
        "&forkv;": "⫙",
        "&fpartint;": "⨍",
        "&frac12": "½",
        "&frac12;": "½",
        "&frac13;": "⅓",
        "&frac14": "¼",
        "&frac14;": "¼",
        "&frac15;": "⅕",
        "&frac16;": "⅙",
        "&frac18;": "⅛",
        "&frac23;": "⅔",
        "&frac25;": "⅖",
        "&frac34": "¾",
        "&frac34;": "¾",
        "&frac35;": "⅗",
        "&frac38;": "⅜",
        "&frac45;": "⅘",
        "&frac56;": "⅚",
        "&frac58;": "⅝",
        "&frac78;": "⅞",
        "&frasl;": "⁄",
        "&frown;": "⌢",
        "&fscr;": "𝒻",
        "&gE;": "≧",
        "&gEl;": "⪌",
        "&gacute;": "ǵ",
        "&gamma;": "γ",
        "&gammad;": "ϝ",
        "&gap;": "⪆",
        "&gbreve;": "ğ",
        "&gcirc;": "ĝ",
        "&gcy;": "г",
        "&gdot;": "ġ",
        "&ge;": "≥",
        "&gel;": "⋛",
        "&geq;": "≥",
        "&geqq;": "≧",
        "&geqslant;": "⩾",
        "&ges;": "⩾",
        "&gescc;": "⪩",
        "&gesdot;": "⪀",
        "&gesdoto;": "⪂",
        "&gesdotol;": "⪄",
        "&gesl;": "⋛︀",
        "&gesles;": "⪔",
        "&gfr;": "𝔤",
        "&gg;": "≫",
        "&ggg;": "⋙",
        "&gimel;": "ℷ",
        "&gjcy;": "ѓ",
        "&gl;": "≷",
        "&glE;": "⪒",
        "&gla;": "⪥",
        "&glj;": "⪤",
        "&gnE;": "≩",
        "&gnap;": "⪊",
        "&gnapprox;": "⪊",
        "&gne;": "⪈",
        "&gneq;": "⪈",
        "&gneqq;": "≩",
        "&gnsim;": "⋧",
        "&gopf;": "𝕘",
        "&grave;": "`",
        "&gscr;": "ℊ",
        "&gsim;": "≳",
        "&gsime;": "⪎",
        "&gsiml;": "⪐",
        "&gt": ">",
        "&gt;": ">",
        "&gtcc;": "⪧",
        "&gtcir;": "⩺",
        "&gtdot;": "⋗",
        "&gtlPar;": "⦕",
        "&gtquest;": "⩼",
        "&gtrapprox;": "⪆",
        "&gtrarr;": "⥸",
        "&gtrdot;": "⋗",
        "&gtreqless;": "⋛",
        "&gtreqqless;": "⪌",
        "&gtrless;": "≷",
        "&gtrsim;": "≳",
        "&gvertneqq;": "≩︀",
        "&gvnE;": "≩︀",
        "&hArr;": "⇔",
        "&hairsp;": " ",
        "&half;": "½",
        "&hamilt;": "ℋ",
        "&hardcy;": "ъ",
        "&harr;": "↔",
        "&harrcir;": "⥈",
        "&harrw;": "↭",
        "&hbar;": "ℏ",
        "&hcirc;": "ĥ",
        "&hearts;": "♥",
        "&heartsuit;": "♥",
        "&hellip;": "…",
        "&hercon;": "⊹",
        "&hfr;": "𝔥",
        "&hksearow;": "⤥",
        "&hkswarow;": "⤦",
        "&hoarr;": "⇿",
        "&homtht;": "∻",
        "&hookleftarrow;": "↩",
        "&hookrightarrow;": "↪",
        "&hopf;": "𝕙",
        "&horbar;": "―",
        "&hscr;": "𝒽",
        "&hslash;": "ℏ",
        "&hstrok;": "ħ",
        "&hybull;": "⁃",
        "&hyphen;": "‐",
        "&iacute": "í",
        "&iacute;": "í",
        "&ic;": "⁣",
        "&icirc": "î",
        "&icirc;": "î",
        "&icy;": "и",
        "&iecy;": "е",
        "&iexcl": "¡",
        "&iexcl;": "¡",
        "&iff;": "⇔",
        "&ifr;": "𝔦",
        "&igrave": "ì",
        "&igrave;": "ì",
        "&ii;": "ⅈ",
        "&iiiint;": "⨌",
        "&iiint;": "∭",
        "&iinfin;": "⧜",
        "&iiota;": "℩",
        "&ijlig;": "ĳ",
        "&imacr;": "ī",
        "&image;": "ℑ",
        "&imagline;": "ℐ",
        "&imagpart;": "ℑ",
        "&imath;": "ı",
        "&imof;": "⊷",
        "&imped;": "Ƶ",
        "&in;": "∈",
        "&incare;": "℅",
        "&infin;": "∞",
        "&infintie;": "⧝",
        "&inodot;": "ı",
        "&int;": "∫",
        "&intcal;": "⊺",
        "&integers;": "ℤ",
        "&intercal;": "⊺",
        "&intlarhk;": "⨗",
        "&intprod;": "⨼",
        "&iocy;": "ё",
        "&iogon;": "į",
        "&iopf;": "𝕚",
        "&iota;": "ι",
        "&iprod;": "⨼",
        "&iquest": "¿",
        "&iquest;": "¿",
        "&iscr;": "𝒾",
        "&isin;": "∈",
        "&isinE;": "⋹",
        "&isindot;": "⋵",
        "&isins;": "⋴",
        "&isinsv;": "⋳",
        "&isinv;": "∈",
        "&it;": "⁢",
        "&itilde;": "ĩ",
        "&iukcy;": "і",
        "&iuml": "ï",
        "&iuml;": "ï",
        "&jcirc;": "ĵ",
        "&jcy;": "й",
        "&jfr;": "𝔧",
        "&jmath;": "ȷ",
        "&jopf;": "𝕛",
        "&jscr;": "𝒿",
        "&jsercy;": "ј",
        "&jukcy;": "є",
        "&kappa;": "κ",
        "&kappav;": "ϰ",
        "&kcedil;": "ķ",
        "&kcy;": "к",
        "&kfr;": "𝔨",
        "&kgreen;": "ĸ",
        "&khcy;": "х",
        "&kjcy;": "ќ",
        "&kopf;": "𝕜",
        "&kscr;": "𝓀",
        "&lAarr;": "⇚",
        "&lArr;": "⇐",
        "&lAtail;": "⤛",
        "&lBarr;": "⤎",
        "&lE;": "≦",
        "&lEg;": "⪋",
        "&lHar;": "⥢",
        "&lacute;": "ĺ",
        "&laemptyv;": "⦴",
        "&lagran;": "ℒ",
        "&lambda;": "λ",
        "&lang;": "⟨",
        "&langd;": "⦑",
        "&langle;": "⟨",
        "&lap;": "⪅",
        "&laquo": "«",
        "&laquo;": "«",
        "&larr;": "←",
        "&larrb;": "⇤",
        "&larrbfs;": "⤟",
        "&larrfs;": "⤝",
        "&larrhk;": "↩",
        "&larrlp;": "↫",
        "&larrpl;": "⤹",
        "&larrsim;": "⥳",
        "&larrtl;": "↢",
        "&lat;": "⪫",
        "&latail;": "⤙",
        "&late;": "⪭",
        "&lates;": "⪭︀",
        "&lbarr;": "⤌",
        "&lbbrk;": "❲",
        "&lbrace;": "{",
        "&lbrack;": "[",
        "&lbrke;": "⦋",
        "&lbrksld;": "⦏",
        "&lbrkslu;": "⦍",
        "&lcaron;": "ľ",
        "&lcedil;": "ļ",
        "&lceil;": "⌈",
        "&lcub;": "{",
        "&lcy;": "л",
        "&ldca;": "⤶",
        "&ldquo;": "“",
        "&ldquor;": "„",
        "&ldrdhar;": "⥧",
        "&ldrushar;": "⥋",
        "&ldsh;": "↲",
        "&le;": "≤",
        "&leftarrow;": "←",
        "&leftarrowtail;": "↢",
        "&leftharpoondown;": "↽",
        "&leftharpoonup;": "↼",
        "&leftleftarrows;": "⇇",
        "&leftrightarrow;": "↔",
        "&leftrightarrows;": "⇆",
        "&leftrightharpoons;": "⇋",
        "&leftrightsquigarrow;": "↭",
        "&leftthreetimes;": "⋋",
        "&leg;": "⋚",
        "&leq;": "≤",
        "&leqq;": "≦",
        "&leqslant;": "⩽",
        "&les;": "⩽",
        "&lescc;": "⪨",
        "&lesdot;": "⩿",
        "&lesdoto;": "⪁",
        "&lesdotor;": "⪃",
        "&lesg;": "⋚︀",
        "&lesges;": "⪓",
        "&lessapprox;": "⪅",
        "&lessdot;": "⋖",
        "&lesseqgtr;": "⋚",
        "&lesseqqgtr;": "⪋",
        "&lessgtr;": "≶",
        "&lesssim;": "≲",
        "&lfisht;": "⥼",
        "&lfloor;": "⌊",
        "&lfr;": "𝔩",
        "&lg;": "≶",
        "&lgE;": "⪑",
        "&lhard;": "↽",
        "&lharu;": "↼",
        "&lharul;": "⥪",
        "&lhblk;": "▄",
        "&ljcy;": "љ",
        "&ll;": "≪",
        "&llarr;": "⇇",
        "&llcorner;": "⌞",
        "&llhard;": "⥫",
        "&lltri;": "◺",
        "&lmidot;": "ŀ",
        "&lmoust;": "⎰",
        "&lmoustache;": "⎰",
        "&lnE;": "≨",
        "&lnap;": "⪉",
        "&lnapprox;": "⪉",
        "&lne;": "⪇",
        "&lneq;": "⪇",
        "&lneqq;": "≨",
        "&lnsim;": "⋦",
        "&loang;": "⟬",
        "&loarr;": "⇽",
        "&lobrk;": "⟦",
        "&longleftarrow;": "⟵",
        "&longleftrightarrow;": "⟷",
        "&longmapsto;": "⟼",
        "&longrightarrow;": "⟶",
        "&looparrowleft;": "↫",
        "&looparrowright;": "↬",
        "&lopar;": "⦅",
        "&lopf;": "𝕝",
        "&loplus;": "⨭",
        "&lotimes;": "⨴",
        "&lowast;": "∗",
        "&lowbar;": "_",
        "&loz;": "◊",
        "&lozenge;": "◊",
        "&lozf;": "⧫",
        "&lpar;": "(",
        "&lparlt;": "⦓",
        "&lrarr;": "⇆",
        "&lrcorner;": "⌟",
        "&lrhar;": "⇋",
        "&lrhard;": "⥭",
        "&lrm;": "‎",
        "&lrtri;": "⊿",
        "&lsaquo;": "‹",
        "&lscr;": "𝓁",
        "&lsh;": "↰",
        "&lsim;": "≲",
        "&lsime;": "⪍",
        "&lsimg;": "⪏",
        "&lsqb;": "[",
        "&lsquo;": "‘",
        "&lsquor;": "‚",
        "&lstrok;": "ł",
        "&lt": "<",
        "&lt;": "<",
        "&ltcc;": "⪦",
        "&ltcir;": "⩹",
        "&ltdot;": "⋖",
        "&lthree;": "⋋",
        "&ltimes;": "⋉",
        "&ltlarr;": "⥶",
        "&ltquest;": "⩻",
        "&ltrPar;": "⦖",
        "&ltri;": "◃",
        "&ltrie;": "⊴",
        "&ltrif;": "◂",
        "&lurdshar;": "⥊",
        "&luruhar;": "⥦",
        "&lvertneqq;": "≨︀",
        "&lvnE;": "≨︀",
        "&mDDot;": "∺",
        "&macr": "¯",
        "&macr;": "¯",
        "&male;": "♂",
        "&malt;": "✠",
        "&maltese;": "✠",
        "&map;": "↦",
        "&mapsto;": "↦",
        "&mapstodown;": "↧",
        "&mapstoleft;": "↤",
        "&mapstoup;": "↥",
        "&marker;": "▮",
        "&mcomma;": "⨩",
        "&mcy;": "м",
        "&mdash;": "—",
        "&measuredangle;": "∡",
        "&mfr;": "𝔪",
        "&mho;": "℧",
        "&micro": "µ",
        "&micro;": "µ",
        "&mid;": "∣",
        "&midast;": "*",
        "&midcir;": "⫰",
        "&middot": "·",
        "&middot;": "·",
        "&minus;": "−",
        "&minusb;": "⊟",
        "&minusd;": "∸",
        "&minusdu;": "⨪",
        "&mlcp;": "⫛",
        "&mldr;": "…",
        "&mnplus;": "∓",
        "&models;": "⊧",
        "&mopf;": "𝕞",
        "&mp;": "∓",
        "&mscr;": "𝓂",
        "&mstpos;": "∾",
        "&mu;": "μ",
        "&multimap;": "⊸",
        "&mumap;": "⊸",
        "&nGg;": "⋙̸",
        "&nGt;": "≫⃒",
        "&nGtv;": "≫̸",
        "&nLeftarrow;": "⇍",
        "&nLeftrightarrow;": "⇎",
        "&nLl;": "⋘̸",
        "&nLt;": "≪⃒",
        "&nLtv;": "≪̸",
        "&nRightarrow;": "⇏",
        "&nVDash;": "⊯",
        "&nVdash;": "⊮",
        "&nabla;": "∇",
        "&nacute;": "ń",
        "&nang;": "∠⃒",
        "&nap;": "≉",
        "&napE;": "⩰̸",
        "&napid;": "≋̸",
        "&napos;": "ŉ",
        "&napprox;": "≉",
        "&natur;": "♮",
        "&natural;": "♮",
        "&naturals;": "ℕ",
        "&nbsp": " ",
        "&nbsp;": " ",
        "&nbump;": "≎̸",
        "&nbumpe;": "≏̸",
        "&ncap;": "⩃",
        "&ncaron;": "ň",
        "&ncedil;": "ņ",
        "&ncong;": "≇",
        "&ncongdot;": "⩭̸",
        "&ncup;": "⩂",
        "&ncy;": "н",
        "&ndash;": "–",
        "&ne;": "≠",
        "&neArr;": "⇗",
        "&nearhk;": "⤤",
        "&nearr;": "↗",
        "&nearrow;": "↗",
        "&nedot;": "≐̸",
        "&nequiv;": "≢",
        "&nesear;": "⤨",
        "&nesim;": "≂̸",
        "&nexist;": "∄",
        "&nexists;": "∄",
        "&nfr;": "𝔫",
        "&ngE;": "≧̸",
        "&nge;": "≱",
        "&ngeq;": "≱",
        "&ngeqq;": "≧̸",
        "&ngeqslant;": "⩾̸",
        "&nges;": "⩾̸",
        "&ngsim;": "≵",
        "&ngt;": "≯",
        "&ngtr;": "≯",
        "&nhArr;": "⇎",
        "&nharr;": "↮",
        "&nhpar;": "⫲",
        "&ni;": "∋",
        "&nis;": "⋼",
        "&nisd;": "⋺",
        "&niv;": "∋",
        "&njcy;": "њ",
        "&nlArr;": "⇍",
        "&nlE;": "≦̸",
        "&nlarr;": "↚",
        "&nldr;": "‥",
        "&nle;": "≰",
        "&nleftarrow;": "↚",
        "&nleftrightarrow;": "↮",
        "&nleq;": "≰",
        "&nleqq;": "≦̸",
        "&nleqslant;": "⩽̸",
        "&nles;": "⩽̸",
        "&nless;": "≮",
        "&nlsim;": "≴",
        "&nlt;": "≮",
        "&nltri;": "⋪",
        "&nltrie;": "⋬",
        "&nmid;": "∤",
        "&nopf;": "𝕟",
        "&not": "¬",
        "&not;": "¬",
        "&notin;": "∉",
        "&notinE;": "⋹̸",
        "&notindot;": "⋵̸",
        "&notinva;": "∉",
        "&notinvb;": "⋷",
        "&notinvc;": "⋶",
        "&notni;": "∌",
        "&notniva;": "∌",
        "&notnivb;": "⋾",
        "&notnivc;": "⋽",
        "&npar;": "∦",
        "&nparallel;": "∦",
        "&nparsl;": "⫽⃥",
        "&npart;": "∂̸",
        "&npolint;": "⨔",
        "&npr;": "⊀",
        "&nprcue;": "⋠",
        "&npre;": "⪯̸",
        "&nprec;": "⊀",
        "&npreceq;": "⪯̸",
        "&nrArr;": "⇏",
        "&nrarr;": "↛",
        "&nrarrc;": "⤳̸",
        "&nrarrw;": "↝̸",
        "&nrightarrow;": "↛",
        "&nrtri;": "⋫",
        "&nrtrie;": "⋭",
        "&nsc;": "⊁",
        "&nsccue;": "⋡",
        "&nsce;": "⪰̸",
        "&nscr;": "𝓃",
        "&nshortmid;": "∤",
        "&nshortparallel;": "∦",
        "&nsim;": "≁",
        "&nsime;": "≄",
        "&nsimeq;": "≄",
        "&nsmid;": "∤",
        "&nspar;": "∦",
        "&nsqsube;": "⋢",
        "&nsqsupe;": "⋣",
        "&nsub;": "⊄",
        "&nsubE;": "⫅̸",
        "&nsube;": "⊈",
        "&nsubset;": "⊂⃒",
        "&nsubseteq;": "⊈",
        "&nsubseteqq;": "⫅̸",
        "&nsucc;": "⊁",
        "&nsucceq;": "⪰̸",
        "&nsup;": "⊅",
        "&nsupE;": "⫆̸",
        "&nsupe;": "⊉",
        "&nsupset;": "⊃⃒",
        "&nsupseteq;": "⊉",
        "&nsupseteqq;": "⫆̸",
        "&ntgl;": "≹",
        "&ntilde": "ñ",
        "&ntilde;": "ñ",
        "&ntlg;": "≸",
        "&ntriangleleft;": "⋪",
        "&ntrianglelefteq;": "⋬",
        "&ntriangleright;": "⋫",
        "&ntrianglerighteq;": "⋭",
        "&nu;": "ν",
        "&num;": "#",
        "&numero;": "№",
        "&numsp;": " ",
        "&nvDash;": "⊭",
        "&nvHarr;": "⤄",
        "&nvap;": "≍⃒",
        "&nvdash;": "⊬",
        "&nvge;": "≥⃒",
        "&nvgt;": ">⃒",
        "&nvinfin;": "⧞",
        "&nvlArr;": "⤂",
        "&nvle;": "≤⃒",
        "&nvlt;": "<⃒",
        "&nvltrie;": "⊴⃒",
        "&nvrArr;": "⤃",
        "&nvrtrie;": "⊵⃒",
        "&nvsim;": "∼⃒",
        "&nwArr;": "⇖",
        "&nwarhk;": "⤣",
        "&nwarr;": "↖",
        "&nwarrow;": "↖",
        "&nwnear;": "⤧",
        "&oS;": "Ⓢ",
        "&oacute": "ó",
        "&oacute;": "ó",
        "&oast;": "⊛",
        "&ocir;": "⊚",
        "&ocirc": "ô",
        "&ocirc;": "ô",
        "&ocy;": "о",
        "&odash;": "⊝",
        "&odblac;": "ő",
        "&odiv;": "⨸",
        "&odot;": "⊙",
        "&odsold;": "⦼",
        "&oelig;": "œ",
        "&ofcir;": "⦿",
        "&ofr;": "𝔬",
        "&ogon;": "˛",
        "&ograve": "ò",
        "&ograve;": "ò",
        "&ogt;": "⧁",
        "&ohbar;": "⦵",
        "&ohm;": "Ω",
        "&oint;": "∮",
        "&olarr;": "↺",
        "&olcir;": "⦾",
        "&olcross;": "⦻",
        "&oline;": "‾",
        "&olt;": "⧀",
        "&omacr;": "ō",
        "&omega;": "ω",
        "&omicron;": "ο",
        "&omid;": "⦶",
        "&ominus;": "⊖",
        "&oopf;": "𝕠",
        "&opar;": "⦷",
        "&operp;": "⦹",
        "&oplus;": "⊕",
        "&or;": "∨",
        "&orarr;": "↻",
        "&ord;": "⩝",
        "&order;": "ℴ",
        "&orderof;": "ℴ",
        "&ordf": "ª",
        "&ordf;": "ª",
        "&ordm": "º",
        "&ordm;": "º",
        "&origof;": "⊶",
        "&oror;": "⩖",
        "&orslope;": "⩗",
        "&orv;": "⩛",
        "&oscr;": "ℴ",
        "&oslash": "ø",
        "&oslash;": "ø",
        "&osol;": "⊘",
        "&otilde": "õ",
        "&otilde;": "õ",
        "&otimes;": "⊗",
        "&otimesas;": "⨶",
        "&ouml": "ö",
        "&ouml;": "ö",
        "&ovbar;": "⌽",
        "&par;": "∥",
        "&para": "¶",
        "&para;": "¶",
        "&parallel;": "∥",
        "&parsim;": "⫳",
        "&parsl;": "⫽",
        "&part;": "∂",
        "&pcy;": "п",
        "&percnt;": "%",
        "&period;": ".",
        "&permil;": "‰",
        "&perp;": "⊥",
        "&pertenk;": "‱",
        "&pfr;": "𝔭",
        "&phi;": "φ",
        "&phiv;": "ϕ",
        "&phmmat;": "ℳ",
        "&phone;": "☎",
        "&pi;": "π",
        "&pitchfork;": "⋔",
        "&piv;": "ϖ",
        "&planck;": "ℏ",
        "&planckh;": "ℎ",
        "&plankv;": "ℏ",
        "&plus;": "+",
        "&plusacir;": "⨣",
        "&plusb;": "⊞",
        "&pluscir;": "⨢",
        "&plusdo;": "∔",
        "&plusdu;": "⨥",
        "&pluse;": "⩲",
        "&plusmn": "±",
        "&plusmn;": "±",
        "&plussim;": "⨦",
        "&plustwo;": "⨧",
        "&pm;": "±",
        "&pointint;": "⨕",
        "&popf;": "𝕡",
        "&pound": "£",
        "&pound;": "£",
        "&pr;": "≺",
        "&prE;": "⪳",
        "&prap;": "⪷",
        "&prcue;": "≼",
        "&pre;": "⪯",
        "&prec;": "≺",
        "&precapprox;": "⪷",
        "&preccurlyeq;": "≼",
        "&preceq;": "⪯",
        "&precnapprox;": "⪹",
        "&precneqq;": "⪵",
        "&precnsim;": "⋨",
        "&precsim;": "≾",
        "&prime;": "′",
        "&primes;": "ℙ",
        "&prnE;": "⪵",
        "&prnap;": "⪹",
        "&prnsim;": "⋨",
        "&prod;": "∏",
        "&profalar;": "⌮",
        "&profline;": "⌒",
        "&profsurf;": "⌓",
        "&prop;": "∝",
        "&propto;": "∝",
        "&prsim;": "≾",
        "&prurel;": "⊰",
        "&pscr;": "𝓅",
        "&psi;": "ψ",
        "&puncsp;": " ",
        "&qfr;": "𝔮",
        "&qint;": "⨌",
        "&qopf;": "𝕢",
        "&qprime;": "⁗",
        "&qscr;": "𝓆",
        "&quaternions;": "ℍ",
        "&quatint;": "⨖",
        "&quest;": "?",
        "&questeq;": "≟",
        "&quot": '"',
        "&quot;": '"',
        "&rAarr;": "⇛",
        "&rArr;": "⇒",
        "&rAtail;": "⤜",
        "&rBarr;": "⤏",
        "&rHar;": "⥤",
        "&race;": "∽̱",
        "&racute;": "ŕ",
        "&radic;": "√",
        "&raemptyv;": "⦳",
        "&rang;": "⟩",
        "&rangd;": "⦒",
        "&range;": "⦥",
        "&rangle;": "⟩",
        "&raquo": "»",
        "&raquo;": "»",
        "&rarr;": "→",
        "&rarrap;": "⥵",
        "&rarrb;": "⇥",
        "&rarrbfs;": "⤠",
        "&rarrc;": "⤳",
        "&rarrfs;": "⤞",
        "&rarrhk;": "↪",
        "&rarrlp;": "↬",
        "&rarrpl;": "⥅",
        "&rarrsim;": "⥴",
        "&rarrtl;": "↣",
        "&rarrw;": "↝",
        "&ratail;": "⤚",
        "&ratio;": "∶",
        "&rationals;": "ℚ",
        "&rbarr;": "⤍",
        "&rbbrk;": "❳",
        "&rbrace;": "}",
        "&rbrack;": "]",
        "&rbrke;": "⦌",
        "&rbrksld;": "⦎",
        "&rbrkslu;": "⦐",
        "&rcaron;": "ř",
        "&rcedil;": "ŗ",
        "&rceil;": "⌉",
        "&rcub;": "}",
        "&rcy;": "р",
        "&rdca;": "⤷",
        "&rdldhar;": "⥩",
        "&rdquo;": "”",
        "&rdquor;": "”",
        "&rdsh;": "↳",
        "&real;": "ℜ",
        "&realine;": "ℛ",
        "&realpart;": "ℜ",
        "&reals;": "ℝ",
        "&rect;": "▭",
        "&reg": "®",
        "&reg;": "®",
        "&rfisht;": "⥽",
        "&rfloor;": "⌋",
        "&rfr;": "𝔯",
        "&rhard;": "⇁",
        "&rharu;": "⇀",
        "&rharul;": "⥬",
        "&rho;": "ρ",
        "&rhov;": "ϱ",
        "&rightarrow;": "→",
        "&rightarrowtail;": "↣",
        "&rightharpoondown;": "⇁",
        "&rightharpoonup;": "⇀",
        "&rightleftarrows;": "⇄",
        "&rightleftharpoons;": "⇌",
        "&rightrightarrows;": "⇉",
        "&rightsquigarrow;": "↝",
        "&rightthreetimes;": "⋌",
        "&ring;": "˚",
        "&risingdotseq;": "≓",
        "&rlarr;": "⇄",
        "&rlhar;": "⇌",
        "&rlm;": "‏",
        "&rmoust;": "⎱",
        "&rmoustache;": "⎱",
        "&rnmid;": "⫮",
        "&roang;": "⟭",
        "&roarr;": "⇾",
        "&robrk;": "⟧",
        "&ropar;": "⦆",
        "&ropf;": "𝕣",
        "&roplus;": "⨮",
        "&rotimes;": "⨵",
        "&rpar;": ")",
        "&rpargt;": "⦔",
        "&rppolint;": "⨒",
        "&rrarr;": "⇉",
        "&rsaquo;": "›",
        "&rscr;": "𝓇",
        "&rsh;": "↱",
        "&rsqb;": "]",
        "&rsquo;": "’",
        "&rsquor;": "’",
        "&rthree;": "⋌",
        "&rtimes;": "⋊",
        "&rtri;": "▹",
        "&rtrie;": "⊵",
        "&rtrif;": "▸",
        "&rtriltri;": "⧎",
        "&ruluhar;": "⥨",
        "&rx;": "℞",
        "&sacute;": "ś",
        "&sbquo;": "‚",
        "&sc;": "≻",
        "&scE;": "⪴",
        "&scap;": "⪸",
        "&scaron;": "š",
        "&sccue;": "≽",
        "&sce;": "⪰",
        "&scedil;": "ş",
        "&scirc;": "ŝ",
        "&scnE;": "⪶",
        "&scnap;": "⪺",
        "&scnsim;": "⋩",
        "&scpolint;": "⨓",
        "&scsim;": "≿",
        "&scy;": "с",
        "&sdot;": "⋅",
        "&sdotb;": "⊡",
        "&sdote;": "⩦",
        "&seArr;": "⇘",
        "&searhk;": "⤥",
        "&searr;": "↘",
        "&searrow;": "↘",
        "&sect": "§",
        "&sect;": "§",
        "&semi;": ";",
        "&seswar;": "⤩",
        "&setminus;": "∖",
        "&setmn;": "∖",
        "&sext;": "✶",
        "&sfr;": "𝔰",
        "&sfrown;": "⌢",
        "&sharp;": "♯",
        "&shchcy;": "щ",
        "&shcy;": "ш",
        "&shortmid;": "∣",
        "&shortparallel;": "∥",
        "&shy": "­",
        "&shy;": "­",
        "&sigma;": "σ",
        "&sigmaf;": "ς",
        "&sigmav;": "ς",
        "&sim;": "∼",
        "&simdot;": "⩪",
        "&sime;": "≃",
        "&simeq;": "≃",
        "&simg;": "⪞",
        "&simgE;": "⪠",
        "&siml;": "⪝",
        "&simlE;": "⪟",
        "&simne;": "≆",
        "&simplus;": "⨤",
        "&simrarr;": "⥲",
        "&slarr;": "←",
        "&smallsetminus;": "∖",
        "&smashp;": "⨳",
        "&smeparsl;": "⧤",
        "&smid;": "∣",
        "&smile;": "⌣",
        "&smt;": "⪪",
        "&smte;": "⪬",
        "&smtes;": "⪬︀",
        "&softcy;": "ь",
        "&sol;": "/",
        "&solb;": "⧄",
        "&solbar;": "⌿",
        "&sopf;": "𝕤",
        "&spades;": "♠",
        "&spadesuit;": "♠",
        "&spar;": "∥",
        "&sqcap;": "⊓",
        "&sqcaps;": "⊓︀",
        "&sqcup;": "⊔",
        "&sqcups;": "⊔︀",
        "&sqsub;": "⊏",
        "&sqsube;": "⊑",
        "&sqsubset;": "⊏",
        "&sqsubseteq;": "⊑",
        "&sqsup;": "⊐",
        "&sqsupe;": "⊒",
        "&sqsupset;": "⊐",
        "&sqsupseteq;": "⊒",
        "&squ;": "□",
        "&square;": "□",
        "&squarf;": "▪",
        "&squf;": "▪",
        "&srarr;": "→",
        "&sscr;": "𝓈",
        "&ssetmn;": "∖",
        "&ssmile;": "⌣",
        "&sstarf;": "⋆",
        "&star;": "☆",
        "&starf;": "★",
        "&straightepsilon;": "ϵ",
        "&straightphi;": "ϕ",
        "&strns;": "¯",
        "&sub;": "⊂",
        "&subE;": "⫅",
        "&subdot;": "⪽",
        "&sube;": "⊆",
        "&subedot;": "⫃",
        "&submult;": "⫁",
        "&subnE;": "⫋",
        "&subne;": "⊊",
        "&subplus;": "⪿",
        "&subrarr;": "⥹",
        "&subset;": "⊂",
        "&subseteq;": "⊆",
        "&subseteqq;": "⫅",
        "&subsetneq;": "⊊",
        "&subsetneqq;": "⫋",
        "&subsim;": "⫇",
        "&subsub;": "⫕",
        "&subsup;": "⫓",
        "&succ;": "≻",
        "&succapprox;": "⪸",
        "&succcurlyeq;": "≽",
        "&succeq;": "⪰",
        "&succnapprox;": "⪺",
        "&succneqq;": "⪶",
        "&succnsim;": "⋩",
        "&succsim;": "≿",
        "&sum;": "∑",
        "&sung;": "♪",
        "&sup1": "¹",
        "&sup1;": "¹",
        "&sup2": "²",
        "&sup2;": "²",
        "&sup3": "³",
        "&sup3;": "³",
        "&sup;": "⊃",
        "&supE;": "⫆",
        "&supdot;": "⪾",
        "&supdsub;": "⫘",
        "&supe;": "⊇",
        "&supedot;": "⫄",
        "&suphsol;": "⟉",
        "&suphsub;": "⫗",
        "&suplarr;": "⥻",
        "&supmult;": "⫂",
        "&supnE;": "⫌",
        "&supne;": "⊋",
        "&supplus;": "⫀",
        "&supset;": "⊃",
        "&supseteq;": "⊇",
        "&supseteqq;": "⫆",
        "&supsetneq;": "⊋",
        "&supsetneqq;": "⫌",
        "&supsim;": "⫈",
        "&supsub;": "⫔",
        "&supsup;": "⫖",
        "&swArr;": "⇙",
        "&swarhk;": "⤦",
        "&swarr;": "↙",
        "&swarrow;": "↙",
        "&swnwar;": "⤪",
        "&szlig": "ß",
        "&szlig;": "ß",
        "&target;": "⌖",
        "&tau;": "τ",
        "&tbrk;": "⎴",
        "&tcaron;": "ť",
        "&tcedil;": "ţ",
        "&tcy;": "т",
        "&tdot;": "⃛",
        "&telrec;": "⌕",
        "&tfr;": "𝔱",
        "&there4;": "∴",
        "&therefore;": "∴",
        "&theta;": "θ",
        "&thetasym;": "ϑ",
        "&thetav;": "ϑ",
        "&thickapprox;": "≈",
        "&thicksim;": "∼",
        "&thinsp;": " ",
        "&thkap;": "≈",
        "&thksim;": "∼",
        "&thorn": "þ",
        "&thorn;": "þ",
        "&tilde;": "˜",
        "&times": "×",
        "&times;": "×",
        "&timesb;": "⊠",
        "&timesbar;": "⨱",
        "&timesd;": "⨰",
        "&tint;": "∭",
        "&toea;": "⤨",
        "&top;": "⊤",
        "&topbot;": "⌶",
        "&topcir;": "⫱",
        "&topf;": "𝕥",
        "&topfork;": "⫚",
        "&tosa;": "⤩",
        "&tprime;": "‴",
        "&trade;": "™",
        "&triangle;": "▵",
        "&triangledown;": "▿",
        "&triangleleft;": "◃",
        "&trianglelefteq;": "⊴",
        "&triangleq;": "≜",
        "&triangleright;": "▹",
        "&trianglerighteq;": "⊵",
        "&tridot;": "◬",
        "&trie;": "≜",
        "&triminus;": "⨺",
        "&triplus;": "⨹",
        "&trisb;": "⧍",
        "&tritime;": "⨻",
        "&trpezium;": "⏢",
        "&tscr;": "𝓉",
        "&tscy;": "ц",
        "&tshcy;": "ћ",
        "&tstrok;": "ŧ",
        "&twixt;": "≬",
        "&twoheadleftarrow;": "↞",
        "&twoheadrightarrow;": "↠",
        "&uArr;": "⇑",
        "&uHar;": "⥣",
        "&uacute": "ú",
        "&uacute;": "ú",
        "&uarr;": "↑",
        "&ubrcy;": "ў",
        "&ubreve;": "ŭ",
        "&ucirc": "û",
        "&ucirc;": "û",
        "&ucy;": "у",
        "&udarr;": "⇅",
        "&udblac;": "ű",
        "&udhar;": "⥮",
        "&ufisht;": "⥾",
        "&ufr;": "𝔲",
        "&ugrave": "ù",
        "&ugrave;": "ù",
        "&uharl;": "↿",
        "&uharr;": "↾",
        "&uhblk;": "▀",
        "&ulcorn;": "⌜",
        "&ulcorner;": "⌜",
        "&ulcrop;": "⌏",
        "&ultri;": "◸",
        "&umacr;": "ū",
        "&uml": "¨",
        "&uml;": "¨",
        "&uogon;": "ų",
        "&uopf;": "𝕦",
        "&uparrow;": "↑",
        "&updownarrow;": "↕",
        "&upharpoonleft;": "↿",
        "&upharpoonright;": "↾",
        "&uplus;": "⊎",
        "&upsi;": "υ",
        "&upsih;": "ϒ",
        "&upsilon;": "υ",
        "&upuparrows;": "⇈",
        "&urcorn;": "⌝",
        "&urcorner;": "⌝",
        "&urcrop;": "⌎",
        "&uring;": "ů",
        "&urtri;": "◹",
        "&uscr;": "𝓊",
        "&utdot;": "⋰",
        "&utilde;": "ũ",
        "&utri;": "▵",
        "&utrif;": "▴",
        "&uuarr;": "⇈",
        "&uuml": "ü",
        "&uuml;": "ü",
        "&uwangle;": "⦧",
        "&vArr;": "⇕",
        "&vBar;": "⫨",
        "&vBarv;": "⫩",
        "&vDash;": "⊨",
        "&vangrt;": "⦜",
        "&varepsilon;": "ϵ",
        "&varkappa;": "ϰ",
        "&varnothing;": "∅",
        "&varphi;": "ϕ",
        "&varpi;": "ϖ",
        "&varpropto;": "∝",
        "&varr;": "↕",
        "&varrho;": "ϱ",
        "&varsigma;": "ς",
        "&varsubsetneq;": "⊊︀",
        "&varsubsetneqq;": "⫋︀",
        "&varsupsetneq;": "⊋︀",
        "&varsupsetneqq;": "⫌︀",
        "&vartheta;": "ϑ",
        "&vartriangleleft;": "⊲",
        "&vartriangleright;": "⊳",
        "&vcy;": "в",
        "&vdash;": "⊢",
        "&vee;": "∨",
        "&veebar;": "⊻",
        "&veeeq;": "≚",
        "&vellip;": "⋮",
        "&verbar;": "|",
        "&vert;": "|",
        "&vfr;": "𝔳",
        "&vltri;": "⊲",
        "&vnsub;": "⊂⃒",
        "&vnsup;": "⊃⃒",
        "&vopf;": "𝕧",
        "&vprop;": "∝",
        "&vrtri;": "⊳",
        "&vscr;": "𝓋",
        "&vsubnE;": "⫋︀",
        "&vsubne;": "⊊︀",
        "&vsupnE;": "⫌︀",
        "&vsupne;": "⊋︀",
        "&vzigzag;": "⦚",
        "&wcirc;": "ŵ",
        "&wedbar;": "⩟",
        "&wedge;": "∧",
        "&wedgeq;": "≙",
        "&weierp;": "℘",
        "&wfr;": "𝔴",
        "&wopf;": "𝕨",
        "&wp;": "℘",
        "&wr;": "≀",
        "&wreath;": "≀",
        "&wscr;": "𝓌",
        "&xcap;": "⋂",
        "&xcirc;": "◯",
        "&xcup;": "⋃",
        "&xdtri;": "▽",
        "&xfr;": "𝔵",
        "&xhArr;": "⟺",
        "&xharr;": "⟷",
        "&xi;": "ξ",
        "&xlArr;": "⟸",
        "&xlarr;": "⟵",
        "&xmap;": "⟼",
        "&xnis;": "⋻",
        "&xodot;": "⨀",
        "&xopf;": "𝕩",
        "&xoplus;": "⨁",
        "&xotime;": "⨂",
        "&xrArr;": "⟹",
        "&xrarr;": "⟶",
        "&xscr;": "𝓍",
        "&xsqcup;": "⨆",
        "&xuplus;": "⨄",
        "&xutri;": "△",
        "&xvee;": "⋁",
        "&xwedge;": "⋀",
        "&yacute": "ý",
        "&yacute;": "ý",
        "&yacy;": "я",
        "&ycirc;": "ŷ",
        "&ycy;": "ы",
        "&yen": "¥",
        "&yen;": "¥",
        "&yfr;": "𝔶",
        "&yicy;": "ї",
        "&yopf;": "𝕪",
        "&yscr;": "𝓎",
        "&yucy;": "ю",
        "&yuml": "ÿ",
        "&yuml;": "ÿ",
        "&zacute;": "ź",
        "&zcaron;": "ž",
        "&zcy;": "з",
        "&zdot;": "ż",
        "&zeetrf;": "ℨ",
        "&zeta;": "ζ",
        "&zfr;": "𝔷",
        "&zhcy;": "ж",
        "&zigrarr;": "⇝",
        "&zopf;": "𝕫",
        "&zscr;": "𝓏",
        "&zwj;": "‍",
        "&zwnj;": "‌"
      },
      characters: {
        "Æ": "&AElig;",
        "&": "&amp;",
        "Á": "&Aacute;",
        "Ă": "&Abreve;",
        "Â": "&Acirc;",
        "А": "&Acy;",
        "𝔄": "&Afr;",
        "À": "&Agrave;",
        "Α": "&Alpha;",
        "Ā": "&Amacr;",
        "⩓": "&And;",
        "Ą": "&Aogon;",
        "𝔸": "&Aopf;",
        "⁡": "&af;",
        "Å": "&angst;",
        "𝒜": "&Ascr;",
        "≔": "&coloneq;",
        "Ã": "&Atilde;",
        "Ä": "&Auml;",
        "∖": "&ssetmn;",
        "⫧": "&Barv;",
        "⌆": "&doublebarwedge;",
        "Б": "&Bcy;",
        "∵": "&because;",
        "ℬ": "&bernou;",
        "Β": "&Beta;",
        "𝔅": "&Bfr;",
        "𝔹": "&Bopf;",
        "˘": "&breve;",
        "≎": "&bump;",
        "Ч": "&CHcy;",
        "©": "&copy;",
        "Ć": "&Cacute;",
        "⋒": "&Cap;",
        "ⅅ": "&DD;",
        "ℭ": "&Cfr;",
        "Č": "&Ccaron;",
        "Ç": "&Ccedil;",
        "Ĉ": "&Ccirc;",
        "∰": "&Cconint;",
        "Ċ": "&Cdot;",
        "¸": "&cedil;",
        "·": "&middot;",
        "Χ": "&Chi;",
        "⊙": "&odot;",
        "⊖": "&ominus;",
        "⊕": "&oplus;",
        "⊗": "&otimes;",
        "∲": "&cwconint;",
        "”": "&rdquor;",
        "’": "&rsquor;",
        "∷": "&Proportion;",
        "⩴": "&Colone;",
        "≡": "&equiv;",
        "∯": "&DoubleContourIntegral;",
        "∮": "&oint;",
        "ℂ": "&complexes;",
        "∐": "&coprod;",
        "∳": "&awconint;",
        "⨯": "&Cross;",
        "𝒞": "&Cscr;",
        "⋓": "&Cup;",
        "≍": "&asympeq;",
        "⤑": "&DDotrahd;",
        "Ђ": "&DJcy;",
        "Ѕ": "&DScy;",
        "Џ": "&DZcy;",
        "‡": "&ddagger;",
        "↡": "&Darr;",
        "⫤": "&DoubleLeftTee;",
        "Ď": "&Dcaron;",
        "Д": "&Dcy;",
        "∇": "&nabla;",
        "Δ": "&Delta;",
        "𝔇": "&Dfr;",
        "´": "&acute;",
        "˙": "&dot;",
        "˝": "&dblac;",
        "`": "&grave;",
        "˜": "&tilde;",
        "⋄": "&diamond;",
        "ⅆ": "&dd;",
        "𝔻": "&Dopf;",
        "¨": "&uml;",
        "⃜": "&DotDot;",
        "≐": "&esdot;",
        "⇓": "&dArr;",
        "⇐": "&lArr;",
        "⇔": "&iff;",
        "⟸": "&xlArr;",
        "⟺": "&xhArr;",
        "⟹": "&xrArr;",
        "⇒": "&rArr;",
        "⊨": "&vDash;",
        "⇑": "&uArr;",
        "⇕": "&vArr;",
        "∥": "&spar;",
        "↓": "&downarrow;",
        "⤓": "&DownArrowBar;",
        "⇵": "&duarr;",
        "̑": "&DownBreve;",
        "⥐": "&DownLeftRightVector;",
        "⥞": "&DownLeftTeeVector;",
        "↽": "&lhard;",
        "⥖": "&DownLeftVectorBar;",
        "⥟": "&DownRightTeeVector;",
        "⇁": "&rightharpoondown;",
        "⥗": "&DownRightVectorBar;",
        "⊤": "&top;",
        "↧": "&mapstodown;",
        "𝒟": "&Dscr;",
        "Đ": "&Dstrok;",
        "Ŋ": "&ENG;",
        "Ð": "&ETH;",
        "É": "&Eacute;",
        "Ě": "&Ecaron;",
        "Ê": "&Ecirc;",
        "Э": "&Ecy;",
        "Ė": "&Edot;",
        "𝔈": "&Efr;",
        "È": "&Egrave;",
        "∈": "&isinv;",
        "Ē": "&Emacr;",
        "◻": "&EmptySmallSquare;",
        "▫": "&EmptyVerySmallSquare;",
        "Ę": "&Eogon;",
        "𝔼": "&Eopf;",
        "Ε": "&Epsilon;",
        "⩵": "&Equal;",
        "≂": "&esim;",
        "⇌": "&rlhar;",
        "ℰ": "&expectation;",
        "⩳": "&Esim;",
        "Η": "&Eta;",
        "Ë": "&Euml;",
        "∃": "&exist;",
        "ⅇ": "&exponentiale;",
        "Ф": "&Fcy;",
        "𝔉": "&Ffr;",
        "◼": "&FilledSmallSquare;",
        "▪": "&squf;",
        "𝔽": "&Fopf;",
        "∀": "&forall;",
        "ℱ": "&Fscr;",
        "Ѓ": "&GJcy;",
        ">": "&gt;",
        "Γ": "&Gamma;",
        "Ϝ": "&Gammad;",
        "Ğ": "&Gbreve;",
        "Ģ": "&Gcedil;",
        "Ĝ": "&Gcirc;",
        "Г": "&Gcy;",
        "Ġ": "&Gdot;",
        "𝔊": "&Gfr;",
        "⋙": "&ggg;",
        "𝔾": "&Gopf;",
        "≥": "&geq;",
        "⋛": "&gtreqless;",
        "≧": "&geqq;",
        "⪢": "&GreaterGreater;",
        "≷": "&gtrless;",
        "⩾": "&ges;",
        "≳": "&gtrsim;",
        "𝒢": "&Gscr;",
        "≫": "&gg;",
        "Ъ": "&HARDcy;",
        "ˇ": "&caron;",
        "^": "&Hat;",
        "Ĥ": "&Hcirc;",
        "ℌ": "&Poincareplane;",
        "ℋ": "&hamilt;",
        "ℍ": "&quaternions;",
        "─": "&boxh;",
        "Ħ": "&Hstrok;",
        "≏": "&bumpeq;",
        "Е": "&IEcy;",
        "Ĳ": "&IJlig;",
        "Ё": "&IOcy;",
        "Í": "&Iacute;",
        "Î": "&Icirc;",
        "И": "&Icy;",
        "İ": "&Idot;",
        "ℑ": "&imagpart;",
        "Ì": "&Igrave;",
        "Ī": "&Imacr;",
        "ⅈ": "&ii;",
        "∬": "&Int;",
        "∫": "&int;",
        "⋂": "&xcap;",
        "⁣": "&ic;",
        "⁢": "&it;",
        "Į": "&Iogon;",
        "𝕀": "&Iopf;",
        "Ι": "&Iota;",
        "ℐ": "&imagline;",
        "Ĩ": "&Itilde;",
        "І": "&Iukcy;",
        "Ï": "&Iuml;",
        "Ĵ": "&Jcirc;",
        "Й": "&Jcy;",
        "𝔍": "&Jfr;",
        "𝕁": "&Jopf;",
        "𝒥": "&Jscr;",
        "Ј": "&Jsercy;",
        "Є": "&Jukcy;",
        "Х": "&KHcy;",
        "Ќ": "&KJcy;",
        "Κ": "&Kappa;",
        "Ķ": "&Kcedil;",
        "К": "&Kcy;",
        "𝔎": "&Kfr;",
        "𝕂": "&Kopf;",
        "𝒦": "&Kscr;",
        "Љ": "&LJcy;",
        "<": "&lt;",
        "Ĺ": "&Lacute;",
        "Λ": "&Lambda;",
        "⟪": "&Lang;",
        "ℒ": "&lagran;",
        "↞": "&twoheadleftarrow;",
        "Ľ": "&Lcaron;",
        "Ļ": "&Lcedil;",
        "Л": "&Lcy;",
        "⟨": "&langle;",
        "←": "&slarr;",
        "⇤": "&larrb;",
        "⇆": "&lrarr;",
        "⌈": "&lceil;",
        "⟦": "&lobrk;",
        "⥡": "&LeftDownTeeVector;",
        "⇃": "&downharpoonleft;",
        "⥙": "&LeftDownVectorBar;",
        "⌊": "&lfloor;",
        "↔": "&leftrightarrow;",
        "⥎": "&LeftRightVector;",
        "⊣": "&dashv;",
        "↤": "&mapstoleft;",
        "⥚": "&LeftTeeVector;",
        "⊲": "&vltri;",
        "⧏": "&LeftTriangleBar;",
        "⊴": "&trianglelefteq;",
        "⥑": "&LeftUpDownVector;",
        "⥠": "&LeftUpTeeVector;",
        "↿": "&upharpoonleft;",
        "⥘": "&LeftUpVectorBar;",
        "↼": "&lharu;",
        "⥒": "&LeftVectorBar;",
        "⋚": "&lesseqgtr;",
        "≦": "&leqq;",
        "≶": "&lg;",
        "⪡": "&LessLess;",
        "⩽": "&les;",
        "≲": "&lsim;",
        "𝔏": "&Lfr;",
        "⋘": "&Ll;",
        "⇚": "&lAarr;",
        "Ŀ": "&Lmidot;",
        "⟵": "&xlarr;",
        "⟷": "&xharr;",
        "⟶": "&xrarr;",
        "𝕃": "&Lopf;",
        "↙": "&swarrow;",
        "↘": "&searrow;",
        "↰": "&lsh;",
        "Ł": "&Lstrok;",
        "≪": "&ll;",
        "⤅": "&Map;",
        "М": "&Mcy;",
        " ": "&MediumSpace;",
        "ℳ": "&phmmat;",
        "𝔐": "&Mfr;",
        "∓": "&mp;",
        "𝕄": "&Mopf;",
        "Μ": "&Mu;",
        "Њ": "&NJcy;",
        "Ń": "&Nacute;",
        "Ň": "&Ncaron;",
        "Ņ": "&Ncedil;",
        "Н": "&Ncy;",
        "​": "&ZeroWidthSpace;",
        "\n": "&NewLine;",
        "𝔑": "&Nfr;",
        "⁠": "&NoBreak;",
        " ": "&nbsp;",
        "ℕ": "&naturals;",
        "⫬": "&Not;",
        "≢": "&nequiv;",
        "≭": "&NotCupCap;",
        "∦": "&nspar;",
        "∉": "&notinva;",
        "≠": "&ne;",
        "≂̸": "&nesim;",
        "∄": "&nexists;",
        "≯": "&ngtr;",
        "≱": "&ngeq;",
        "≧̸": "&ngeqq;",
        "≫̸": "&nGtv;",
        "≹": "&ntgl;",
        "⩾̸": "&nges;",
        "≵": "&ngsim;",
        "≎̸": "&nbump;",
        "≏̸": "&nbumpe;",
        "⋪": "&ntriangleleft;",
        "⧏̸": "&NotLeftTriangleBar;",
        "⋬": "&ntrianglelefteq;",
        "≮": "&nlt;",
        "≰": "&nleq;",
        "≸": "&ntlg;",
        "≪̸": "&nLtv;",
        "⩽̸": "&nles;",
        "≴": "&nlsim;",
        "⪢̸": "&NotNestedGreaterGreater;",
        "⪡̸": "&NotNestedLessLess;",
        "⊀": "&nprec;",
        "⪯̸": "&npreceq;",
        "⋠": "&nprcue;",
        "∌": "&notniva;",
        "⋫": "&ntriangleright;",
        "⧐̸": "&NotRightTriangleBar;",
        "⋭": "&ntrianglerighteq;",
        "⊏̸": "&NotSquareSubset;",
        "⋢": "&nsqsube;",
        "⊐̸": "&NotSquareSuperset;",
        "⋣": "&nsqsupe;",
        "⊂⃒": "&vnsub;",
        "⊈": "&nsubseteq;",
        "⊁": "&nsucc;",
        "⪰̸": "&nsucceq;",
        "⋡": "&nsccue;",
        "≿̸": "&NotSucceedsTilde;",
        "⊃⃒": "&vnsup;",
        "⊉": "&nsupseteq;",
        "≁": "&nsim;",
        "≄": "&nsimeq;",
        "≇": "&ncong;",
        "≉": "&napprox;",
        "∤": "&nsmid;",
        "𝒩": "&Nscr;",
        "Ñ": "&Ntilde;",
        "Ν": "&Nu;",
        "Œ": "&OElig;",
        "Ó": "&Oacute;",
        "Ô": "&Ocirc;",
        "О": "&Ocy;",
        "Ő": "&Odblac;",
        "𝔒": "&Ofr;",
        "Ò": "&Ograve;",
        "Ō": "&Omacr;",
        "Ω": "&ohm;",
        "Ο": "&Omicron;",
        "𝕆": "&Oopf;",
        "“": "&ldquo;",
        "‘": "&lsquo;",
        "⩔": "&Or;",
        "𝒪": "&Oscr;",
        "Ø": "&Oslash;",
        "Õ": "&Otilde;",
        "⨷": "&Otimes;",
        "Ö": "&Ouml;",
        "‾": "&oline;",
        "⏞": "&OverBrace;",
        "⎴": "&tbrk;",
        "⏜": "&OverParenthesis;",
        "∂": "&part;",
        "П": "&Pcy;",
        "𝔓": "&Pfr;",
        "Φ": "&Phi;",
        "Π": "&Pi;",
        "±": "&pm;",
        "ℙ": "&primes;",
        "⪻": "&Pr;",
        "≺": "&prec;",
        "⪯": "&preceq;",
        "≼": "&preccurlyeq;",
        "≾": "&prsim;",
        "″": "&Prime;",
        "∏": "&prod;",
        "∝": "&vprop;",
        "𝒫": "&Pscr;",
        "Ψ": "&Psi;",
        '"': "&quot;",
        "𝔔": "&Qfr;",
        "ℚ": "&rationals;",
        "𝒬": "&Qscr;",
        "⤐": "&drbkarow;",
        "®": "&reg;",
        "Ŕ": "&Racute;",
        "⟫": "&Rang;",
        "↠": "&twoheadrightarrow;",
        "⤖": "&Rarrtl;",
        "Ř": "&Rcaron;",
        "Ŗ": "&Rcedil;",
        "Р": "&Rcy;",
        "ℜ": "&realpart;",
        "∋": "&niv;",
        "⇋": "&lrhar;",
        "⥯": "&duhar;",
        "Ρ": "&Rho;",
        "⟩": "&rangle;",
        "→": "&srarr;",
        "⇥": "&rarrb;",
        "⇄": "&rlarr;",
        "⌉": "&rceil;",
        "⟧": "&robrk;",
        "⥝": "&RightDownTeeVector;",
        "⇂": "&downharpoonright;",
        "⥕": "&RightDownVectorBar;",
        "⌋": "&rfloor;",
        "⊢": "&vdash;",
        "↦": "&mapsto;",
        "⥛": "&RightTeeVector;",
        "⊳": "&vrtri;",
        "⧐": "&RightTriangleBar;",
        "⊵": "&trianglerighteq;",
        "⥏": "&RightUpDownVector;",
        "⥜": "&RightUpTeeVector;",
        "↾": "&upharpoonright;",
        "⥔": "&RightUpVectorBar;",
        "⇀": "&rightharpoonup;",
        "⥓": "&RightVectorBar;",
        "ℝ": "&reals;",
        "⥰": "&RoundImplies;",
        "⇛": "&rAarr;",
        "ℛ": "&realine;",
        "↱": "&rsh;",
        "⧴": "&RuleDelayed;",
        "Щ": "&SHCHcy;",
        "Ш": "&SHcy;",
        "Ь": "&SOFTcy;",
        "Ś": "&Sacute;",
        "⪼": "&Sc;",
        "Š": "&Scaron;",
        "Ş": "&Scedil;",
        "Ŝ": "&Scirc;",
        "С": "&Scy;",
        "𝔖": "&Sfr;",
        "↑": "&uparrow;",
        "Σ": "&Sigma;",
        "∘": "&compfn;",
        "𝕊": "&Sopf;",
        "√": "&radic;",
        "□": "&square;",
        "⊓": "&sqcap;",
        "⊏": "&sqsubset;",
        "⊑": "&sqsubseteq;",
        "⊐": "&sqsupset;",
        "⊒": "&sqsupseteq;",
        "⊔": "&sqcup;",
        "𝒮": "&Sscr;",
        "⋆": "&sstarf;",
        "⋐": "&Subset;",
        "⊆": "&subseteq;",
        "≻": "&succ;",
        "⪰": "&succeq;",
        "≽": "&succcurlyeq;",
        "≿": "&succsim;",
        "∑": "&sum;",
        "⋑": "&Supset;",
        "⊃": "&supset;",
        "⊇": "&supseteq;",
        "Þ": "&THORN;",
        "™": "&trade;",
        "Ћ": "&TSHcy;",
        "Ц": "&TScy;",
        "\t": "&Tab;",
        "Τ": "&Tau;",
        "Ť": "&Tcaron;",
        "Ţ": "&Tcedil;",
        "Т": "&Tcy;",
        "𝔗": "&Tfr;",
        "∴": "&therefore;",
        "Θ": "&Theta;",
        "  ": "&ThickSpace;",
        " ": "&thinsp;",
        "∼": "&thksim;",
        "≃": "&simeq;",
        "≅": "&cong;",
        "≈": "&thkap;",
        "𝕋": "&Topf;",
        "⃛": "&tdot;",
        "𝒯": "&Tscr;",
        "Ŧ": "&Tstrok;",
        "Ú": "&Uacute;",
        "↟": "&Uarr;",
        "⥉": "&Uarrocir;",
        "Ў": "&Ubrcy;",
        "Ŭ": "&Ubreve;",
        "Û": "&Ucirc;",
        "У": "&Ucy;",
        "Ű": "&Udblac;",
        "𝔘": "&Ufr;",
        "Ù": "&Ugrave;",
        "Ū": "&Umacr;",
        _: "&lowbar;",
        "⏟": "&UnderBrace;",
        "⎵": "&bbrk;",
        "⏝": "&UnderParenthesis;",
        "⋃": "&xcup;",
        "⊎": "&uplus;",
        "Ų": "&Uogon;",
        "𝕌": "&Uopf;",
        "⤒": "&UpArrowBar;",
        "⇅": "&udarr;",
        "↕": "&varr;",
        "⥮": "&udhar;",
        "⊥": "&perp;",
        "↥": "&mapstoup;",
        "↖": "&nwarrow;",
        "↗": "&nearrow;",
        "ϒ": "&upsih;",
        "Υ": "&Upsilon;",
        "Ů": "&Uring;",
        "𝒰": "&Uscr;",
        "Ũ": "&Utilde;",
        "Ü": "&Uuml;",
        "⊫": "&VDash;",
        "⫫": "&Vbar;",
        "В": "&Vcy;",
        "⊩": "&Vdash;",
        "⫦": "&Vdashl;",
        "⋁": "&xvee;",
        "‖": "&Vert;",
        "∣": "&smid;",
        "|": "&vert;",
        "❘": "&VerticalSeparator;",
        "≀": "&wreath;",
        " ": "&hairsp;",
        "𝔙": "&Vfr;",
        "𝕍": "&Vopf;",
        "𝒱": "&Vscr;",
        "⊪": "&Vvdash;",
        "Ŵ": "&Wcirc;",
        "⋀": "&xwedge;",
        "𝔚": "&Wfr;",
        "𝕎": "&Wopf;",
        "𝒲": "&Wscr;",
        "𝔛": "&Xfr;",
        "Ξ": "&Xi;",
        "𝕏": "&Xopf;",
        "𝒳": "&Xscr;",
        "Я": "&YAcy;",
        "Ї": "&YIcy;",
        "Ю": "&YUcy;",
        "Ý": "&Yacute;",
        "Ŷ": "&Ycirc;",
        "Ы": "&Ycy;",
        "𝔜": "&Yfr;",
        "𝕐": "&Yopf;",
        "𝒴": "&Yscr;",
        "Ÿ": "&Yuml;",
        "Ж": "&ZHcy;",
        "Ź": "&Zacute;",
        "Ž": "&Zcaron;",
        "З": "&Zcy;",
        "Ż": "&Zdot;",
        "Ζ": "&Zeta;",
        "ℨ": "&zeetrf;",
        "ℤ": "&integers;",
        "𝒵": "&Zscr;",
        "á": "&aacute;",
        "ă": "&abreve;",
        "∾": "&mstpos;",
        "∾̳": "&acE;",
        "∿": "&acd;",
        "â": "&acirc;",
        "а": "&acy;",
        "æ": "&aelig;",
        "𝔞": "&afr;",
        "à": "&agrave;",
        "ℵ": "&aleph;",
        "α": "&alpha;",
        "ā": "&amacr;",
        "⨿": "&amalg;",
        "∧": "&wedge;",
        "⩕": "&andand;",
        "⩜": "&andd;",
        "⩘": "&andslope;",
        "⩚": "&andv;",
        "∠": "&angle;",
        "⦤": "&ange;",
        "∡": "&measuredangle;",
        "⦨": "&angmsdaa;",
        "⦩": "&angmsdab;",
        "⦪": "&angmsdac;",
        "⦫": "&angmsdad;",
        "⦬": "&angmsdae;",
        "⦭": "&angmsdaf;",
        "⦮": "&angmsdag;",
        "⦯": "&angmsdah;",
        "∟": "&angrt;",
        "⊾": "&angrtvb;",
        "⦝": "&angrtvbd;",
        "∢": "&angsph;",
        "⍼": "&angzarr;",
        "ą": "&aogon;",
        "𝕒": "&aopf;",
        "⩰": "&apE;",
        "⩯": "&apacir;",
        "≊": "&approxeq;",
        "≋": "&apid;",
        "'": "&apos;",
        "å": "&aring;",
        "𝒶": "&ascr;",
        "*": "&midast;",
        "ã": "&atilde;",
        "ä": "&auml;",
        "⨑": "&awint;",
        "⫭": "&bNot;",
        "≌": "&bcong;",
        "϶": "&bepsi;",
        "‵": "&bprime;",
        "∽": "&bsim;",
        "⋍": "&bsime;",
        "⊽": "&barvee;",
        "⌅": "&barwedge;",
        "⎶": "&bbrktbrk;",
        "б": "&bcy;",
        "„": "&ldquor;",
        "⦰": "&bemptyv;",
        "β": "&beta;",
        "ℶ": "&beth;",
        "≬": "&twixt;",
        "𝔟": "&bfr;",
        "◯": "&xcirc;",
        "⨀": "&xodot;",
        "⨁": "&xoplus;",
        "⨂": "&xotime;",
        "⨆": "&xsqcup;",
        "★": "&starf;",
        "▽": "&xdtri;",
        "△": "&xutri;",
        "⨄": "&xuplus;",
        "⤍": "&rbarr;",
        "⧫": "&lozf;",
        "▴": "&utrif;",
        "▾": "&dtrif;",
        "◂": "&ltrif;",
        "▸": "&rtrif;",
        "␣": "&blank;",
        "▒": "&blk12;",
        "░": "&blk14;",
        "▓": "&blk34;",
        "█": "&block;",
        "=⃥": "&bne;",
        "≡⃥": "&bnequiv;",
        "⌐": "&bnot;",
        "𝕓": "&bopf;",
        "⋈": "&bowtie;",
        "╗": "&boxDL;",
        "╔": "&boxDR;",
        "╖": "&boxDl;",
        "╓": "&boxDr;",
        "═": "&boxH;",
        "╦": "&boxHD;",
        "╩": "&boxHU;",
        "╤": "&boxHd;",
        "╧": "&boxHu;",
        "╝": "&boxUL;",
        "╚": "&boxUR;",
        "╜": "&boxUl;",
        "╙": "&boxUr;",
        "║": "&boxV;",
        "╬": "&boxVH;",
        "╣": "&boxVL;",
        "╠": "&boxVR;",
        "╫": "&boxVh;",
        "╢": "&boxVl;",
        "╟": "&boxVr;",
        "⧉": "&boxbox;",
        "╕": "&boxdL;",
        "╒": "&boxdR;",
        "┐": "&boxdl;",
        "┌": "&boxdr;",
        "╥": "&boxhD;",
        "╨": "&boxhU;",
        "┬": "&boxhd;",
        "┴": "&boxhu;",
        "⊟": "&minusb;",
        "⊞": "&plusb;",
        "⊠": "&timesb;",
        "╛": "&boxuL;",
        "╘": "&boxuR;",
        "┘": "&boxul;",
        "└": "&boxur;",
        "│": "&boxv;",
        "╪": "&boxvH;",
        "╡": "&boxvL;",
        "╞": "&boxvR;",
        "┼": "&boxvh;",
        "┤": "&boxvl;",
        "├": "&boxvr;",
        "¦": "&brvbar;",
        "𝒷": "&bscr;",
        "⁏": "&bsemi;",
        "\\": "&bsol;",
        "⧅": "&bsolb;",
        "⟈": "&bsolhsub;",
        "•": "&bullet;",
        "⪮": "&bumpE;",
        "ć": "&cacute;",
        "∩": "&cap;",
        "⩄": "&capand;",
        "⩉": "&capbrcup;",
        "⩋": "&capcap;",
        "⩇": "&capcup;",
        "⩀": "&capdot;",
        "∩︀": "&caps;",
        "⁁": "&caret;",
        "⩍": "&ccaps;",
        "č": "&ccaron;",
        "ç": "&ccedil;",
        "ĉ": "&ccirc;",
        "⩌": "&ccups;",
        "⩐": "&ccupssm;",
        "ċ": "&cdot;",
        "⦲": "&cemptyv;",
        "¢": "&cent;",
        "𝔠": "&cfr;",
        "ч": "&chcy;",
        "✓": "&checkmark;",
        "χ": "&chi;",
        "○": "&cir;",
        "⧃": "&cirE;",
        "ˆ": "&circ;",
        "≗": "&cire;",
        "↺": "&olarr;",
        "↻": "&orarr;",
        "Ⓢ": "&oS;",
        "⊛": "&oast;",
        "⊚": "&ocir;",
        "⊝": "&odash;",
        "⨐": "&cirfnint;",
        "⫯": "&cirmid;",
        "⧂": "&cirscir;",
        "♣": "&clubsuit;",
        ":": "&colon;",
        ",": "&comma;",
        "@": "&commat;",
        "∁": "&complement;",
        "⩭": "&congdot;",
        "𝕔": "&copf;",
        "℗": "&copysr;",
        "↵": "&crarr;",
        "✗": "&cross;",
        "𝒸": "&cscr;",
        "⫏": "&csub;",
        "⫑": "&csube;",
        "⫐": "&csup;",
        "⫒": "&csupe;",
        "⋯": "&ctdot;",
        "⤸": "&cudarrl;",
        "⤵": "&cudarrr;",
        "⋞": "&curlyeqprec;",
        "⋟": "&curlyeqsucc;",
        "↶": "&curvearrowleft;",
        "⤽": "&cularrp;",
        "∪": "&cup;",
        "⩈": "&cupbrcap;",
        "⩆": "&cupcap;",
        "⩊": "&cupcup;",
        "⊍": "&cupdot;",
        "⩅": "&cupor;",
        "∪︀": "&cups;",
        "↷": "&curvearrowright;",
        "⤼": "&curarrm;",
        "⋎": "&cuvee;",
        "⋏": "&cuwed;",
        "¤": "&curren;",
        "∱": "&cwint;",
        "⌭": "&cylcty;",
        "⥥": "&dHar;",
        "†": "&dagger;",
        "ℸ": "&daleth;",
        "‐": "&hyphen;",
        "⤏": "&rBarr;",
        "ď": "&dcaron;",
        "д": "&dcy;",
        "⇊": "&downdownarrows;",
        "⩷": "&eDDot;",
        "°": "&deg;",
        "δ": "&delta;",
        "⦱": "&demptyv;",
        "⥿": "&dfisht;",
        "𝔡": "&dfr;",
        "♦": "&diams;",
        "ϝ": "&gammad;",
        "⋲": "&disin;",
        "÷": "&divide;",
        "⋇": "&divonx;",
        "ђ": "&djcy;",
        "⌞": "&llcorner;",
        "⌍": "&dlcrop;",
        $: "&dollar;",
        "𝕕": "&dopf;",
        "≑": "&eDot;",
        "∸": "&minusd;",
        "∔": "&plusdo;",
        "⊡": "&sdotb;",
        "⌟": "&lrcorner;",
        "⌌": "&drcrop;",
        "𝒹": "&dscr;",
        "ѕ": "&dscy;",
        "⧶": "&dsol;",
        "đ": "&dstrok;",
        "⋱": "&dtdot;",
        "▿": "&triangledown;",
        "⦦": "&dwangle;",
        "џ": "&dzcy;",
        "⟿": "&dzigrarr;",
        "é": "&eacute;",
        "⩮": "&easter;",
        "ě": "&ecaron;",
        "≖": "&eqcirc;",
        "ê": "&ecirc;",
        "≕": "&eqcolon;",
        "э": "&ecy;",
        "ė": "&edot;",
        "≒": "&fallingdotseq;",
        "𝔢": "&efr;",
        "⪚": "&eg;",
        "è": "&egrave;",
        "⪖": "&eqslantgtr;",
        "⪘": "&egsdot;",
        "⪙": "&el;",
        "⏧": "&elinters;",
        "ℓ": "&ell;",
        "⪕": "&eqslantless;",
        "⪗": "&elsdot;",
        "ē": "&emacr;",
        "∅": "&varnothing;",
        " ": "&emsp13;",
        " ": "&emsp14;",
        " ": "&emsp;",
        "ŋ": "&eng;",
        " ": "&ensp;",
        "ę": "&eogon;",
        "𝕖": "&eopf;",
        "⋕": "&epar;",
        "⧣": "&eparsl;",
        "⩱": "&eplus;",
        "ε": "&epsilon;",
        "ϵ": "&varepsilon;",
        "=": "&equals;",
        "≟": "&questeq;",
        "⩸": "&equivDD;",
        "⧥": "&eqvparsl;",
        "≓": "&risingdotseq;",
        "⥱": "&erarr;",
        "ℯ": "&escr;",
        "η": "&eta;",
        "ð": "&eth;",
        "ë": "&euml;",
        "€": "&euro;",
        "!": "&excl;",
        "ф": "&fcy;",
        "♀": "&female;",
        "ﬃ": "&ffilig;",
        "ﬀ": "&fflig;",
        "ﬄ": "&ffllig;",
        "𝔣": "&ffr;",
        "ﬁ": "&filig;",
        fj: "&fjlig;",
        "♭": "&flat;",
        "ﬂ": "&fllig;",
        "▱": "&fltns;",
        "ƒ": "&fnof;",
        "𝕗": "&fopf;",
        "⋔": "&pitchfork;",
        "⫙": "&forkv;",
        "⨍": "&fpartint;",
        "½": "&half;",
        "⅓": "&frac13;",
        "¼": "&frac14;",
        "⅕": "&frac15;",
        "⅙": "&frac16;",
        "⅛": "&frac18;",
        "⅔": "&frac23;",
        "⅖": "&frac25;",
        "¾": "&frac34;",
        "⅗": "&frac35;",
        "⅜": "&frac38;",
        "⅘": "&frac45;",
        "⅚": "&frac56;",
        "⅝": "&frac58;",
        "⅞": "&frac78;",
        "⁄": "&frasl;",
        "⌢": "&sfrown;",
        "𝒻": "&fscr;",
        "⪌": "&gtreqqless;",
        "ǵ": "&gacute;",
        "γ": "&gamma;",
        "⪆": "&gtrapprox;",
        "ğ": "&gbreve;",
        "ĝ": "&gcirc;",
        "г": "&gcy;",
        "ġ": "&gdot;",
        "⪩": "&gescc;",
        "⪀": "&gesdot;",
        "⪂": "&gesdoto;",
        "⪄": "&gesdotol;",
        "⋛︀": "&gesl;",
        "⪔": "&gesles;",
        "𝔤": "&gfr;",
        "ℷ": "&gimel;",
        "ѓ": "&gjcy;",
        "⪒": "&glE;",
        "⪥": "&gla;",
        "⪤": "&glj;",
        "≩": "&gneqq;",
        "⪊": "&gnapprox;",
        "⪈": "&gneq;",
        "⋧": "&gnsim;",
        "𝕘": "&gopf;",
        "ℊ": "&gscr;",
        "⪎": "&gsime;",
        "⪐": "&gsiml;",
        "⪧": "&gtcc;",
        "⩺": "&gtcir;",
        "⋗": "&gtrdot;",
        "⦕": "&gtlPar;",
        "⩼": "&gtquest;",
        "⥸": "&gtrarr;",
        "≩︀": "&gvnE;",
        "ъ": "&hardcy;",
        "⥈": "&harrcir;",
        "↭": "&leftrightsquigarrow;",
        "ℏ": "&plankv;",
        "ĥ": "&hcirc;",
        "♥": "&heartsuit;",
        "…": "&mldr;",
        "⊹": "&hercon;",
        "𝔥": "&hfr;",
        "⤥": "&searhk;",
        "⤦": "&swarhk;",
        "⇿": "&hoarr;",
        "∻": "&homtht;",
        "↩": "&larrhk;",
        "↪": "&rarrhk;",
        "𝕙": "&hopf;",
        "―": "&horbar;",
        "𝒽": "&hscr;",
        "ħ": "&hstrok;",
        "⁃": "&hybull;",
        "í": "&iacute;",
        "î": "&icirc;",
        "и": "&icy;",
        "е": "&iecy;",
        "¡": "&iexcl;",
        "𝔦": "&ifr;",
        "ì": "&igrave;",
        "⨌": "&qint;",
        "∭": "&tint;",
        "⧜": "&iinfin;",
        "℩": "&iiota;",
        "ĳ": "&ijlig;",
        "ī": "&imacr;",
        "ı": "&inodot;",
        "⊷": "&imof;",
        "Ƶ": "&imped;",
        "℅": "&incare;",
        "∞": "&infin;",
        "⧝": "&infintie;",
        "⊺": "&intercal;",
        "⨗": "&intlarhk;",
        "⨼": "&iprod;",
        "ё": "&iocy;",
        "į": "&iogon;",
        "𝕚": "&iopf;",
        "ι": "&iota;",
        "¿": "&iquest;",
        "𝒾": "&iscr;",
        "⋹": "&isinE;",
        "⋵": "&isindot;",
        "⋴": "&isins;",
        "⋳": "&isinsv;",
        "ĩ": "&itilde;",
        "і": "&iukcy;",
        "ï": "&iuml;",
        "ĵ": "&jcirc;",
        "й": "&jcy;",
        "𝔧": "&jfr;",
        "ȷ": "&jmath;",
        "𝕛": "&jopf;",
        "𝒿": "&jscr;",
        "ј": "&jsercy;",
        "є": "&jukcy;",
        "κ": "&kappa;",
        "ϰ": "&varkappa;",
        "ķ": "&kcedil;",
        "к": "&kcy;",
        "𝔨": "&kfr;",
        "ĸ": "&kgreen;",
        "х": "&khcy;",
        "ќ": "&kjcy;",
        "𝕜": "&kopf;",
        "𝓀": "&kscr;",
        "⤛": "&lAtail;",
        "⤎": "&lBarr;",
        "⪋": "&lesseqqgtr;",
        "⥢": "&lHar;",
        "ĺ": "&lacute;",
        "⦴": "&laemptyv;",
        "λ": "&lambda;",
        "⦑": "&langd;",
        "⪅": "&lessapprox;",
        "«": "&laquo;",
        "⤟": "&larrbfs;",
        "⤝": "&larrfs;",
        "↫": "&looparrowleft;",
        "⤹": "&larrpl;",
        "⥳": "&larrsim;",
        "↢": "&leftarrowtail;",
        "⪫": "&lat;",
        "⤙": "&latail;",
        "⪭": "&late;",
        "⪭︀": "&lates;",
        "⤌": "&lbarr;",
        "❲": "&lbbrk;",
        "{": "&lcub;",
        "[": "&lsqb;",
        "⦋": "&lbrke;",
        "⦏": "&lbrksld;",
        "⦍": "&lbrkslu;",
        "ľ": "&lcaron;",
        "ļ": "&lcedil;",
        "л": "&lcy;",
        "⤶": "&ldca;",
        "⥧": "&ldrdhar;",
        "⥋": "&ldrushar;",
        "↲": "&ldsh;",
        "≤": "&leq;",
        "⇇": "&llarr;",
        "⋋": "&lthree;",
        "⪨": "&lescc;",
        "⩿": "&lesdot;",
        "⪁": "&lesdoto;",
        "⪃": "&lesdotor;",
        "⋚︀": "&lesg;",
        "⪓": "&lesges;",
        "⋖": "&ltdot;",
        "⥼": "&lfisht;",
        "𝔩": "&lfr;",
        "⪑": "&lgE;",
        "⥪": "&lharul;",
        "▄": "&lhblk;",
        "љ": "&ljcy;",
        "⥫": "&llhard;",
        "◺": "&lltri;",
        "ŀ": "&lmidot;",
        "⎰": "&lmoustache;",
        "≨": "&lneqq;",
        "⪉": "&lnapprox;",
        "⪇": "&lneq;",
        "⋦": "&lnsim;",
        "⟬": "&loang;",
        "⇽": "&loarr;",
        "⟼": "&xmap;",
        "↬": "&rarrlp;",
        "⦅": "&lopar;",
        "𝕝": "&lopf;",
        "⨭": "&loplus;",
        "⨴": "&lotimes;",
        "∗": "&lowast;",
        "◊": "&lozenge;",
        "(": "&lpar;",
        "⦓": "&lparlt;",
        "⥭": "&lrhard;",
        "‎": "&lrm;",
        "⊿": "&lrtri;",
        "‹": "&lsaquo;",
        "𝓁": "&lscr;",
        "⪍": "&lsime;",
        "⪏": "&lsimg;",
        "‚": "&sbquo;",
        "ł": "&lstrok;",
        "⪦": "&ltcc;",
        "⩹": "&ltcir;",
        "⋉": "&ltimes;",
        "⥶": "&ltlarr;",
        "⩻": "&ltquest;",
        "⦖": "&ltrPar;",
        "◃": "&triangleleft;",
        "⥊": "&lurdshar;",
        "⥦": "&luruhar;",
        "≨︀": "&lvnE;",
        "∺": "&mDDot;",
        "¯": "&strns;",
        "♂": "&male;",
        "✠": "&maltese;",
        "▮": "&marker;",
        "⨩": "&mcomma;",
        "м": "&mcy;",
        "—": "&mdash;",
        "𝔪": "&mfr;",
        "℧": "&mho;",
        "µ": "&micro;",
        "⫰": "&midcir;",
        "−": "&minus;",
        "⨪": "&minusdu;",
        "⫛": "&mlcp;",
        "⊧": "&models;",
        "𝕞": "&mopf;",
        "𝓂": "&mscr;",
        "μ": "&mu;",
        "⊸": "&mumap;",
        "⋙̸": "&nGg;",
        "≫⃒": "&nGt;",
        "⇍": "&nlArr;",
        "⇎": "&nhArr;",
        "⋘̸": "&nLl;",
        "≪⃒": "&nLt;",
        "⇏": "&nrArr;",
        "⊯": "&nVDash;",
        "⊮": "&nVdash;",
        "ń": "&nacute;",
        "∠⃒": "&nang;",
        "⩰̸": "&napE;",
        "≋̸": "&napid;",
        "ŉ": "&napos;",
        "♮": "&natural;",
        "⩃": "&ncap;",
        "ň": "&ncaron;",
        "ņ": "&ncedil;",
        "⩭̸": "&ncongdot;",
        "⩂": "&ncup;",
        "н": "&ncy;",
        "–": "&ndash;",
        "⇗": "&neArr;",
        "⤤": "&nearhk;",
        "≐̸": "&nedot;",
        "⤨": "&toea;",
        "𝔫": "&nfr;",
        "↮": "&nleftrightarrow;",
        "⫲": "&nhpar;",
        "⋼": "&nis;",
        "⋺": "&nisd;",
        "њ": "&njcy;",
        "≦̸": "&nleqq;",
        "↚": "&nleftarrow;",
        "‥": "&nldr;",
        "𝕟": "&nopf;",
        "¬": "&not;",
        "⋹̸": "&notinE;",
        "⋵̸": "&notindot;",
        "⋷": "&notinvb;",
        "⋶": "&notinvc;",
        "⋾": "&notnivb;",
        "⋽": "&notnivc;",
        "⫽⃥": "&nparsl;",
        "∂̸": "&npart;",
        "⨔": "&npolint;",
        "↛": "&nrightarrow;",
        "⤳̸": "&nrarrc;",
        "↝̸": "&nrarrw;",
        "𝓃": "&nscr;",
        "⊄": "&nsub;",
        "⫅̸": "&nsubseteqq;",
        "⊅": "&nsup;",
        "⫆̸": "&nsupseteqq;",
        "ñ": "&ntilde;",
        "ν": "&nu;",
        "#": "&num;",
        "№": "&numero;",
        " ": "&numsp;",
        "⊭": "&nvDash;",
        "⤄": "&nvHarr;",
        "≍⃒": "&nvap;",
        "⊬": "&nvdash;",
        "≥⃒": "&nvge;",
        ">⃒": "&nvgt;",
        "⧞": "&nvinfin;",
        "⤂": "&nvlArr;",
        "≤⃒": "&nvle;",
        "<⃒": "&nvlt;",
        "⊴⃒": "&nvltrie;",
        "⤃": "&nvrArr;",
        "⊵⃒": "&nvrtrie;",
        "∼⃒": "&nvsim;",
        "⇖": "&nwArr;",
        "⤣": "&nwarhk;",
        "⤧": "&nwnear;",
        "ó": "&oacute;",
        "ô": "&ocirc;",
        "о": "&ocy;",
        "ő": "&odblac;",
        "⨸": "&odiv;",
        "⦼": "&odsold;",
        "œ": "&oelig;",
        "⦿": "&ofcir;",
        "𝔬": "&ofr;",
        "˛": "&ogon;",
        "ò": "&ograve;",
        "⧁": "&ogt;",
        "⦵": "&ohbar;",
        "⦾": "&olcir;",
        "⦻": "&olcross;",
        "⧀": "&olt;",
        "ō": "&omacr;",
        "ω": "&omega;",
        "ο": "&omicron;",
        "⦶": "&omid;",
        "𝕠": "&oopf;",
        "⦷": "&opar;",
        "⦹": "&operp;",
        "∨": "&vee;",
        "⩝": "&ord;",
        "ℴ": "&oscr;",
        "ª": "&ordf;",
        "º": "&ordm;",
        "⊶": "&origof;",
        "⩖": "&oror;",
        "⩗": "&orslope;",
        "⩛": "&orv;",
        "ø": "&oslash;",
        "⊘": "&osol;",
        "õ": "&otilde;",
        "⨶": "&otimesas;",
        "ö": "&ouml;",
        "⌽": "&ovbar;",
        "¶": "&para;",
        "⫳": "&parsim;",
        "⫽": "&parsl;",
        "п": "&pcy;",
        "%": "&percnt;",
        ".": "&period;",
        "‰": "&permil;",
        "‱": "&pertenk;",
        "𝔭": "&pfr;",
        "φ": "&phi;",
        "ϕ": "&varphi;",
        "☎": "&phone;",
        "π": "&pi;",
        "ϖ": "&varpi;",
        "ℎ": "&planckh;",
        "+": "&plus;",
        "⨣": "&plusacir;",
        "⨢": "&pluscir;",
        "⨥": "&plusdu;",
        "⩲": "&pluse;",
        "⨦": "&plussim;",
        "⨧": "&plustwo;",
        "⨕": "&pointint;",
        "𝕡": "&popf;",
        "£": "&pound;",
        "⪳": "&prE;",
        "⪷": "&precapprox;",
        "⪹": "&prnap;",
        "⪵": "&prnE;",
        "⋨": "&prnsim;",
        "′": "&prime;",
        "⌮": "&profalar;",
        "⌒": "&profline;",
        "⌓": "&profsurf;",
        "⊰": "&prurel;",
        "𝓅": "&pscr;",
        "ψ": "&psi;",
        " ": "&puncsp;",
        "𝔮": "&qfr;",
        "𝕢": "&qopf;",
        "⁗": "&qprime;",
        "𝓆": "&qscr;",
        "⨖": "&quatint;",
        "?": "&quest;",
        "⤜": "&rAtail;",
        "⥤": "&rHar;",
        "∽̱": "&race;",
        "ŕ": "&racute;",
        "⦳": "&raemptyv;",
        "⦒": "&rangd;",
        "⦥": "&range;",
        "»": "&raquo;",
        "⥵": "&rarrap;",
        "⤠": "&rarrbfs;",
        "⤳": "&rarrc;",
        "⤞": "&rarrfs;",
        "⥅": "&rarrpl;",
        "⥴": "&rarrsim;",
        "↣": "&rightarrowtail;",
        "↝": "&rightsquigarrow;",
        "⤚": "&ratail;",
        "∶": "&ratio;",
        "❳": "&rbbrk;",
        "}": "&rcub;",
        "]": "&rsqb;",
        "⦌": "&rbrke;",
        "⦎": "&rbrksld;",
        "⦐": "&rbrkslu;",
        "ř": "&rcaron;",
        "ŗ": "&rcedil;",
        "р": "&rcy;",
        "⤷": "&rdca;",
        "⥩": "&rdldhar;",
        "↳": "&rdsh;",
        "▭": "&rect;",
        "⥽": "&rfisht;",
        "𝔯": "&rfr;",
        "⥬": "&rharul;",
        "ρ": "&rho;",
        "ϱ": "&varrho;",
        "⇉": "&rrarr;",
        "⋌": "&rthree;",
        "˚": "&ring;",
        "‏": "&rlm;",
        "⎱": "&rmoustache;",
        "⫮": "&rnmid;",
        "⟭": "&roang;",
        "⇾": "&roarr;",
        "⦆": "&ropar;",
        "𝕣": "&ropf;",
        "⨮": "&roplus;",
        "⨵": "&rotimes;",
        ")": "&rpar;",
        "⦔": "&rpargt;",
        "⨒": "&rppolint;",
        "›": "&rsaquo;",
        "𝓇": "&rscr;",
        "⋊": "&rtimes;",
        "▹": "&triangleright;",
        "⧎": "&rtriltri;",
        "⥨": "&ruluhar;",
        "℞": "&rx;",
        "ś": "&sacute;",
        "⪴": "&scE;",
        "⪸": "&succapprox;",
        "š": "&scaron;",
        "ş": "&scedil;",
        "ŝ": "&scirc;",
        "⪶": "&succneqq;",
        "⪺": "&succnapprox;",
        "⋩": "&succnsim;",
        "⨓": "&scpolint;",
        "с": "&scy;",
        "⋅": "&sdot;",
        "⩦": "&sdote;",
        "⇘": "&seArr;",
        "§": "&sect;",
        ";": "&semi;",
        "⤩": "&tosa;",
        "✶": "&sext;",
        "𝔰": "&sfr;",
        "♯": "&sharp;",
        "щ": "&shchcy;",
        "ш": "&shcy;",
        "­": "&shy;",
        "σ": "&sigma;",
        "ς": "&varsigma;",
        "⩪": "&simdot;",
        "⪞": "&simg;",
        "⪠": "&simgE;",
        "⪝": "&siml;",
        "⪟": "&simlE;",
        "≆": "&simne;",
        "⨤": "&simplus;",
        "⥲": "&simrarr;",
        "⨳": "&smashp;",
        "⧤": "&smeparsl;",
        "⌣": "&ssmile;",
        "⪪": "&smt;",
        "⪬": "&smte;",
        "⪬︀": "&smtes;",
        "ь": "&softcy;",
        "/": "&sol;",
        "⧄": "&solb;",
        "⌿": "&solbar;",
        "𝕤": "&sopf;",
        "♠": "&spadesuit;",
        "⊓︀": "&sqcaps;",
        "⊔︀": "&sqcups;",
        "𝓈": "&sscr;",
        "☆": "&star;",
        "⊂": "&subset;",
        "⫅": "&subseteqq;",
        "⪽": "&subdot;",
        "⫃": "&subedot;",
        "⫁": "&submult;",
        "⫋": "&subsetneqq;",
        "⊊": "&subsetneq;",
        "⪿": "&subplus;",
        "⥹": "&subrarr;",
        "⫇": "&subsim;",
        "⫕": "&subsub;",
        "⫓": "&subsup;",
        "♪": "&sung;",
        "¹": "&sup1;",
        "²": "&sup2;",
        "³": "&sup3;",
        "⫆": "&supseteqq;",
        "⪾": "&supdot;",
        "⫘": "&supdsub;",
        "⫄": "&supedot;",
        "⟉": "&suphsol;",
        "⫗": "&suphsub;",
        "⥻": "&suplarr;",
        "⫂": "&supmult;",
        "⫌": "&supsetneqq;",
        "⊋": "&supsetneq;",
        "⫀": "&supplus;",
        "⫈": "&supsim;",
        "⫔": "&supsub;",
        "⫖": "&supsup;",
        "⇙": "&swArr;",
        "⤪": "&swnwar;",
        "ß": "&szlig;",
        "⌖": "&target;",
        "τ": "&tau;",
        "ť": "&tcaron;",
        "ţ": "&tcedil;",
        "т": "&tcy;",
        "⌕": "&telrec;",
        "𝔱": "&tfr;",
        "θ": "&theta;",
        "ϑ": "&vartheta;",
        "þ": "&thorn;",
        "×": "&times;",
        "⨱": "&timesbar;",
        "⨰": "&timesd;",
        "⌶": "&topbot;",
        "⫱": "&topcir;",
        "𝕥": "&topf;",
        "⫚": "&topfork;",
        "‴": "&tprime;",
        "▵": "&utri;",
        "≜": "&trie;",
        "◬": "&tridot;",
        "⨺": "&triminus;",
        "⨹": "&triplus;",
        "⧍": "&trisb;",
        "⨻": "&tritime;",
        "⏢": "&trpezium;",
        "𝓉": "&tscr;",
        "ц": "&tscy;",
        "ћ": "&tshcy;",
        "ŧ": "&tstrok;",
        "⥣": "&uHar;",
        "ú": "&uacute;",
        "ў": "&ubrcy;",
        "ŭ": "&ubreve;",
        "û": "&ucirc;",
        "у": "&ucy;",
        "ű": "&udblac;",
        "⥾": "&ufisht;",
        "𝔲": "&ufr;",
        "ù": "&ugrave;",
        "▀": "&uhblk;",
        "⌜": "&ulcorner;",
        "⌏": "&ulcrop;",
        "◸": "&ultri;",
        "ū": "&umacr;",
        "ų": "&uogon;",
        "𝕦": "&uopf;",
        "υ": "&upsilon;",
        "⇈": "&uuarr;",
        "⌝": "&urcorner;",
        "⌎": "&urcrop;",
        "ů": "&uring;",
        "◹": "&urtri;",
        "𝓊": "&uscr;",
        "⋰": "&utdot;",
        "ũ": "&utilde;",
        "ü": "&uuml;",
        "⦧": "&uwangle;",
        "⫨": "&vBar;",
        "⫩": "&vBarv;",
        "⦜": "&vangrt;",
        "⊊︀": "&vsubne;",
        "⫋︀": "&vsubnE;",
        "⊋︀": "&vsupne;",
        "⫌︀": "&vsupnE;",
        "в": "&vcy;",
        "⊻": "&veebar;",
        "≚": "&veeeq;",
        "⋮": "&vellip;",
        "𝔳": "&vfr;",
        "𝕧": "&vopf;",
        "𝓋": "&vscr;",
        "⦚": "&vzigzag;",
        "ŵ": "&wcirc;",
        "⩟": "&wedbar;",
        "≙": "&wedgeq;",
        "℘": "&wp;",
        "𝔴": "&wfr;",
        "𝕨": "&wopf;",
        "𝓌": "&wscr;",
        "𝔵": "&xfr;",
        "ξ": "&xi;",
        "⋻": "&xnis;",
        "𝕩": "&xopf;",
        "𝓍": "&xscr;",
        "ý": "&yacute;",
        "я": "&yacy;",
        "ŷ": "&ycirc;",
        "ы": "&ycy;",
        "¥": "&yen;",
        "𝔶": "&yfr;",
        "ї": "&yicy;",
        "𝕪": "&yopf;",
        "𝓎": "&yscr;",
        "ю": "&yucy;",
        "ÿ": "&yuml;",
        "ź": "&zacute;",
        "ž": "&zcaron;",
        "з": "&zcy;",
        "ż": "&zdot;",
        "ζ": "&zeta;",
        "𝔷": "&zfr;",
        "ж": "&zhcy;",
        "⇝": "&zigrarr;",
        "𝕫": "&zopf;",
        "𝓏": "&zscr;",
        "‍": "&zwj;",
        "‌": "&zwnj;"
      }
    }
  };
  
  /***/ }),
  
  /***/ 125:
  /***/ ((__unused_webpack_module, exports) => {
  
  
  
  Object.defineProperty(exports, "__esModule", ({
    value: true
  }));
  exports.numericUnicodeMap = {
    0: 65533,
    128: 8364,
    130: 8218,
    131: 402,
    132: 8222,
    133: 8230,
    134: 8224,
    135: 8225,
    136: 710,
    137: 8240,
    138: 352,
    139: 8249,
    140: 338,
    142: 381,
    145: 8216,
    146: 8217,
    147: 8220,
    148: 8221,
    149: 8226,
    150: 8211,
    151: 8212,
    152: 732,
    153: 8482,
    154: 353,
    155: 8250,
    156: 339,
    158: 382,
    159: 376
  };
  
  /***/ }),
  
  /***/ 663:
  /***/ ((__unused_webpack_module, exports) => {
  
  
  
  Object.defineProperty(exports, "__esModule", ({
    value: true
  }));
  
  exports.fromCodePoint = String.fromCodePoint || function (astralCodePoint) {
    return String.fromCharCode(Math.floor((astralCodePoint - 65536) / 1024) + 55296, (astralCodePoint - 65536) % 1024 + 56320);
  };
  
  exports.getCodePoint = String.prototype.codePointAt ? function (input, position) {
    return input.codePointAt(position);
  } : function (input, position) {
    return (input.charCodeAt(position) - 55296) * 1024 + input.charCodeAt(position + 1) - 56320 + 65536;
  };
  exports.highSurrogateFrom = 55296;
  exports.highSurrogateTo = 56319;
  
  /***/ })
  
  /******/ 	});
  /************************************************************************/
  /******/ 	// The module cache
  /******/ 	var __webpack_module_cache__ = {};
  /******/ 	
  /******/ 	// The require function
  /******/ 	function __webpack_require__(moduleId) {
  /******/ 		// Check if module is in cache
  /******/ 		var cachedModule = __webpack_module_cache__[moduleId];
  /******/ 		if (cachedModule !== undefined) {
  /******/ 			return cachedModule.exports;
  /******/ 		}
  /******/ 		// Create a new module (and put it into the cache)
  /******/ 		var module = __webpack_module_cache__[moduleId] = {
  /******/ 			// no module.id needed
  /******/ 			// no module.loaded needed
  /******/ 			exports: {}
  /******/ 		};
  /******/ 	
  /******/ 		// Execute the module function
  /******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
  /******/ 	
  /******/ 		// Return the exports of the module
  /******/ 		return module.exports;
  /******/ 	}
  /******/ 	
  /************************************************************************/
  /******/ 	/* webpack/runtime/define property getters */
  /******/ 	(() => {
  /******/ 		// define getter functions for harmony exports
  /******/ 		__webpack_require__.d = (exports, definition) => {
  /******/ 			for(var key in definition) {
  /******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
  /******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
  /******/ 				}
  /******/ 			}
  /******/ 		};
  /******/ 	})();
  /******/ 	
  /******/ 	/* webpack/runtime/hasOwnProperty shorthand */
  /******/ 	(() => {
  /******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
  /******/ 	})();
  /******/ 	
  /******/ 	/* webpack/runtime/make namespace object */
  /******/ 	(() => {
  /******/ 		// define __esModule on exports
  /******/ 		__webpack_require__.r = (exports) => {
  /******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
  /******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
  /******/ 			}
  /******/ 			Object.defineProperty(exports, '__esModule', { value: true });
  /******/ 		};
  /******/ 	})();
  /******/ 	
  /************************************************************************/
  var __webpack_exports__ = {};
  // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
  (() => {
  // ESM COMPAT FLAG
  __webpack_require__.r(__webpack_exports__);
  
  // EXPORTS
  __webpack_require__.d(__webpack_exports__, {
    "args": () => (/* binding */ args),
    "main": () => (/* binding */ main)
  });
  
  ;// CONCATENATED MODULE: external "kolmafia"
  const external_kolmafia_namespaceObject = require("kolmafia");
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/propertyTypes.js
  /** THIS FILE IS AUTOMATICALLY GENERATED. See tools/parseDefaultProperties.ts for more information */
  var booleanProperties = ["abortOnChoiceWhenNotInChoice", "addChatCommandLine", "addCreationQueue", "addStatusBarToFrames", "allowCloseableDesktopTabs", "allowNegativeTally", "allowNonMoodBurning", "allowSummonBurning", "autoHighlightOnFocus", "broadcastEvents", "cacheMallSearches", "chatBeep", "chatLinksUseRelay", "compactChessboard", "copyAsHTML", "customizedTabs", "debugBuy", "debugConsequences", "debugFoxtrotRemoval", "debugPathnames", "debugTopMenuStyle", "gapProtection", "gitInstallDependencies", "gitShowCommitMessages", "gitUpdateOnLogin", "greenScreenProtection", "guiUsesOneWindow", "hideServerDebugText", "logAcquiredItems", "logBattleAction", "logBrowserInteractions", "logChatMessages", "logChatRequests", "logCleanedHTML", "logDecoratedResponses", "logFamiliarActions", "logGainMessages", "logReadableHTML", "logPreferenceChange", "logMonsterHealth", "logReverseOrder", "logStatGains", "logStatusEffects", "logStatusOnLogin", "macroDebug", "macroLens", "mementoListActive", "mergeHobopolisChat", "pingLogin", "pingStealthyTimein", "printStackOnAbort", "proxySet", "relayAddSounds", "relayAddsCustomCombat", "relayAddsDiscoHelper", "relayAddsGraphicalCLI", "relayAddsQuickScripts", "relayAddsRestoreLinks", "relayAddsUpArrowLinks", "relayAddsUseLinks", "relayAddsWikiLinks", "relayAllowRemoteAccess", "relayBrowserOnly", "relayCacheUncacheable", "relayFormatsChatText", "relayHidesJunkMallItems", "relayMaintainsEffects", "relayMaintainsHealth", "relayMaintainsMana", "relayOverridesImages", "relayRunsAfterAdventureScript", "relayRunsBeforeBattleScript", "relayRunsBeforePVPScript", "relayScriptButtonFirst", "relayTextualizesEffects", "relayTrimsZapList", "relayUsesInlineLinks", "relayUsesIntegratedChat", "relayWarnOnRecoverFailure", "removeMalignantEffects", "saveSettingsOnSet", "sharePriceData", "showAllRequests", "showExceptionalRequests", "stealthLogin", "svnAlwaysAdd", "svnAlwaysOverwrite", "svnInstallDependencies", "svnShowCommitMessages", "svnUpdateOnLogin", "switchEquipmentForBuffs", "syncAfterSvnUpdate", "useChatToolbar", "useContactsFrame", "useDevServer", "useDockIconBadge", "useHugglerChannel", "useImageCache", "useLastUserAgent", "useSystemTrayIcon", "useTabbedChatFrame", "useToolbars", "useCachedVolcanoMaps", "useZoneComboBox", "verboseSpeakeasy", "verboseFloundry", "wrapLongLines", "_faxDataChanged", "_gitUpdated", "_svnRepoFileFetched", "_svnUpdated", "antagonisticSnowmanKitAvailable", "arcadeGameHints", "armoryUnlocked", "autoForbidIgnoringStores", "autoCraft", "autoQuest", "autoEntangle", "autoGarish", "autoManaRestore", "autoFillMayoMinder", "autoPinkyRing", "autoPlantHardcore", "autoPlantSoftcore", "autoPotionID", "autoRepairBoxServants", "autoSatisfyWithCloset", "autoSatisfyWithCoinmasters", "autoSatisfyWithMall", "autoSatisfyWithNPCs", "autoSatisfyWithStash", "autoSatisfyWithStorage", "autoSetConditions", "autoSteal", "autoTuxedo", "backupCameraReverserEnabled", "badMoonEncounter01", "badMoonEncounter02", "badMoonEncounter03", "badMoonEncounter04", "badMoonEncounter05", "badMoonEncounter06", "badMoonEncounter07", "badMoonEncounter08", "badMoonEncounter09", "badMoonEncounter10", "badMoonEncounter11", "badMoonEncounter12", "badMoonEncounter13", "badMoonEncounter14", "badMoonEncounter15", "badMoonEncounter16", "badMoonEncounter17", "badMoonEncounter18", "badMoonEncounter19", "badMoonEncounter20", "badMoonEncounter21", "badMoonEncounter22", "badMoonEncounter23", "badMoonEncounter24", "badMoonEncounter25", "badMoonEncounter26", "badMoonEncounter27", "badMoonEncounter28", "badMoonEncounter29", "badMoonEncounter30", "badMoonEncounter31", "badMoonEncounter32", "badMoonEncounter33", "badMoonEncounter34", "badMoonEncounter35", "badMoonEncounter36", "badMoonEncounter37", "badMoonEncounter38", "badMoonEncounter39", "badMoonEncounter40", "badMoonEncounter41", "badMoonEncounter42", "badMoonEncounter43", "badMoonEncounter44", "badMoonEncounter45", "badMoonEncounter46", "badMoonEncounter47", "badMoonEncounter48", "barrelShrineUnlocked", "batWingsBatHoleEntrance", "batWingsBatratBurrow", "batWingsBeanbatChamber", "batWingsGuanoJunction", "bigBrotherRescued", "blackBartsBootyAvailable", "bondAdv", "bondBeach", "bondBeat", "bondBooze", "bondBridge", "bondDesert", "bondDR", "bondDrunk1", "bondDrunk2", "bondHoney", "bondHP", "bondInit", "bondItem1", "bondItem2", "bondItem3", "bondJetpack", "bondMartiniDelivery", "bondMartiniPlus", "bondMartiniTurn", "bondMeat", "bondMox1", "bondMox2", "bondMPregen", "bondMus1", "bondMus2", "bondMys1", "bondMys2", "bondSpleen", "bondStat", "bondStat2", "bondStealth", "bondStealth2", "bondSymbols", "bondWar", "bondWeapon2", "bondWpn", "booPeakLit", "bootsCharged", "breakfastCompleted", "burrowgrubHiveUsed", "calzoneOfLegendEaten", "candyCaneSwordApartmentBuilding", "candyCaneSwordBlackForest", "candyCaneSwordBowlingAlley", "candyCaneSwordCopperheadClub", "candyCaneSwordDailyDungeon", "candyCaneSwordDefiledCranny", "candyCaneSwordFunHouse", "candyCaneSwordShore", "candyCaneSwordWarFratRoom", "candyCaneSwordWarFratZetas", "candyCaneSwordWarHippyBait", "candyCaneSwordWarHippyLine", "canteenUnlocked", "chaosButterflyThrown", "chatbotScriptExecuted", "chateauAvailable", "chatLiterate", "chatServesUpdates", "checkJackassHardcore", "checkJackassSoftcore", "clanAttacksEnabled", "coldAirportAlways", "considerShadowNoodles", "controlRoomUnlock", "concertVisited", "controlPanel1", "controlPanel2", "controlPanel3", "controlPanel4", "controlPanel5", "controlPanel6", "controlPanel7", "controlPanel8", "controlPanel9", "corralUnlocked", "crAlways", "crimbo23ArmoryAtWar", "crimbo23BarAtWar", "crimbo23CafeAtWar", "crimbo23CottageAtWar", "crimbo23FoundryAtWar", "cyberDatastickCollected", "dailyDungeonDone", "dampOldBootPurchased", "daycareOpen", "deepDishOfLegendEaten", "demonSummoned", "dinseyAudienceEngagement", "dinseyGarbagePirate", "dinseyRapidPassEnabled", "dinseyRollercoasterNext", "dinseySafetyProtocolsLoose", "doghouseBoarded", "dontStopForCounters", "drippingHallUnlocked", "drippyShieldUnlocked", "edUsedLash", "eldritchFissureAvailable", "eldritchHorrorAvailable", "enqueueForConsumption", "errorOnAmbiguousFold", "essenceOfAnnoyanceAvailable", "essenceOfBearAvailable", "expressCardUsed", "falloutShelterChronoUsed", "falloutShelterCoolingTankUsed", "fireExtinguisherBatHoleUsed", "fireExtinguisherChasmUsed", "fireExtinguisherCyrptUsed", "fireExtinguisherDesertUsed", "fireExtinguisherHaremUsed", "fistTeachingsHaikuDungeon", "fistTeachingsPokerRoom", "fistTeachingsBarroomBrawl", "fistTeachingsConservatory", "fistTeachingsBatHole", "fistTeachingsFunHouse", "fistTeachingsMenagerie", "fistTeachingsSlums", "fistTeachingsFratHouse", "fistTeachingsRoad", "fistTeachingsNinjaSnowmen", "flickeringPixel1", "flickeringPixel2", "flickeringPixel3", "flickeringPixel4", "flickeringPixel5", "flickeringPixel6", "flickeringPixel7", "flickeringPixel8", "floristFriarAvailable", "floristFriarChecked", "frAlways", "frCemetaryUnlocked", "friarsBlessingReceived", "frMountainsUnlocked", "frSwampUnlocked", "frVillageUnlocked", "frWoodUnlocked", "getawayCampsiteUnlocked", "ghostPencil1", "ghostPencil2", "ghostPencil3", "ghostPencil4", "ghostPencil5", "ghostPencil6", "ghostPencil7", "ghostPencil8", "ghostPencil9", "gingerAdvanceClockUnlocked", "gingerBlackmailAccomplished", "gingerbreadCityAvailable", "gingerExtraAdventures", "gingerNegativesDropped", "gingerSewersUnlocked", "gingerSubwayLineUnlocked", "gingerRetailUnlocked", "glitchItemAvailable", "grabCloversHardcore", "grabCloversSoftcore", "guideToSafariAvailable", "guyMadeOfBeesDefeated", "hallowienerDefiledNook", "hallowienerGuanoJunction", "hallowienerKnollGym", "hallowienerMadnessBakery", "hallowienerMiddleChamber", "hallowienerOvergrownLot", "hallowienerSkeletonStore", "hallowienerSmutOrcs", "hallowienerSonofaBeach", "hallowienerVolcoino", "hardcorePVPWarning", "harvestBatteriesHardcore", "harvestBatteriesSoftcore", "hasAutumnaton", "hasBartender", "hasChef", "hasCocktailKit", "hasCosmicBowlingBall", "hasDetectiveSchool", "hasMaydayContract", "hasOven", "hasRange", "hasShaker", "hasSushiMat", "hasTwinkleVision", "haveBoxingDaydreamHardcore", "haveBoxingDaydreamSoftcore", "hermitHax0red", "holidayHalsBookAvailable", "horseryAvailable", "hotAirportAlways", "intenseCurrents", "itemBoughtPerAscension637", "itemBoughtPerAscension8266", "itemBoughtPerAscension10790", "itemBoughtPerAscension10794", "itemBoughtPerAscension10795", "itemBoughtPerCharacter6423", "itemBoughtPerCharacter6428", "itemBoughtPerCharacter6429", "kingLiberated", "lastPirateInsult1", "lastPirateInsult2", "lastPirateInsult3", "lastPirateInsult4", "lastPirateInsult5", "lastPirateInsult6", "lastPirateInsult7", "lastPirateInsult8", "lawOfAveragesAvailable", "leafletCompleted", "ledCandleDropped", "libraryCardUsed", "lockPicked", "logBastilleBattalionBattles", "loginRecoveryHardcore", "loginRecoverySoftcore", "lovebugsUnlocked", "loveTunnelAvailable", "lowerChamberUnlock", "madnessBakeryAvailable", "makePocketWishesHardcore", "makePocketWishesSoftcore", "manualOfNumberologyAvailable", "mappingMonsters", "mapToAnemoneMinePurchased", "mapToKokomoAvailable", "mapToMadnessReefPurchased", "mapToTheDiveBarPurchased", "mapToTheMarinaraTrenchPurchased", "mapToTheSkateParkPurchased", "maraisBeaverUnlock", "maraisCorpseUnlock", "maraisDarkUnlock", "maraisVillageUnlock", "maraisWildlifeUnlock", "maraisWizardUnlock", "maximizerAlwaysCurrent", "maximizerCreateOnHand", "maximizerCurrentMallPrices", "maximizerFoldables", "maximizerIncludeAll", "maximizerNoAdventures", "middleChamberUnlock", "milkOfMagnesiumActive", "moonTuned", "neverendingPartyAlways", "noncombatForcerActive", "oasisAvailable", "odeBuffbotCheck", "oilPeakLit", "oscusSodaUsed", "outrageousSombreroUsed", "overgrownLotAvailable", "ownsFloristFriar", "ownsSpeakeasy", "pathedSummonsHardcore", "pathedSummonsSoftcore", "pirateRealmUnlockedAnemometer", "pirateRealmUnlockedBlunderbuss", "pirateRealmUnlockedBreastplate", "pirateRealmUnlockedClipper", "pirateRealmUnlockedCrabsicle", "pirateRealmUnlockedFlag", "pirateRealmUnlockedFork", "pirateRealmUnlockedGoldRing", "pirateRealmUnlockedManOWar", "pirateRealmUnlockedPlushie", "pirateRealmUnlockedRadioRing", "pirateRealmUnlockedRhum", "pirateRealmUnlockedScurvySkillbook", "pirateRealmUnlockedShavingCream", "pirateRealmUnlockedSpyglass", "pirateRealmUnlockedTattoo", "pirateRealmUnlockedThirdCrewmate", "pirateRealmUnlockedTikiSkillbook", "pizzaOfLegendEaten", "popularTartUnlocked", "potatoAlarmClockUsed", "prAlways", "prayedForGlamour", "prayedForProtection", "prayedForVigor", "primaryLabCheerCoreGrabbed", "pumpkinSpiceWhorlUsed", "pyramidBombUsed", "rageGlandVented", "readManualHardcore", "readManualSoftcore", "relayShowSpoilers", "relayShowWarnings", "rememberDesktopSize", "replicaChateauAvailable", "replicaNeverendingPartyAlways", "replicaWitchessSetAvailable", "requireBoxServants", "requireSewerTestItems", "restUsingCampAwayTent", "restUsingChateau", "ROMOfOptimalityAvailable", "safePickpocket", "schoolOfHardKnocksDiplomaAvailable", "scriptCascadingMenus", "serverAddsCustomCombat", "serverAddsBothCombat", "SHAWARMAInitiativeUnlocked", "showForbiddenStores", "showGainsPerUnit", "showIgnoringStorePrices", "showNoSummonOnly", "showTurnFreeOnly", "skeletonStoreAvailable", "sleazeAirportAlways", "snojoAvailable", "sortByEffect", "sortByRoom", "spacegateAlways", "spacegateVaccine1", "spacegateVaccine2", "spacegateVaccine3", "spaceInvaderDefeated", "spelunkyHints", "spiceMelangeUsed", "spookyAirportAlways", "stenchAirportAlways", "stopForFixedWanderer", "stopForUltraRare", "styxPixieVisited", "superconductorDefeated", "suppressCyberRealmDarkMode", "suppressCyberRealmGreenImages", "suppressInappropriateNags", "suppressPowerPixellation", "suppressMallPriceCacheMessages", "telegraphOfficeAvailable", "telescopeLookedHigh", "timeTowerAvailable", "trackLightsOut", "uneffectWithHotTub", "universalSeasoningActive", "universalSeasoningAvailable", "useBookOfEverySkillHardcore", "useBookOfEverySkillSoftcore", "useCrimboToysHardcore", "useCrimboToysSoftcore", "verboseMaximizer", "visitLoungeHardcore", "visitLoungeSoftcore", "visitRumpusHardcore", "visitRumpusSoftcore", "voteAlways", "wildfireBarrelCaulked", "wildfireDusted", "wildfireFracked", "wildfirePumpGreased", "wildfireSprinkled", "yearbookCameraPending", "youRobotScavenged", "_2002MrStoreCreditsCollected", "_affirmationCookieEaten", "_affirmationHateUsed", "_airFryerUsed", "_akgyxothUsed", "_alienAnimalMilkUsed", "_alienPlantPodUsed", "_allYearSucker", "_aprilShower", "_armyToddlerCast", "_aug1Cast", "_aug2Cast", "_aug3Cast", "_aug4Cast", "_aug5Cast", "_aug6Cast", "_aug7Cast", "_aug8Cast", "_aug9Cast", "_aug10Cast", "_aug11Cast", "_aug12Cast", "_aug13Cast", "_aug14Cast", "_aug15Cast", "_aug16Cast", "_aug17Cast", "_aug18Cast", "_aug19Cast", "_aug20Cast", "_aug21Cast", "_aug22Cast", "_aug23Cast", "_aug24Cast", "_aug25Cast", "_aug26Cast", "_aug27Cast", "_aug28Cast", "_aug29Cast", "_aug30Cast", "_aug31Cast", "_augTodayCast", "_authorsInkUsed", "_baconMachineUsed", "_bagOfCandy", "_bagOfCandyUsed", "_bagOTricksUsed", "_ballastTurtleUsed", "_ballInACupUsed", "_ballpit", "_barrelPrayer", "_bastilleLastBattleWon", "_beachCombing", "_bendHellUsed", "_blackMonolithUsed", "_blankoutUsed", "_bonersSummoned", "_bookOfEverySkillUsed", "_borrowedTimeUsed", "_bowleggedSwaggerUsed", "_bowlFullOfJellyUsed", "_boxOfHammersUsed", "_brainPreservationFluidUsed", "_brassDreadFlaskUsed", "_cameraUsed", "_canSeekBirds", "_candyCaneSwordBackAlley", "_candyCaneSwordHauntedBedroom", "_candyCaneSwordHauntedLibrary", "_candyCaneSwordLyle", "_candyCaneSwordMadnessBakery", "_candyCaneSwordOvergrownLot", "_candyCaneSwordOvergrownShrine", "_candyCaneSwordPalindome", "_candyCaneSwordSouthOfTheBorder", "_candyCaneSwordSpookyForest", "_carboLoaded", "_cargoPocketEmptied", "_ceciHatUsed", "_chateauDeskHarvested", "_chateauMonsterFought", "_chibiChanged", "_chronerCrossUsed", "_chronerTriggerUsed", "_chubbyAndPlumpUsed", "_circadianRhythmsRecalled", "_circleDrumUsed", "_clanFortuneBuffUsed", "_claraBellUsed", "_coalPaperweightUsed", "_cocoaDispenserUsed", "_cocktailShakerUsed", "_coldAirportToday", "_coldOne", "_communismUsed", "_confusingLEDClockUsed", "_controlPanelUsed", "_cookbookbatRecipeDrops", "_corruptedStardustUsed", "_cosmicSixPackConjured", "_crappyCameraUsed", "_creepyVoodooDollUsed", "_crimboTraining", "_crimboTree", "_crToday", "_cursedKegUsed", "_cursedMicrowaveUsed", "_cyberTrashCollected", "_dailyDungeonMalwareUsed", "_darkChocolateHeart", "_daycareFights", "_daycareNap", "_daycareSpa", "_daycareToday", "_defectiveTokenChecked", "_defectiveTokenUsed", "_dinseyGarbageDisposed", "_discoKnife", "_distentionPillUsed", "_dnaHybrid", "_docClocksThymeCocktailDrunk", "_drippingHallDoor1", "_drippingHallDoor2", "_drippingHallDoor3", "_drippingHallDoor4", "_drippyCaviarUsed", "_drippyNuggetUsed", "_drippyPilsnerUsed", "_drippyPlumUsed", "_drippyWineUsed", "_eldritchHorrorEvoked", "_eldritchTentacleFought", "_emberingHulkFought", "_entauntaunedToday", "_envyfishEggUsed", "_epicMcTwistUsed", "_essentialTofuUsed", "_etchedHourglassUsed", "_eternalCarBatteryUsed", "_everfullGlassUsed", "_extraGreasySliderEaten", "_eyeAndATwistUsed", "_fancyChessSetUsed", "_falloutShelterSpaUsed", "_fancyHotDogEaten", "_farmerItemsCollected", "_favoriteBirdVisited", "_firedJokestersGun", "_fireExtinguisherRefilled", "_fireStartingKitUsed", "_fireworksShop", "_fireworksShopHatBought", "_fireworksShopEquipmentBought", "_fireworkUsed", "_fishyPipeUsed", "_floundryItemCreated", "_floundryItemUsed", "_freePillKeeperUsed", "_frToday", "_frostyMugUsed", "_fudgeSporkUsed", "_garbageItemChanged", "_gingerBiggerAlligators", "_gingerbreadCityToday", "_gingerbreadClockAdvanced", "_gingerbreadClockVisited", "_gingerbreadColumnDestroyed", "_gingerbreadMobHitUsed", "_glennGoldenDiceUsed", "_glitchItemImplemented", "_gnollEyeUsed", "_governmentPerDiemUsed", "_grimBuff", "_guildManualUsed", "_guzzlrQuestAbandoned", "_hardKnocksDiplomaUsed", "_hippyMeatCollected", "_hobbyHorseUsed", "_hodgmansBlanketDrunk", "_holidayFunUsed", "_holoWristCrystal", "_hotAirportToday", "_hungerSauceUsed", "_hyperinflatedSealLungUsed", "_iceHotelRoomsRaided", "_iceSculptureUsed", "_incredibleSelfEsteemCast", "_infernoDiscoVisited", "_infiniteJellyUsed", "_internetDailyDungeonMalwareBought", "_internetGallonOfMilkBought", "_internetPlusOneBought", "_internetPrintScreenButtonBought", "_internetViralVideoBought", "_interviewIsabella", "_interviewMasquerade", "_interviewVlad", "_inquisitorsUnidentifiableObjectUsed", "_ironicMoustache", "_jackassPlumberGame", "_jarlsCheeseSummoned", "_jarlsCreamSummoned", "_jarlsDoughSummoned", "_jarlsEggsSummoned", "_jarlsFruitSummoned", "_jarlsMeatSummoned", "_jarlsPotatoSummoned", "_jarlsVeggiesSummoned", "_jingleBellUsed", "_jukebox", "_kgbFlywheelCharged", "_kgbLeftDrawerUsed", "_kgbOpened", "_kgbRightDrawerUsed", "_kolConSixPackUsed", "_kolhsCutButNotDried", "_kolhsIsskayLikeAnAshtray", "_kolhsPoeticallyLicenced", "_kolhsSchoolSpirited", "_kudzuSaladEaten", "_lastCombatLost", "_lastCombatWon", "_latteBanishUsed", "_latteCopyUsed", "_latteDrinkUsed", "_leafAntEggCrafted", "_leafDayShortenerCrafted", "_leafTattooCrafted", "_leavesJumped", "_legendaryBeat", "_licenseToChillUsed", "_lodestoneUsed", "_lookingGlass", "_loveTunnelToday", "_loveTunnelUsed", "_luckyGoldRingVolcoino", "_lunchBreak", "_lupineHormonesUsed", "_lyleFavored", "_madLiquorDrunk", "_madTeaParty", "_mafiaMiddleFingerRingUsed", "_managerialManipulationUsed", "_mansquitoSerumUsed", "_mapToACandyRichBlockUsed", "_maydayDropped", "_mayoDeviceRented", "_mayoTankSoaked", "_meatballMachineUsed", "_meatifyMatterUsed", "_milkOfMagnesiumUsed", "_mimeArmyShotglassUsed", "_miniKiwiIntoxicatingSpiritsBought", "_missGravesVermouthDrunk", "_missileLauncherUsed", "_molehillMountainUsed", "_momFoodReceived", "_mrBurnsgerEaten", "_muffinOrderedToday", "_mulliganStewEaten", "_mushroomGardenVisited", "_neverendingPartyToday", "_newYouQuestCompleted", "_olympicSwimmingPool", "_olympicSwimmingPoolItemFound", "_overflowingGiftBasketUsed", "_partyHard", "_pastaAdditive", "_perfectFreezeUsed", "_perfectlyFairCoinUsed", "_petePartyThrown", "_peteRiotIncited", "_photocopyUsed", "_pickyTweezersUsed", "_pickleJuiceDrunk", "_pingPongGame", "_pirateBellowUsed", "_pirateDinghyUsed", "_pirateForkUsed", "_pirateRealmSoldCompass", "_pirateRealmWindicleUsed", "_pixelOrbUsed", "_plumbersMushroomStewEaten", "_pneumaticityPotionUsed", "_portableSteamUnitUsed", "_pottedTeaTreeUsed", "_prToday", "_psychoJarFilled", "_psychoJarUsed", "_psychokineticHugUsed", "_punchingMirrorUsed", "_rainStickUsed", "_redwoodRainStickUsed", "_replicaSnowconeTomeUsed", "_replicaResolutionLibramUsed", "_replicaSmithsTomeUsed", "_requestSandwichSucceeded", "_rhinestonesAcquired", "_saladForkUsed", "_seaJellyHarvested", "_septEmberBalanceChecked", "_setOfJacksUsed", "_sewingKitUsed", "_sexChanged", "_shadowAffinityToday", "_shadowForestLooted", "_shrubDecorated", "_silverDreadFlaskUsed", "_sitCourseCompleted", "_skateBuff1", "_skateBuff2", "_skateBuff3", "_skateBuff4", "_skateBuff5", "_sleazeAirportToday", "_snowballFactoryUsed", "_sobrieTeaUsed", "_softwareGlitchTurnReceived", "_sotParcelReturned", "_spacegateMurderbot", "_spacegateRuins", "_spacegateSpant", "_spacegateToday", "_spacegateVaccine", "_spaghettiBreakfast", "_spaghettiBreakfastEaten", "_spinmasterLatheVisited", "_spinningWheel", "_spookyAirportToday", "_stabonicScrollUsed", "_steelyEyedSquintUsed", "_stenchAirportToday", "_stinkyCheeseBanisherUsed", "_strangeStalagmiteUsed", "_streamsCrossed", "_structuralEmberUsed", "_stuffedPocketwatchUsed", "_styxSprayUsed", "_summonAnnoyanceUsed", "_summonCarrotUsed", "_summonResortPassUsed", "_sweetToothUsed", "_syntheticDogHairPillUsed", "_tacoFlierUsed", "_takerSpaceSuppliesDelivered", "_telegraphOfficeToday", "_templeHiddenPower", "_tempuraAirUsed", "_thesisDelivered", "_tiedUpFlamingLeafletFought", "_tiedUpFlamingMonsteraFought", "_tiedUpLeaviathanFought", "_timeSpinnerReplicatorUsed", "_toastSummoned", "_tonicDjinn", "_treasuryEliteMeatCollected", "_treasuryHaremMeatCollected", "_trivialAvocationsGame", "_tryptophanDartUsed", "_turtlePowerCast", "_twelveNightEnergyUsed", "_ultraMegaSourBallUsed", "_victorSpoilsUsed", "_villainLairCanLidUsed", "_villainLairColorChoiceUsed", "_villainLairDoorChoiceUsed", "_villainLairFirecrackerUsed", "_villainLairSymbologyChoiceUsed", "_villainLairWebUsed", "_vmaskBanisherUsed", "_voraciTeaUsed", "_volcanoItemRedeemed", "_volcanoSuperduperheatedMetal", "_voodooSnuffUsed", "_voteToday", "_VYKEACafeteriaRaided", "_VYKEALoungeRaided", "_walfordQuestStartedToday", "_warbearBankUsed", "_warbearBreakfastMachineUsed", "_warbearGyrocopterUsed", "_warbearSodaMachineUsed", "_wildfireBarrelHarvested", "_witchessBuff", "_workshedItemUsed", "_yamBatteryUsed", "_zombieClover", "_preventScurvy", "lockedItem4637", "lockedItem4638", "lockedItem4639", "lockedItem4646", "lockedItem4647", "unknownRecipe3542", "unknownRecipe3543", "unknownRecipe3544", "unknownRecipe3545", "unknownRecipe3546", "unknownRecipe3547", "unknownRecipe3548", "unknownRecipe3749", "unknownRecipe3751", "unknownRecipe4172", "unknownRecipe4173", "unknownRecipe4174", "unknownRecipe5060", "unknownRecipe5061", "unknownRecipe5062", "unknownRecipe5063", "unknownRecipe5064", "unknownRecipe5066", "unknownRecipe5067", "unknownRecipe5069", "unknownRecipe5070", "unknownRecipe5072", "unknownRecipe5073", "unknownRecipe5670", "unknownRecipe5671", "unknownRecipe6501", "unknownRecipe6564", "unknownRecipe6565", "unknownRecipe6566", "unknownRecipe6567", "unknownRecipe6568", "unknownRecipe6569", "unknownRecipe6570", "unknownRecipe6571", "unknownRecipe6572", "unknownRecipe6573", "unknownRecipe6574", "unknownRecipe6575", "unknownRecipe6576", "unknownRecipe6577", "unknownRecipe6578", "unknownRecipe7752", "unknownRecipe7753", "unknownRecipe7754", "unknownRecipe7755", "unknownRecipe7756", "unknownRecipe7757", "unknownRecipe7758", "unknownRecipe10970", "unknownRecipe10971", "unknownRecipe10972", "unknownRecipe10973", "unknownRecipe10974", "unknownRecipe10975", "unknownRecipe10976", "unknownRecipe10977", "unknownRecipe10978", "unknownRecipe10988", "unknownRecipe10989", "unknownRecipe10990", "unknownRecipe10991", "unknownRecipe10992", "unknownRecipe11000"];
  var numericProperties = ["coinMasterIndex", "dailyDeedsVersion", "defaultDropdown1", "defaultDropdown2", "defaultDropdownSplit", "defaultLimit", "fixedThreadPoolSize", "itemManagerIndex", "lastBuffRequestType", "lastGlobalCounterDay", "lastImageCacheClear", "pingDefaultTestPings", "pingLoginCount", "pingLoginGoal", "pingLoginThreshold", "pingTestPings", "previousUpdateRevision", "relayDelayForSVN", "relaySkillButtonCount", "scriptButtonPosition", "statusDropdown", "svnThreadPoolSize", "toolbarPosition", "_beachTides", "_g9Effect", "8BitBonusTurns", "8BitScore", "addingScrolls", "affirmationCookiesEaten", "aminoAcidsUsed", "antagonisticSnowmanKitCost", "ascensionsToday", "asolDeferredPoints", "asolPointsPigSkinner", "asolPointsCheeseWizard", "asolPointsJazzAgent", "autoAbortThreshold", "autoAntidote", "autoBuyPriceLimit", "autopsyTweezersUsed", "autumnatonQuestTurn", "availableCandyCredits", "availableDimes", "availableFunPoints", "availableMrStore2002Credits", "availableQuarters", "availableSeptEmbers", "availableStoreCredits", "availableSwagger", "averageSwagger", "awolMedicine", "awolPointsBeanslinger", "awolPointsCowpuncher", "awolPointsSnakeoiler", "awolDeferredPointsBeanslinger", "awolDeferredPointsCowpuncher", "awolDeferredPointsSnakeoiler", "awolVenom", "bagOTricksCharges", "ballpitBonus", "bankedKarma", "bartenderTurnsUsed", "basementMallPrices", "basementSafetyMargin", "batmanFundsAvailable", "batmanBonusInitialFunds", "batmanTimeLeft", "bearSwagger", "beeCounter", "beGregariousCharges", "beGregariousFightsLeft", "birdformCold", "birdformHot", "birdformRoc", "birdformSleaze", "birdformSpooky", "birdformStench", "blackBartsBootyCost", "blackPuddingsDefeated", "blackForestProgress", "blankOutUsed", "bloodweiserDrunk", "bodyguardCharge", "bondPoints", "bondVillainsDefeated", "boneAbacusVictories", "bookOfFactsGummi", "bookOfFactsPinata", "booPeakProgress", "borisPoints", "breakableHandling", "breakableHandling1964", "breakableHandling9691", "breakableHandling9692", "breakableHandling9699", "breathitinCharges", "brodenBacteria", "brodenSprinkles", "buffBotMessageDisposal", "buffBotPhilanthropyType", "buffJimmyIngredients", "burnoutsDefeated", "burrowgrubSummonsRemaining", "bwApronMealsEaten", "camelSpit", "camerasUsed", "campAwayDecoration", "candyWitchTurnsUsed", "candyWitchCandyTotal", "carboLoading", "catBurglarBankHeists", "cellarLayout", "charitableDonations", "chasmBridgeProgress", "chefTurnsUsed", "chessboardsCleared", "chibiAlignment", "chibiBirthday", "chibiFitness", "chibiIntelligence", "chibiLastVisit", "chibiSocialization", "chilledToTheBone", "cinchoSaltAndLime", "cinderellaMinutesToMidnight", "cinderellaScore", "cocktailSummons", "commerceGhostCombats", "cookbookbatIngredientsCharge", "controlPanelOmega", "cornucopiasOpened", "cosmicBowlingBallReturnCombats", "cozyCounter6332", "cozyCounter6333", "cozyCounter6334", "craftingClay", "craftingLeather", "craftingStraw", "crimbo16BeardChakraCleanliness", "crimbo16BootsChakraCleanliness", "crimbo16BungChakraCleanliness", "crimbo16CrimboHatChakraCleanliness", "crimbo16GutsChakraCleanliness", "crimbo16HatChakraCleanliness", "crimbo16JellyChakraCleanliness", "crimbo16LiverChakraCleanliness", "crimbo16NippleChakraCleanliness", "crimbo16NoseChakraCleanliness", "crimbo16ReindeerChakraCleanliness", "crimbo16SackChakraCleanliness", "crimboTrainingSkill", "crimboTreeDays", "cubelingProgress", "cupidBowFights", "currentExtremity", "currentHedgeMazeRoom", "currentMojoFilters", "currentNunneryMeat", "currentPortalEnergy", "currentReplicaStoreYear", "cursedMagnifyingGlassCount", "cyrptAlcoveEvilness", "cyrptCrannyEvilness", "cyrptNicheEvilness", "cyrptNookEvilness", "cyrptTotalEvilness", "darkGyfftePoints", "dartsThrown", "daycareEquipment", "daycareInstructors", "daycareLastScavenge", "daycareToddlers", "dbNemesisSkill1", "dbNemesisSkill2", "dbNemesisSkill3", "desertExploration", "desktopHeight", "desktopWidth", "dinseyFilthLevel", "dinseyFunProgress", "dinseyNastyBearsDefeated", "dinseySocialJusticeIProgress", "dinseySocialJusticeIIProgress", "dinseyTouristsFed", "dinseyToxicMultiplier", "doctorBagQuestLights", "doctorBagUpgrades", "dreadScroll1", "dreadScroll2", "dreadScroll3", "dreadScroll4", "dreadScroll5", "dreadScroll6", "dreadScroll7", "dreadScroll8", "dripAdventuresSinceAscension", "drippingHallAdventuresSinceAscension", "drippingTreesAdventuresSinceAscension", "drippyBatsUnlocked", "drippyJuice", "drippyOrbsClaimed", "droneSelfDestructChipsUsed", "drunkenSwagger", "edDefeatAbort", "edPoints", "eldritchTentaclesFought", "electricKoolAidEaten", "elfGratitude", "encountersUntilDMTChoice", "encountersUntilYachtzeeChoice", "encountersUntilNEPChoice", "encountersUntilSRChoice", "ensorceleeLevel", "entauntaunedColdRes", "essenceOfAnnoyanceCost", "essenceOfBearCost", "extraRolloverAdventures", "falloutShelterLevel", "familiarSweat", "fingernailsClipped", "fistSkillsKnown", "flyeredML", "fossilB", "fossilD", "fossilN", "fossilP", "fossilS", "fossilW", "fratboysDefeated", "frenchGuardTurtlesFreed", "funGuyMansionKills", "garbageChampagneCharge", "garbageFireProgress", "garbageShirtCharge", "garbageTreeCharge", "garlandUpgrades", "getsYouDrunkTurnsLeft", "ghostPepperTurnsLeft", "gingerDigCount", "gingerLawChoice", "gingerMuscleChoice", "gingerTrainScheduleStudies", "gladiatorBallMovesKnown", "gladiatorBladeMovesKnown", "gladiatorNetMovesKnown", "glitchItemCost", "glitchItemImplementationCount", "glitchItemImplementationLevel", "glitchSwagger", "gloverPoints", "gnasirProgress", "goldenMrAccessories", "gongPath", "gooseDronesRemaining", "goreCollected", "gourdItemCount", "greyYouPoints", "grimoire1Summons", "grimoire2Summons", "grimoire3Summons", "grimstoneCharge", "guardTurtlesFreed", "guideToSafariCost", "guyMadeOfBeesCount", "guzzlrBronzeDeliveries", "guzzlrDeliveryProgress", "guzzlrGoldDeliveries", "guzzlrPlatinumDeliveries", "haciendaLayout", "hallowiener8BitRealm", "hallowienerCoinspiracy", "hareMillisecondsSaved", "hareTurnsUsed", "heavyRainsStartingThunder", "heavyRainsStartingRain", "heavyRainsStartingLightning", "heroDonationBoris", "heroDonationJarlsberg", "heroDonationSneakyPete", "hiddenApartmentProgress", "hiddenBowlingAlleyProgress", "hiddenHospitalProgress", "hiddenOfficeProgress", "hiddenTavernUnlock", "highTopPumped", "hippiesDefeated", "holidayHalsBookCost", "holidaySwagger", "homemadeRobotUpgrades", "homebodylCharges", "hpAutoRecovery", "hpAutoRecoveryTarget", "iceSwagger", "jarlsbergPoints", "juicyGarbageUsed", "jungCharge", "junglePuns", "knownAscensions", "kolhsTotalSchoolSpirited", "lastAnticheeseDay", "lastArcadeAscension", "lastBadMoonReset", "lastBangPotionReset", "lastBattlefieldReset", "lastBeardBuff", "lastBreakfast", "lastCartographyBooPeak", "lastCartographyCastleTop", "lastCartographyDarkNeck", "lastCartographyDefiledNook", "lastCartographyFratHouse", "lastCartographyFratHouseVerge", "lastCartographyGuanoJunction", "lastCartographyHauntedBilliards", "lastCartographyHippyCampVerge", "lastCartographyZeppelinProtesters", "lastCastleGroundUnlock", "lastCastleTopUnlock", "lastCellarReset", "lastChanceThreshold", "lastChasmReset", "lastColosseumRoundWon", "lastCouncilVisit", "lastCounterDay", "lastDesertUnlock", "lastDispensaryOpen", "lastDMTDuplication", "lastDwarfFactoryReset", "lastEVHelmetValue", "lastEVHelmetReset", "lastEmptiedStorage", "lastFilthClearance", "lastGoofballBuy", "lastGuildStoreOpen", "lastGuyMadeOfBeesReset", "lastFratboyCall", "lastFriarCeremonyAscension", "lastFriarsElbowNC", "lastFriarsHeartNC", "lastFriarsNeckNC", "lastHippyCall", "lastIslandUnlock", "lastKeyotronUse", "lastKingLiberation", "lastLightsOutTurn", "lastMushroomPlot", "lastMiningReset", "lastNemesisReset", "lastPaperStripReset", "lastPirateEphemeraReset", "lastPirateInsultReset", "lastPlusSignUnlock", "lastQuartetAscension", "lastQuartetRequest", "lastSecondFloorUnlock", "lastShadowForgeUnlockAdventure", "lastSkateParkReset", "lastStillBeatingSpleen", "lastTavernAscension", "lastTavernSquare", "lastTelescopeReset", "lastTempleAdventures", "lastTempleButtonsUnlock", "lastTempleUnlock", "lastThingWithNoNameDefeated", "lastTowelAscension", "lastTr4pz0rQuest", "lastTrainsetConfiguration", "lastVioletFogMap", "lastVoteMonsterTurn", "lastWartDinseyDefeated", "lastWuTangDefeated", "lastYearbookCameraAscension", "lastZapperWand", "lastZapperWandExplosionDay", "lawOfAveragesCost", "legacyPoints", "libramSummons", "lightsOutAutomation", "louvreDesiredGoal", "louvreGoal", "lovebugsAridDesert", "lovebugsBeachBuck", "lovebugsBooze", "lovebugsChroner", "lovebugsCoinspiracy", "lovebugsCyrpt", "lovebugsFreddy", "lovebugsFunFunds", "lovebugsHoboNickel", "lovebugsItemDrop", "lovebugsMeat", "lovebugsMeatDrop", "lovebugsMoxie", "lovebugsMuscle", "lovebugsMysticality", "lovebugsOilPeak", "lovebugsOrcChasm", "lovebugsPowder", "lovebugsWalmart", "lttQuestDifficulty", "lttQuestStageCount", "manaBurnSummonThreshold", "manaBurningThreshold", "manaBurningTrigger", "manorDrawerCount", "manualOfNumberologyCost", "mapToKokomoCost", "masksUnlocked", "maximizerMRUSize", "maximizerCombinationLimit", "maximizerEquipmentLevel", "maximizerEquipmentScope", "maximizerMaxPrice", "maximizerPriceLevel", "maxManaBurn", "mayflyExperience", "mayoLevel", "meansuckerPrice", "merkinVocabularyMastery", "miniAdvClass", "miniKiwiAiolisUsed", "miniMartinisDrunk", "moleTunnelLevel", "mothershipProgress", "mpAutoRecovery", "mpAutoRecoveryTarget", "munchiesPillsUsed", "mushroomGardenCropLevel", "nanopolymerSpiderWebsUsed", "nextAprilBandTurn", "nextParanormalActivity", "nextQuantumFamiliarOwnerId", "nextQuantumFamiliarTurn", "noobPoints", "noobDeferredPoints", "noodleSummons", "nsContestants1", "nsContestants2", "nsContestants3", "nuclearAutumnPoints", "numericSwagger", "nunsVisits", "oilPeakProgress", "optimalSwagger", "optimisticCandleProgress", "palindomeDudesDefeated", "parasolUsed", "peaceTurkeyIndex", "pendingMapReflections", "pingpongSkill", "pirateRealmPlasticPiratesDefeated", "pirateRealmShipsDestroyed", "pirateRealmStormsEscaped", "pirateSwagger", "plantingDay", "plumberBadgeCost", "plumberCostumeCost", "plumberPoints", "poolSharkCount", "poolSkill", "powerPillProgress", "primaryLabGooIntensity", "prismaticSummons", "procrastinatorLanguageFluency", "promptAboutCrafting", "puzzleChampBonus", "pyramidPosition", "quantumPoints", "reagentSummons", "reanimatorArms", "reanimatorLegs", "reanimatorSkulls", "reanimatorWeirdParts", "reanimatorWings", "recentLocations", "redSnapperProgress", "relayPort", "relocatePygmyJanitor", "relocatePygmyLawyer", "rockinRobinProgress", "romanCandelabraRedCasts", "romanCandelabraBlueCasts", "romanCandelabraYellowCasts", "romanCandelabraGreenCasts", "romanCandelabraPurpleCasts", "ROMOfOptimalityCost", "rumpelstiltskinKidsRescued", "rumpelstiltskinTurnsUsed", "rwbMonsterCount", "safariSwagger", "sausageGrinderUnits", "schoolOfHardKnocksDiplomaCost", "schoolSwagger", "scrapbookCharges", "screechCombats", "scriptMRULength", "seaodesFound", "SeasoningSwagger", "sexChanges", "shenInitiationDay", "shockingLickCharges", "singleFamiliarRun", "skillBurn3", "skillBurn90", "skillBurn153", "skillBurn154", "skillBurn155", "skillBurn236", "skillBurn237", "skillBurn1019", "skillBurn5017", "skillBurn6014", "skillBurn6015", "skillBurn6016", "skillBurn6020", "skillBurn6021", "skillBurn6022", "skillBurn6023", "skillBurn6024", "skillBurn6026", "skillBurn6028", "skillBurn7323", "skillBurn14008", "skillBurn14028", "skillBurn14038", "skillBurn15011", "skillBurn15028", "skillBurn17005", "skillBurn22034", "skillBurn22035", "skillBurn23301", "skillBurn23302", "skillBurn23303", "skillBurn23304", "skillBurn23305", "skillBurn23306", "skillLevel46", "skillLevel47", "skillLevel48", "skillLevel117", "skillLevel118", "skillLevel121", "skillLevel128", "skillLevel134", "skillLevel135", "skillLevel144", "skillLevel180", "skillLevel188", "skillLevel227", "skillLevel7254", "slimelingFullness", "slimelingStacksDropped", "slimelingStacksDue", "smoresEaten", "smutOrcNoncombatProgress", "sneakyPetePoints", "snojoMoxieWins", "snojoMuscleWins", "snojoMysticalityWins", "sourceAgentsDefeated", "sourceEnlightenment", "sourceInterval", "sourcePoints", "sourceTerminalGram", "sourceTerminalPram", "sourceTerminalSpam", "spaceBabyLanguageFluency", "spacePirateLanguageFluency", "spelunkyNextNoncombat", "spelunkySacrifices", "spelunkyWinCount", "spookyPuttyCopiesMade", "spookyVHSTapeMonsterTurn", "statbotUses", "sugarCounter4178", "sugarCounter4179", "sugarCounter4180", "sugarCounter4181", "sugarCounter4182", "sugarCounter4183", "sugarCounter4191", "summonAnnoyanceCost", "sweat", "tacoDanCocktailSauce", "tacoDanFishMeat", "takerSpaceAnchor", "takerSpaceGold", "takerSpaceMast", "takerSpaceRum", "takerSpaceSilk", "takerSpaceSpice", "tavernLayout", "telescopeUpgrades", "tempuraSummons", "timeSpinnerMedals", "timesRested", "tomeSummons", "totalCharitableDonations", "trainsetPosition", "turtleBlessingTurns", "twinPeakProgress", "twoCRSPoints", "unicornHornInflation", "universalSeasoningCost", "usable1HWeapons", "usable1xAccs", "usable2HWeapons", "usable3HWeapons", "usableAccessories", "usableHats", "usableOffhands", "usableOther", "usablePants", "usableShirts", "valueOfAdventure", "valueOfInventory", "valueOfStill", "valueOfTome", "vintnerCharge", "vintnerWineLevel", "violetFogGoal", "walfordBucketProgress", "warehouseProgress", "welcomeBackAdv", "wereProfessorBite", "wereProfessorKick", "wereProfessorLiver", "wereProfessorPoints", "wereProfessorRend", "wereProfessorResearchPoints", "wereProfessorStomach", "wereProfessorTransformTurns", "whetstonesUsed", "wolfPigsEvicted", "wolfTurnsUsed", "writingDesksDefeated", "xoSkeleltonXProgress", "xoSkeleltonOProgress", "yearbookCameraAscensions", "yearbookCameraUpgrades", "youRobotBody", "youRobotBottom", "youRobotLeft", "youRobotPoints", "youRobotRight", "youRobotTop", "zeppelinProtestors", "zigguratLianas", "zombiePoints", "_absintheDrops", "_abstractionDropsCrown", "_aguaDrops", "_xenomorphCharge", "_ancestralRecallCasts", "_antihangoverBonus", "_aprilBandInstruments", "_aprilBandSaxophoneUses", "_aprilBandTomUses", "_aprilBandTubaUses", "_aprilBandStaffUses", "_aprilBandPiccoloUses", "_astralDrops", "_augSkillsCast", "_assertYourAuthorityCast", "_automatedFutureManufactures", "_autumnatonQuests", "_backUpUses", "_badlyRomanticArrows", "_badgerCharge", "_balefulHowlUses", "_banderRunaways", "_bastilleCheese", "_bastilleGames", "_bastilleGameTurn", "_bastilleLastCheese", "_batWingsCauldronUsed", "_batWingsFreeFights", "_batWingsRestUsed", "_batWingsSwoopUsed", "_beanCannonUses", "_bearHugs", "_beerLensDrops", "_bellydancerPickpockets", "_benettonsCasts", "_birdsSoughtToday", "_bookOfFactsWishes", "_bookOfFactsTatters", "_boomBoxFights", "_boomBoxSongsLeft", "_bootStomps", "_boxingGloveArrows", "_brickoEyeSummons", "_brickoFights", "_campAwayCloudBuffs", "_campAwaySmileBuffs", "_candyEggsDeviled", "_candySummons", "_captainHagnkUsed", "_carnieCandyDrops", "_carnivorousPottedPlantWins", "_carrotNoseDrops", "_catBurglarCharge", "_catBurglarHeistsComplete", "_cheerleaderSteam", "_chestXRayUsed", "_chibiAdventures", "_chipBags", "_chocolateCigarsUsed", "_chocolateCoveredPingPongBallsUsed", "_chocolateSculpturesUsed", "_chocolatesUsed", "_chronolithActivations", "_chronolithNextCost", "_cinchUsed", "_cinchoRests", "_circadianRhythmsAdventures", "_clanFortuneConsultUses", "_clipartSummons", "_cloversPurchased", "_coldMedicineConsults", "_coldMedicineEquipmentTaken", "_companionshipCasts", "_cookbookbatCrafting", "_cookbookbatCombatsUntilNewQuest", "_cosmicBowlingSkillsUsed", "_crimbo21ColdResistance", "_cyberFreeFights", "_cyberZone1Turns", "_cyberZone2Turns", "_cyberZone3Turns", "_dailySpecialPrice", "_dartsLeft", "_daycareGymScavenges", "_daycareRecruits", "_deckCardsDrawn", "_deluxeKlawSummons", "_demandSandwich", "_detectiveCasesCompleted", "_disavowed", "_dnaPotionsMade", "_donhosCasts", "_douseFoeUses", "_dreamJarDrops", "_drunkPygmyBanishes", "_edDefeats", "_edLashCount", "_eldritchTentaclesFoughtToday", "_elfGuardCookingUsed", "_elronsCasts", "_enamorangs", "_energyCollected", "_expertCornerCutterUsed", "_extraTimeUsed", "_favorRareSummons", "_feastUsed", "_feelinTheRhythm", "_feelPrideUsed", "_feelExcitementUsed", "_feelHatredUsed", "_feelLonelyUsed", "_feelNervousUsed", "_feelEnvyUsed", "_feelDisappointedUsed", "_feelSuperiorUsed", "_feelLostUsed", "_feelNostalgicUsed", "_feelPeacefulUsed", "_fingertrapArrows", "_fireExtinguisherCharge", "_fragrantHerbsUsed", "_freeBeachWalksUsed", "_frButtonsPressed", "_fudgeWaspFights", "_gapBuffs", "_garbageFireDrops", "_garbageFireDropsCrown", "_genieFightsUsed", "_genieWishesUsed", "_gibbererAdv", "_gibbererCharge", "_gingerbreadCityTurns", "_glarkCableUses", "_glitchMonsterFights", "_gnomeAdv", "_godLobsterFights", "_goldenMoneyCharge", "_gongDrops", "_gothKidCharge", "_gothKidFights", "_greyYouAdventures", "_grimBrotherCharge", "_grimFairyTaleDrops", "_grimFairyTaleDropsCrown", "_grimoireConfiscatorSummons", "_grimoireGeekySummons", "_grimstoneMaskDrops", "_grimstoneMaskDropsCrown", "_grooseCharge", "_grooseDrops", "_grubbyWoolDrops", "_guzzlrDeliveries", "_guzzlrGoldDeliveries", "_guzzlrPlatinumDeliveries", "_hareAdv", "_hareCharge", "_highTopPumps", "_hipsterAdv", "_hoardedCandyDropsCrown", "_hoboUnderlingSummons", "_holidayMultitaskingUsed", "_holoWristDrops", "_holoWristProgress", "_hotAshesDrops", "_hotJellyUses", "_hotTubSoaks", "_humanMuskUses", "_iceballUses", "_inigosCasts", "_ironTricornHeadbuttUsed", "_jerksHealthMagazinesUsed", "_jiggleCheese", "_jiggleCream", "_jiggleLife", "_jiggleSteak", "_jitbCharge", "_juneCleaverAdvs", "_juneCleaverFightsLeft", "_juneCleaverEncounters", "_juneCleaverStench", "_juneCleaverSpooky", "_juneCleaverSleaze", "_juneCleaverHot", "_juneCleaverCold", "_juneCleaverSkips", "_jungDrops", "_kgbClicksUsed", "_kgbDispenserUses", "_kgbTranquilizerDartUses", "_klawSummons", "_kloopCharge", "_kloopDrops", "_kolhsAdventures", "_kolhsSavedByTheBell", "_lastDailyDungeonRoom", "_lastSausageMonsterTurn", "_lastZomboEye", "_latteRefillsUsed", "_lawOfAveragesUsed", "_leafblowerML", "_leafLassosCrafted", "_leafMonstersFought", "_leavesBurned", "_legionJackhammerCrafting", "_llamaCharge", "_longConUsed", "_lovebugsBeachBuck", "_lovebugsChroner", "_lovebugsCoinspiracy", "_lovebugsFreddy", "_lovebugsFunFunds", "_lovebugsHoboNickel", "_lovebugsWalmart", "_loveChocolatesUsed", "_lynyrdSnareUses", "_machineTunnelsAdv", "_macrometeoriteUses", "_mafiaThumbRingAdvs", "_mapToACandyRichBlockDrops", "_mayamRests", "_mayflowerDrops", "_mayflySummons", "_mcHugeLargeAvalancheUses", "_mcHugeLargeSkiPlowUses", "_mcHugeLargeSlashUses", "_mediumSiphons", "_meteoriteAdesUsed", "_meteorShowerUses", "_micrometeoriteUses", "_mildEvilPerpetrated", "_mimicEggsDonated", "_mimicEggsObtained", "_miniKiwiDrops", "_miniMartiniDrops", "_monkeyPawWishesUsed", "_monsterHabitatsFightsLeft", "_monsterHabitatsRecalled", "_monstersMapped", "_mushroomGardenFights", "_nanorhinoCharge", "_navelRunaways", "_neverendingPartyFreeTurns", "_newYouQuestSharpensDone", "_newYouQuestSharpensToDo", "_nextColdMedicineConsult", "_nextQuantumAlignment", "_nightmareFuelCharges", "_noobSkillCount", "_nuclearStockpileUsed", "_oilExtracted", "_oldSchoolCocktailCraftingUsed", "_olfactionsUsed", "_optimisticCandleDropsCrown", "_oreDropsCrown", "_otoscopeUsed", "_oysterEggsFound", "_pantsgivingBanish", "_pantsgivingCount", "_pantsgivingCrumbs", "_pantsgivingFullness", "_pasteDrops", "_peteJukeboxFixed", "_peteJumpedShark", "_petePeeledOut", "_photoBoothEffects", "_photoBoothEquipment", "_pieDrops", "_piePartsCount", "_pirateRealmGold", "_pirateRealmGrog", "_pirateRealmGrub", "_pirateRealmGuns", "_pirateRealmIslandMonstersDefeated", "_pirateRealmSailingTurns", "_pirateRealmShipSpeed", "_pixieCharge", "_pocketProfessorLectures", "_poisonArrows", "_pokeGrowFertilizerDrops", "_poolGames", "_powderedGoldDrops", "_powderedMadnessUses", "_powerfulGloveBatteryPowerUsed", "_powerPillDrops", "_powerPillUses", "_precisionCasts", "_questPartyFairItemsOpened", "_radlibSummons", "_raindohCopiesMade", "_rapidPrototypingUsed", "_raveStealCount", "_reflexHammerUsed", "_resolutionAdv", "_resolutionRareSummons", "_riftletAdv", "_robinEggDrops", "_roboDrops", "_rogueProgramCharge", "_romanticFightsLeft", "_saberForceMonsterCount", "_saberForceUses", "_saberMod", "_saltGrainsConsumed", "_sandwormCharge", "_saplingsPlanted", "_sausageFights", "_sausagesEaten", "_sausagesMade", "_sealFigurineUses", "_sealScreeches", "_sealsSummoned", "_shadowBricksUsed", "_shadowRiftCombats", "_shatteringPunchUsed", "_shortOrderCookCharge", "_shrubCharge", "_slimeVialsHarvested", "_sloppyDinerBeachBucks", "_smilesOfMrA", "_smithsnessSummons", "_snojoFreeFights", "_snojoParts", "_snokebombUsed", "_snowconeSummons", "_snowglobeDrops", "_snowmanHatPlaceUsed", "_snowSuitCount", "_sourceTerminalDigitizeMonsterCount", "_sourceTerminalDigitizeUses", "_sourceTerminalDuplicateUses", "_sourceTerminalEnhanceUses", "_sourceTerminalExtrudes", "_sourceTerminalPortscanUses", "_spaceFurDropsCrown", "_spacegatePlanetIndex", "_spacegateTurnsLeft", "_spaceJellyfishDrops", "_speakeasyDrinksDrunk", "_speakeasyFreeFights", "_spelunkerCharges", "_spelunkingTalesDrops", "_spikolodonSpikeUses", "_spiritOfTheMountainsAdvs", "_spookyJellyUses", "_stackLumpsUses", "_steamCardDrops", "_stickerSummons", "_stinkyCheeseCount", "_stressBallSqueezes", "_sugarSummons", "_surprisinglySweetSlashUsed", "_surprisinglySweetStabUsed", "_sweatOutSomeBoozeUsed", "_taffyRareSummons", "_taffyYellowSummons", "_tearawayPantsAdvs", "_thanksgettingFoodsEaten", "_thingfinderCasts", "_thinknerdPackageDrops", "_thorsPliersCrafting", "_timeHelmetAdv", "_timeSpinnerMinutesUsed", "_tokenDrops", "_transponderDrops", "_turkeyBlastersUsed", "_turkeyBooze", "_turkeyMuscle", "_turkeyMyst", "_turkeyMoxie", "_unaccompaniedMinerUsed", "_unconsciousCollectiveCharge", "_universalSeasoningsUsed", "_universeCalculated", "_universeImploded", "_usedReplicaBatoomerang", "_vampyreCloakeFormUses", "_villainLairProgress", "_vitachocCapsulesUsed", "_vmaskAdv", "_voidFreeFights", "_volcanoItem1", "_volcanoItem2", "_volcanoItem3", "_volcanoItemCount1", "_volcanoItemCount2", "_volcanoItemCount3", "_voteFreeFights", "_VYKEACompanionLevel", "_warbearAutoAnvilCrafting", "_waxGlobDrops", "_whiteRiceDrops", "_witchessFights", "_xoHugsUsed", "_yellowPixelDropsCrown", "_zapCount", "_zombieSmashPocketsUsed", "lastNoncombat15", "lastNoncombat257", "lastNoncombat270", "lastNoncombat273", "lastNoncombat280", "lastNoncombat297", "lastNoncombat322", "lastNoncombat323", "lastNoncombat324", "lastNoncombat341", "lastNoncombat343", "lastNoncombat384", "lastNoncombat386", "lastNoncombat391", "lastNoncombat405", "lastNoncombat406", "lastNoncombat439", "lastNoncombat440", "lastNoncombat441", "lastNoncombat450", "lastNoncombat533", "lastNoncombat539", "lastNoncombat540", "lastNoncombat541", "lastNoncombat588", "lastNoncombat589", "lastNoncombat590", "lastNoncombat591", "lastNoncombat592"];
  var monsterProperties = ["beGregariousMonster", "bodyguardChatMonster", "cameraMonster", "chateauMonster", "clumsinessGroveBoss", "crappyCameraMonster", "crudeMonster", "enamorangMonster", "envyfishMonster", "glacierOfJerksBoss", "holdHandsMonster", "iceSculptureMonster", "lastCopyableMonster", "longConMonster", "maelstromOfLoversBoss", "makeFriendsMonster", "merkinLockkeyMonster", "monkeyPointMonster", "motifMonster", "nosyNoseMonster", "olfactedMonster", "photocopyMonster", "rainDohMonster", "romanticTarget", "rufusDesiredEntity", "rwbMonster", "screencappedMonster", "spookyPuttyMonster", "spookyVHSTapeMonster", "stenchCursedMonster", "superficiallyInterestedMonster", "waxMonster", "yearbookCameraTarget", "_cookbookbatQuestMonster", "_gallapagosMonster", "_jiggleCreamedMonster", "_latteMonster", "_monsterHabitatsMonster", "_nanorhinoBanishedMonster", "_newYouQuestMonster", "_prankCardMonster", "_relativityMonster", "_saberForceMonster", "_sourceTerminalDigitizeMonster", "_trickCoinMonster", "_voteMonster"];
  var locationProperties = ["autumnatonQuestLocation", "currentJunkyardLocation", "doctorBagQuestLocation", "ghostLocation", "guzzlrQuestLocation", "lastAdventure", "nextAdventure", "nextSpookyravenElizabethRoom", "nextSpookyravenStephenRoom", "rwbLocation", "sourceOracleTarget", "_cookbookbatQuestLastLocation", "_floundryBassLocation", "_floundryCarpLocation", "_floundryCodLocation", "_floundryHatchetfishLocation", "_floundryTroutLocation", "_floundryTunaLocation", "_lastPirateRealmIsland", "_sotParcelLocation"];
  var stringProperties = ["autoLogin", "browserBookmarks", "chatFontSize", "combatHotkey0", "combatHotkey1", "combatHotkey2", "combatHotkey3", "combatHotkey4", "combatHotkey5", "combatHotkey6", "combatHotkey7", "combatHotkey8", "combatHotkey9", "commandBufferGCLI", "commandBufferTabbedChat", "commandLineNamespace", "dailyDeedsOptions", "defaultBorderColor", "displayName", "externalEditor", "getBreakfast", "headerStates", "highlightList", "http.proxyHost", "http.proxyPassword", "http.proxyPort", "http.proxyUser", "https.proxyHost", "https.proxyPassword", "https.proxyPort", "https.proxyUser", "initialDesktop", "initialFrames", "lastRelayUpdate", "lastUserAgent", "lastUsername", "logPreferenceChangeFilter", "loginScript", "loginServerName", "loginWindowLogo", "logoutScript", "pingDefaultTestPage", "pingLatest", "pingLoginAbort", "pingLoginCheck", "pingLoginFail", "pingLongest", "pingShortest", "pingTestPage", "previousNotifyList", "previousUpdateVersion", "saveState", "saveStateActive", "scriptList", "swingLookAndFeel", "userAgent", "8BitColor", "afterAdventureScript", "antiScientificMethod", "autoOlfact", "autoPutty", "autumnatonUpgrades", "backupCameraMode", "banishedMonsters", "banishedPhyla", "banishingShoutMonsters", "batmanStats", "batmanZone", "batmanUpgrades", "battleAction", "beachHeadsUnlocked", "beastSkillsAvailable", "beastSkillsKnown", "beforePVPScript", "betweenBattleScript", "boomBoxSong", "breakfastAlways", "breakfastHardcore", "breakfastSoftcore", "buffBotCasting", "buyScript", "cargoPocketsEmptied", "cargoPocketScraps", "chatbotScript", "chatPlayerScript", "chibiName", "choiceAdventureScript", "chosenTrip", "clanFortuneReply1", "clanFortuneReply2", "clanFortuneReply3", "clanFortuneWord1", "clanFortuneWord2", "clanFortuneWord3", "counterScript", "copperheadClubHazard", "crimbo23ArmoryControl", "crimbo23BarControl", "crimbo23CafeControl", "crimbo23CottageControl", "crimbo23FoundryControl", "crimbotChassis", "crimbotArm", "crimbotPropulsion", "crystalBallPredictions", "csServicesPerformed", "currentAstralTrip", "currentDistillateMods", "currentEasyBountyItem", "currentHardBountyItem", "currentHippyStore", "currentJunkyardTool", "currentLlamaForm", "currentMood", "currentPVPSeason", "currentPvpVictories", "currentSpecialBountyItem", "currentSITSkill", "customCombatScript", "cyrusAdjectives", "defaultFlowerLossMessage", "defaultFlowerWinMessage", "demonName1", "demonName2", "demonName3", "demonName4", "demonName5", "demonName6", "demonName7", "demonName8", "demonName9", "demonName10", "demonName11", "demonName12", "demonName13", "dinseyGatorStenchDamage", "dinseyRollercoasterStats", "duckAreasCleared", "duckAreasSelected", "edPiece", "enamorangMonsterTurn", "ensorcelee", "EVEDirections", "everfullDartPerks", "extraCosmeticModifiers", "familiarScript", "forbiddenStores", "gameProBossSpecialPower", "gooseReprocessed", "grimoireSkillsHardcore", "grimoireSkillsSoftcore", "grimstoneMaskPath", "guzzlrQuestClient", "guzzlrQuestTier", "harvestGardenHardcore", "harvestGardenSoftcore", "hpAutoRecoveryItems", "invalidBuffMessage", "jickSwordModifier", "juneCleaverQueue", "kingLiberatedScript", "lassoTraining", "lastAdventureContainer", "lastAdventureTrail", "lastBangPotion819", "lastBangPotion820", "lastBangPotion821", "lastBangPotion822", "lastBangPotion823", "lastBangPotion824", "lastBangPotion825", "lastBangPotion826", "lastBangPotion827", "lastChanceBurn", "lastChessboard", "lastCombatEnvironments", "lastDwarfDiceRolls", "lastDwarfDigitRunes", "lastDwarfEquipmentRunes", "lastDwarfFactoryItem118", "lastDwarfFactoryItem119", "lastDwarfFactoryItem120", "lastDwarfFactoryItem360", "lastDwarfFactoryItem361", "lastDwarfFactoryItem362", "lastDwarfFactoryItem363", "lastDwarfFactoryItem364", "lastDwarfFactoryItem365", "lastDwarfFactoryItem910", "lastDwarfFactoryItem3199", "lastDwarfOfficeItem3208", "lastDwarfOfficeItem3209", "lastDwarfOfficeItem3210", "lastDwarfOfficeItem3211", "lastDwarfOfficeItem3212", "lastDwarfOfficeItem3213", "lastDwarfOfficeItem3214", "lastDwarfOreRunes", "lastDwarfHopper1", "lastDwarfHopper2", "lastDwarfHopper3", "lastDwarfHopper4", "lastEncounter", "lastMacroError", "lastMessageId", "lastPaperStrip3144", "lastPaperStrip4138", "lastPaperStrip4139", "lastPaperStrip4140", "lastPaperStrip4141", "lastPaperStrip4142", "lastPaperStrip4143", "lastPaperStrip4144", "lastPirateEphemera", "lastPorkoBoard", "lastPorkoPayouts", "lastPorkoExpected", "lastSlimeVial3885", "lastSlimeVial3886", "lastSlimeVial3887", "lastSlimeVial3888", "lastSlimeVial3889", "lastSlimeVial3890", "lastSlimeVial3891", "lastSlimeVial3892", "lastSlimeVial3893", "lastSlimeVial3894", "lastSlimeVial3895", "lastSlimeVial3896", "lastSelectedFaxbot", "lastSuccessfulFaxbot", "latteIngredients", "latteModifier", "latteUnlocks", "ledCandleMode", "libramSkillsHardcore", "libramSkillsSoftcore", "louvreOverride", "lovePotion", "lttQuestName", "maximizerList", "maximizerMRUList", "mayoInMouth", "mayoMinderSetting", "merkinQuestPath", "mimicEggMonsters", "mineLayout1", "mineLayout2", "mineLayout3", "mineLayout4", "mineLayout5", "mineLayout6", "mpAutoRecoveryItems", "nextDistillateMods", "nextQuantumFamiliarName", "nextQuantumFamiliarOwner", "noncombatForcers", "nsChallenge2", "nsChallenge3", "nsChallenge4", "nsChallenge5", "nsTowerDoorKeysUsed", "oceanAction", "oceanDestination", "parkaMode", "pastaThrall1", "pastaThrall2", "pastaThrall3", "pastaThrall4", "pastaThrall5", "pastaThrall6", "pastaThrall7", "pastaThrall8", "peteMotorbikeTires", "peteMotorbikeGasTank", "peteMotorbikeHeadlight", "peteMotorbikeCowling", "peteMotorbikeMuffler", "peteMotorbikeSeat", "pieStuffing", "plantingDate", "plantingLength", "plantingScript", "plumberCostumeWorn", "pokefamBoosts", "postAscensionScript", "preAscensionScript", "questClumsinessGrove", "questDoctorBag", "questECoBucket", "questESlAudit", "questESlBacteria", "questESlCheeseburger", "questESlCocktail", "questESlDebt", "questESlFish", "questESlMushStash", "questESlSalt", "questESlSprinkles", "questESpClipper", "questESpEVE", "questESpFakeMedium", "questESpGore", "questESpJunglePun", "questESpOutOfOrder", "questESpSerum", "questESpSmokes", "questEStFishTrash", "questEStGiveMeFuel", "questEStNastyBears", "questEStSocialJusticeI", "questEStSocialJusticeII", "questEStSuperLuber", "questEStWorkWithFood", "questEStZippityDooDah", "questEUNewYou", "questF01Primordial", "questF02Hyboria", "questF03Future", "questF04Elves", "questF05Clancy", "questG01Meatcar", "questG02Whitecastle", "questG03Ego", "questG04Nemesis", "questG05Dark", "questG06Delivery", "questG07Myst", "questG08Moxie", "questG09Muscle", "questGlacierOfJerks", "questGuzzlr", "questI01Scapegoat", "questI02Beat", "questL02Larva", "questL03Rat", "questL04Bat", "questL05Goblin", "questL06Friar", "questL07Cyrptic", "questL08Trapper", "questL09Topping", "questL10Garbage", "questL11Black", "questL11Business", "questL11Curses", "questL11Desert", "questL11Doctor", "questL11MacGuffin", "questL11Manor", "questL11Palindome", "questL11Pyramid", "questL11Ron", "questL11Shen", "questL11Spare", "questL11Worship", "questL12HippyFrat", "questL12War", "questL13Final", "questL13Warehouse", "questLTTQuestByWire", "questM01Untinker", "questM02Artist", "questM03Bugbear", "questM05Toot", "questM06Gourd", "questM07Hammer", "questM08Baker", "questM09Rocks", "questM10Azazel", "questM11Postal", "questM12Pirate", "questM13Escape", "questM14Bounty", "questM15Lol", "questM16Temple", "questM17Babies", "questM18Swamp", "questM19Hippy", "questM20Necklace", "questM21Dance", "questM22Shirt", "questM23Meatsmith", "questM24Doc", "questM25Armorer", "questM26Oracle", "questMaelstromOfLovers", "questPAGhost", "questRufus", "questS01OldGuy", "questS02Monkees", "raveCombo1", "raveCombo2", "raveCombo3", "raveCombo4", "raveCombo5", "raveCombo6", "recoveryScript", "relayCounters", "retroCapeSuperhero", "retroCapeWashingInstructions", "royalty", "rufusQuestTarget", "rufusQuestType", "scriptMRUList", "seahorseName", "shadowLabyrinthGoal", "shadowRiftIngress", "shrubGarland", "shrubGifts", "shrubLights", "shrubTopper", "sideDefeated", "sidequestArenaCompleted", "sidequestFarmCompleted", "sidequestJunkyardCompleted", "sidequestLighthouseCompleted", "sidequestNunsCompleted", "sidequestOrchardCompleted", "skateParkStatus", "snowsuit", "sourceTerminalChips", "sourceTerminalEducate1", "sourceTerminalEducate2", "sourceTerminalEnquiry", "sourceTerminalEducateKnown", "sourceTerminalEnhanceKnown", "sourceTerminalEnquiryKnown", "sourceTerminalExtrudeKnown", "spadingData", "spadingScript", "speakeasyName", "spelunkyStatus", "spelunkyUpgrades", "spookyravenRecipeUsed", "stationaryButton1", "stationaryButton2", "stationaryButton3", "stationaryButton4", "stationaryButton5", "streamCrossDefaultTarget", "sweetSynthesisBlacklist", "telescope1", "telescope2", "telescope3", "telescope4", "telescope5", "testudinalTeachings", "textColors", "thanksMessage", "tomeSkillsHardcore", "tomeSkillsSoftcore", "trackVoteMonster", "trackedMonsters", "trackedPhyla", "trainsetConfiguration", "umbrellaState", "umdLastObtained", "vintnerWineEffect", "vintnerWineName", "vintnerWineType", "violetFogLayout", "volcanoMaze1", "volcanoMaze2", "volcanoMaze3", "volcanoMaze4", "volcanoMaze5", "warProgress", "watchedPreferences", "wereProfessorAdvancedResearch", "workteaClue", "yourFavoriteBird", "yourFavoriteBirdMods", "youRobotCPUUpgrades", "_automatedFutureSide", "_bastilleBoosts", "_bastilleChoice1", "_bastilleChoice2", "_bastilleChoice3", "_bastilleCurrentStyles", "_bastilleEnemyCastle", "_bastilleEnemyName", "_bastilleLastBattleResults", "_bastilleLastEncounter", "_bastilleStats", "_beachHeadsUsed", "_beachLayout", "_beachMinutes", "_birdOfTheDay", "_birdOfTheDayMods", "_bittycar", "_campAwaySmileBuffSign", "_citizenZone", "_citizenZoneMods", "_cloudTalkMessage", "_cloudTalkSmoker", "_coatOfPaintModifier", "_cupidBowFamiliars", "_currentDartboard", "_cyberZone1Defense", "_cyberZone1Hacker", "_cyberZone1Owner", "_cyberZone2Defense", "_cyberZone2Hacker", "_cyberZone2Owner", "_cyberZone3Defense", "_cyberZone3Hacker", "_cyberZone3Owner", "_deckCardsSeen", "_feastedFamiliars", "_floristPlantsUsed", "_frAreasUnlocked", "_frHoursLeft", "_frMonstersKilled", "_futuristicCollarModifier", "_futuristicHatModifier", "_futuristicShirtModifier", "_horsery", "_horseryCrazyMox", "_horseryCrazyMus", "_horseryCrazyMys", "_horseryCrazyName", "_horseryCurrentName", "_horseryDarkName", "_horseryNormalName", "_horseryPaleName", "_jickJarAvailable", "_jiggleCheesedMonsters", "_lastCombatActions", "_lastCombatStarted", "_locketMonstersFought", "_mayamSymbolsUsed", "_mummeryMods", "_mummeryUses", "_newYouQuestSkill", "_noHatModifier", "_pantogramModifier", "_pirateRealmCrewmate", "_pirateRealmCrewmate1", "_pirateRealmCrewmate2", "_pirateRealmCrewmate3", "_pirateRealmShip", "_pottedPowerPlant", "_questESp", "_questPartyFair", "_questPartyFairProgress", "_questPartyFairQuest", "_questPirateRealm", "_roboDrinks", "_roninStoragePulls", "_savageBeastMods", "_spacegateAnimalLife", "_spacegateCoordinates", "_spacegateGear", "_spacegateHazards", "_spacegateIntelligentLife", "_spacegatePlanetName", "_spacegatePlantLife", "_stolenAccordions", "_tempRelayCounters", "_timeSpinnerFoodAvailable", "_trickOrTreatBlock", "_unknownEasyBountyItem", "_unknownHardBountyItem", "_unknownSpecialBountyItem", "_untakenEasyBountyItem", "_untakenHardBountyItem", "_untakenSpecialBountyItem", "_userMods", "_villainLairColor", "_villainLairKey", "_voteLocal1", "_voteLocal2", "_voteLocal3", "_voteLocal4", "_voteMonster1", "_voteMonster2", "_voteModifier", "_VYKEACompanionType", "_VYKEACompanionRune", "_VYKEACompanionName"];
  var numericOrStringProperties = ["statusEngineering", "statusGalley", "statusMedbay", "statusMorgue", "statusNavigation", "statusScienceLab", "statusSonar", "statusSpecialOps", "statusWasteProcessing", "choiceAdventure2", "choiceAdventure3", "choiceAdventure4", "choiceAdventure5", "choiceAdventure6", "choiceAdventure7", "choiceAdventure8", "choiceAdventure9", "choiceAdventure10", "choiceAdventure11", "choiceAdventure12", "choiceAdventure14", "choiceAdventure15", "choiceAdventure16", "choiceAdventure17", "choiceAdventure18", "choiceAdventure19", "choiceAdventure20", "choiceAdventure21", "choiceAdventure22", "choiceAdventure23", "choiceAdventure24", "choiceAdventure25", "choiceAdventure26", "choiceAdventure27", "choiceAdventure28", "choiceAdventure29", "choiceAdventure40", "choiceAdventure41", "choiceAdventure42", "choiceAdventure45", "choiceAdventure46", "choiceAdventure47", "choiceAdventure71", "choiceAdventure72", "choiceAdventure73", "choiceAdventure74", "choiceAdventure75", "choiceAdventure76", "choiceAdventure77", "choiceAdventure86", "choiceAdventure87", "choiceAdventure88", "choiceAdventure89", "choiceAdventure90", "choiceAdventure91", "choiceAdventure105", "choiceAdventure106", "choiceAdventure107", "choiceAdventure108", "choiceAdventure109", "choiceAdventure110", "choiceAdventure111", "choiceAdventure112", "choiceAdventure113", "choiceAdventure114", "choiceAdventure115", "choiceAdventure116", "choiceAdventure117", "choiceAdventure118", "choiceAdventure120", "choiceAdventure123", "choiceAdventure125", "choiceAdventure126", "choiceAdventure127", "choiceAdventure129", "choiceAdventure131", "choiceAdventure132", "choiceAdventure135", "choiceAdventure136", "choiceAdventure137", "choiceAdventure138", "choiceAdventure139", "choiceAdventure140", "choiceAdventure141", "choiceAdventure142", "choiceAdventure143", "choiceAdventure144", "choiceAdventure145", "choiceAdventure146", "choiceAdventure147", "choiceAdventure148", "choiceAdventure149", "choiceAdventure151", "choiceAdventure152", "choiceAdventure153", "choiceAdventure154", "choiceAdventure155", "choiceAdventure156", "choiceAdventure157", "choiceAdventure158", "choiceAdventure159", "choiceAdventure160", "choiceAdventure161", "choiceAdventure162", "choiceAdventure163", "choiceAdventure164", "choiceAdventure165", "choiceAdventure166", "choiceAdventure167", "choiceAdventure168", "choiceAdventure169", "choiceAdventure170", "choiceAdventure171", "choiceAdventure172", "choiceAdventure177", "choiceAdventure178", "choiceAdventure180", "choiceAdventure181", "choiceAdventure182", "choiceAdventure184", "choiceAdventure185", "choiceAdventure186", "choiceAdventure187", "choiceAdventure188", "choiceAdventure189", "choiceAdventure191", "choiceAdventure197", "choiceAdventure198", "choiceAdventure199", "choiceAdventure200", "choiceAdventure201", "choiceAdventure202", "choiceAdventure203", "choiceAdventure204", "choiceAdventure205", "choiceAdventure206", "choiceAdventure207", "choiceAdventure208", "choiceAdventure211", "choiceAdventure212", "choiceAdventure213", "choiceAdventure214", "choiceAdventure215", "choiceAdventure216", "choiceAdventure217", "choiceAdventure218", "choiceAdventure219", "choiceAdventure220", "choiceAdventure221", "choiceAdventure222", "choiceAdventure223", "choiceAdventure224", "choiceAdventure225", "choiceAdventure230", "choiceAdventure272", "choiceAdventure273", "choiceAdventure276", "choiceAdventure277", "choiceAdventure278", "choiceAdventure279", "choiceAdventure280", "choiceAdventure281", "choiceAdventure282", "choiceAdventure283", "choiceAdventure284", "choiceAdventure285", "choiceAdventure286", "choiceAdventure287", "choiceAdventure288", "choiceAdventure289", "choiceAdventure290", "choiceAdventure291", "choiceAdventure292", "choiceAdventure293", "choiceAdventure294", "choiceAdventure295", "choiceAdventure296", "choiceAdventure297", "choiceAdventure298", "choiceAdventure299", "choiceAdventure302", "choiceAdventure303", "choiceAdventure304", "choiceAdventure305", "choiceAdventure306", "choiceAdventure307", "choiceAdventure308", "choiceAdventure309", "choiceAdventure310", "choiceAdventure311", "choiceAdventure317", "choiceAdventure318", "choiceAdventure319", "choiceAdventure320", "choiceAdventure321", "choiceAdventure322", "choiceAdventure326", "choiceAdventure327", "choiceAdventure328", "choiceAdventure329", "choiceAdventure330", "choiceAdventure331", "choiceAdventure332", "choiceAdventure333", "choiceAdventure334", "choiceAdventure335", "choiceAdventure336", "choiceAdventure337", "choiceAdventure338", "choiceAdventure339", "choiceAdventure340", "choiceAdventure341", "choiceAdventure342", "choiceAdventure343", "choiceAdventure344", "choiceAdventure345", "choiceAdventure346", "choiceAdventure347", "choiceAdventure348", "choiceAdventure349", "choiceAdventure350", "choiceAdventure351", "choiceAdventure352", "choiceAdventure353", "choiceAdventure354", "choiceAdventure355", "choiceAdventure356", "choiceAdventure357", "choiceAdventure358", "choiceAdventure360", "choiceAdventure361", "choiceAdventure362", "choiceAdventure363", "choiceAdventure364", "choiceAdventure365", "choiceAdventure366", "choiceAdventure367", "choiceAdventure372", "choiceAdventure376", "choiceAdventure387", "choiceAdventure388", "choiceAdventure389", "choiceAdventure390", "choiceAdventure391", "choiceAdventure392", "choiceAdventure393", "choiceAdventure395", "choiceAdventure396", "choiceAdventure397", "choiceAdventure398", "choiceAdventure399", "choiceAdventure400", "choiceAdventure401", "choiceAdventure402", "choiceAdventure403", "choiceAdventure423", "choiceAdventure424", "choiceAdventure425", "choiceAdventure426", "choiceAdventure427", "choiceAdventure428", "choiceAdventure429", "choiceAdventure430", "choiceAdventure431", "choiceAdventure432", "choiceAdventure433", "choiceAdventure435", "choiceAdventure438", "choiceAdventure439", "choiceAdventure442", "choiceAdventure444", "choiceAdventure445", "choiceAdventure446", "choiceAdventure447", "choiceAdventure448", "choiceAdventure449", "choiceAdventure451", "choiceAdventure452", "choiceAdventure453", "choiceAdventure454", "choiceAdventure455", "choiceAdventure456", "choiceAdventure457", "choiceAdventure458", "choiceAdventure460", "choiceAdventure461", "choiceAdventure462", "choiceAdventure463", "choiceAdventure464", "choiceAdventure465", "choiceAdventure467", "choiceAdventure468", "choiceAdventure469", "choiceAdventure470", "choiceAdventure471", "choiceAdventure472", "choiceAdventure473", "choiceAdventure474", "choiceAdventure475", "choiceAdventure477", "choiceAdventure478", "choiceAdventure480", "choiceAdventure483", "choiceAdventure484", "choiceAdventure485", "choiceAdventure486", "choiceAdventure488", "choiceAdventure489", "choiceAdventure490", "choiceAdventure491", "choiceAdventure496", "choiceAdventure497", "choiceAdventure502", "choiceAdventure503", "choiceAdventure504", "choiceAdventure505", "choiceAdventure506", "choiceAdventure507", "choiceAdventure509", "choiceAdventure510", "choiceAdventure511", "choiceAdventure512", "choiceAdventure513", "choiceAdventure514", "choiceAdventure515", "choiceAdventure517", "choiceAdventure518", "choiceAdventure519", "choiceAdventure521", "choiceAdventure522", "choiceAdventure523", "choiceAdventure527", "choiceAdventure528", "choiceAdventure529", "choiceAdventure530", "choiceAdventure531", "choiceAdventure532", "choiceAdventure533", "choiceAdventure534", "choiceAdventure535", "choiceAdventure536", "choiceAdventure538", "choiceAdventure539", "choiceAdventure542", "choiceAdventure543", "choiceAdventure544", "choiceAdventure546", "choiceAdventure548", "choiceAdventure549", "choiceAdventure550", "choiceAdventure551", "choiceAdventure552", "choiceAdventure553", "choiceAdventure554", "choiceAdventure556", "choiceAdventure557", "choiceAdventure558", "choiceAdventure559", "choiceAdventure560", "choiceAdventure561", "choiceAdventure562", "choiceAdventure563", "choiceAdventure564", "choiceAdventure565", "choiceAdventure566", "choiceAdventure567", "choiceAdventure568", "choiceAdventure569", "choiceAdventure571", "choiceAdventure572", "choiceAdventure573", "choiceAdventure574", "choiceAdventure575", "choiceAdventure576", "choiceAdventure577", "choiceAdventure578", "choiceAdventure579", "choiceAdventure581", "choiceAdventure582", "choiceAdventure583", "choiceAdventure584", "choiceAdventure594", "choiceAdventure595", "choiceAdventure596", "choiceAdventure597", "choiceAdventure598", "choiceAdventure599", "choiceAdventure600", "choiceAdventure603", "choiceAdventure604", "choiceAdventure616", "choiceAdventure634", "choiceAdventure640", "choiceAdventure654", "choiceAdventure655", "choiceAdventure656", "choiceAdventure657", "choiceAdventure658", "choiceAdventure664", "choiceAdventure669", "choiceAdventure670", "choiceAdventure671", "choiceAdventure672", "choiceAdventure673", "choiceAdventure674", "choiceAdventure675", "choiceAdventure676", "choiceAdventure677", "choiceAdventure678", "choiceAdventure679", "choiceAdventure681", "choiceAdventure683", "choiceAdventure684", "choiceAdventure685", "choiceAdventure686", "choiceAdventure687", "choiceAdventure688", "choiceAdventure689", "choiceAdventure690", "choiceAdventure691", "choiceAdventure692", "choiceAdventure693", "choiceAdventure694", "choiceAdventure695", "choiceAdventure696", "choiceAdventure697", "choiceAdventure698", "choiceAdventure700", "choiceAdventure701", "choiceAdventure705", "choiceAdventure706", "choiceAdventure707", "choiceAdventure708", "choiceAdventure709", "choiceAdventure710", "choiceAdventure711", "choiceAdventure712", "choiceAdventure713", "choiceAdventure714", "choiceAdventure715", "choiceAdventure716", "choiceAdventure717", "choiceAdventure721", "choiceAdventure725", "choiceAdventure729", "choiceAdventure733", "choiceAdventure737", "choiceAdventure741", "choiceAdventure745", "choiceAdventure749", "choiceAdventure753", "choiceAdventure771", "choiceAdventure778", "choiceAdventure780", "choiceAdventure781", "choiceAdventure783", "choiceAdventure784", "choiceAdventure785", "choiceAdventure786", "choiceAdventure787", "choiceAdventure788", "choiceAdventure789", "choiceAdventure791", "choiceAdventure793", "choiceAdventure794", "choiceAdventure795", "choiceAdventure796", "choiceAdventure797", "choiceAdventure803", "choiceAdventure805", "choiceAdventure808", "choiceAdventure809", "choiceAdventure813", "choiceAdventure815", "choiceAdventure830", "choiceAdventure832", "choiceAdventure833", "choiceAdventure834", "choiceAdventure835", "choiceAdventure837", "choiceAdventure838", "choiceAdventure839", "choiceAdventure840", "choiceAdventure841", "choiceAdventure842", "choiceAdventure851", "choiceAdventure852", "choiceAdventure853", "choiceAdventure854", "choiceAdventure855", "choiceAdventure856", "choiceAdventure857", "choiceAdventure858", "choiceAdventure866", "choiceAdventure873", "choiceAdventure875", "choiceAdventure876", "choiceAdventure877", "choiceAdventure878", "choiceAdventure879", "choiceAdventure880", "choiceAdventure881", "choiceAdventure882", "choiceAdventure888", "choiceAdventure889", "choiceAdventure918", "choiceAdventure919", "choiceAdventure920", "choiceAdventure921", "choiceAdventure923", "choiceAdventure924", "choiceAdventure925", "choiceAdventure926", "choiceAdventure927", "choiceAdventure928", "choiceAdventure929", "choiceAdventure930", "choiceAdventure931", "choiceAdventure932", "choiceAdventure940", "choiceAdventure941", "choiceAdventure942", "choiceAdventure943", "choiceAdventure944", "choiceAdventure945", "choiceAdventure946", "choiceAdventure950", "choiceAdventure955", "choiceAdventure957", "choiceAdventure958", "choiceAdventure959", "choiceAdventure960", "choiceAdventure961", "choiceAdventure962", "choiceAdventure963", "choiceAdventure964", "choiceAdventure965", "choiceAdventure966", "choiceAdventure970", "choiceAdventure973", "choiceAdventure974", "choiceAdventure975", "choiceAdventure976", "choiceAdventure977", "choiceAdventure979", "choiceAdventure980", "choiceAdventure981", "choiceAdventure982", "choiceAdventure983", "choiceAdventure988", "choiceAdventure989", "choiceAdventure993", "choiceAdventure998", "choiceAdventure1000", "choiceAdventure1003", "choiceAdventure1005", "choiceAdventure1006", "choiceAdventure1007", "choiceAdventure1008", "choiceAdventure1009", "choiceAdventure1010", "choiceAdventure1011", "choiceAdventure1012", "choiceAdventure1013", "choiceAdventure1015", "choiceAdventure1016", "choiceAdventure1017", "choiceAdventure1018", "choiceAdventure1019", "choiceAdventure1020", "choiceAdventure1021", "choiceAdventure1022", "choiceAdventure1023", "choiceAdventure1026", "choiceAdventure1027", "choiceAdventure1028", "choiceAdventure1029", "choiceAdventure1030", "choiceAdventure1031", "choiceAdventure1032", "choiceAdventure1033", "choiceAdventure1034", "choiceAdventure1035", "choiceAdventure1036", "choiceAdventure1037", "choiceAdventure1038", "choiceAdventure1039", "choiceAdventure1040", "choiceAdventure1041", "choiceAdventure1042", "choiceAdventure1044", "choiceAdventure1045", "choiceAdventure1046", "choiceAdventure1048", "choiceAdventure1051", "choiceAdventure1052", "choiceAdventure1053", "choiceAdventure1054", "choiceAdventure1055", "choiceAdventure1056", "choiceAdventure1057", "choiceAdventure1059", "choiceAdventure1060", "choiceAdventure1061", "choiceAdventure1062", "choiceAdventure1065", "choiceAdventure1067", "choiceAdventure1068", "choiceAdventure1069", "choiceAdventure1070", "choiceAdventure1071", "choiceAdventure1073", "choiceAdventure1077", "choiceAdventure1080", "choiceAdventure1081", "choiceAdventure1082", "choiceAdventure1083", "choiceAdventure1084", "choiceAdventure1085", "choiceAdventure1091", "choiceAdventure1094", "choiceAdventure1095", "choiceAdventure1096", "choiceAdventure1097", "choiceAdventure1102", "choiceAdventure1106", "choiceAdventure1107", "choiceAdventure1108", "choiceAdventure1110", "choiceAdventure1114", "choiceAdventure1115", "choiceAdventure1116", "choiceAdventure1118", "choiceAdventure1119", "choiceAdventure1120", "choiceAdventure1121", "choiceAdventure1122", "choiceAdventure1123", "choiceAdventure1171", "choiceAdventure1172", "choiceAdventure1173", "choiceAdventure1174", "choiceAdventure1175", "choiceAdventure1193", "choiceAdventure1195", "choiceAdventure1196", "choiceAdventure1197", "choiceAdventure1198", "choiceAdventure1199", "choiceAdventure1202", "choiceAdventure1203", "choiceAdventure1204", "choiceAdventure1205", "choiceAdventure1206", "choiceAdventure1207", "choiceAdventure1208", "choiceAdventure1209", "choiceAdventure1210", "choiceAdventure1211", "choiceAdventure1212", "choiceAdventure1213", "choiceAdventure1214", "choiceAdventure1215", "choiceAdventure1219", "choiceAdventure1222", "choiceAdventure1223", "choiceAdventure1224", "choiceAdventure1225", "choiceAdventure1226", "choiceAdventure1227", "choiceAdventure1228", "choiceAdventure1229", "choiceAdventure1236", "choiceAdventure1237", "choiceAdventure1238", "choiceAdventure1239", "choiceAdventure1240", "choiceAdventure1241", "choiceAdventure1242", "choiceAdventure1243", "choiceAdventure1244", "choiceAdventure1245", "choiceAdventure1246", "choiceAdventure1247", "choiceAdventure1248", "choiceAdventure1249", "choiceAdventure1250", "choiceAdventure1251", "choiceAdventure1252", "choiceAdventure1253", "choiceAdventure1254", "choiceAdventure1255", "choiceAdventure1256", "choiceAdventure1266", "choiceAdventure1280", "choiceAdventure1281", "choiceAdventure1282", "choiceAdventure1283", "choiceAdventure1284", "choiceAdventure1285", "choiceAdventure1286", "choiceAdventure1287", "choiceAdventure1288", "choiceAdventure1289", "choiceAdventure1290", "choiceAdventure1291", "choiceAdventure1292", "choiceAdventure1293", "choiceAdventure1294", "choiceAdventure1295", "choiceAdventure1296", "choiceAdventure1297", "choiceAdventure1298", "choiceAdventure1299", "choiceAdventure1300", "choiceAdventure1301", "choiceAdventure1302", "choiceAdventure1303", "choiceAdventure1304", "choiceAdventure1305", "choiceAdventure1307", "choiceAdventure1310", "choiceAdventure1312", "choiceAdventure1313", "choiceAdventure1314", "choiceAdventure1315", "choiceAdventure1316", "choiceAdventure1317", "choiceAdventure1318", "choiceAdventure1319", "choiceAdventure1321", "choiceAdventure1322", "choiceAdventure1323", "choiceAdventure1324", "choiceAdventure1325", "choiceAdventure1326", "choiceAdventure1327", "choiceAdventure1328", "choiceAdventure1332", "choiceAdventure1333", "choiceAdventure1335", "choiceAdventure1340", "choiceAdventure1341", "choiceAdventure1345", "choiceAdventure1389", "choiceAdventure1392", "choiceAdventure1397", "choiceAdventure1399", "choiceAdventure1405", "choiceAdventure1411", "choiceAdventure1415", "choiceAdventure1427", "choiceAdventure1428", "choiceAdventure1429", "choiceAdventure1430", "choiceAdventure1431", "choiceAdventure1432", "choiceAdventure1433", "choiceAdventure1434", "choiceAdventure1436", "choiceAdventure1460", "choiceAdventure1461", "choiceAdventure1467", "choiceAdventure1468", "choiceAdventure1469", "choiceAdventure1470", "choiceAdventure1471", "choiceAdventure1472", "choiceAdventure1473", "choiceAdventure1474", "choiceAdventure1475", "choiceAdventure1486", "choiceAdventure1487", "choiceAdventure1488", "choiceAdventure1489", "choiceAdventure1491", "choiceAdventure1494", "choiceAdventure1505", "choiceAdventure1528", "choiceAdventure1534", "choiceAdventure1538", "choiceAdventure1539", "choiceAdventure1540", "choiceAdventure1541", "choiceAdventure1542", "choiceAdventure1545", "choiceAdventure1546", "choiceAdventure1547", "choiceAdventure1548", "choiceAdventure1549", "choiceAdventure1550"];
  var familiarProperties = ["commaFamiliar", "cupidBowLastFamiliar", "nextQuantumFamiliar", "stillsuitFamiliar"];
  var statProperties = ["nsChallenge1", "snojoSetting"];
  var phylumProperties = ["dnaSyringe", "locketPhylum", "redSnapperPhylum", "_circadianRhythmsPhylum"];
  var itemProperties = ["commerceGhostItem", "doctorBagQuestItem", "dolphinItem", "guzzlrQuestBooze", "implementGlitchItem", "muffinOnOrder", "rufusDesiredArtifact", "rufusDesiredItems", "shenQuestItem", "trapperOre", "walfordBucketItem", "_cookbookbatQuestIngredient", "_dailySpecial", "_pirateRealmCurio"];
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/propertyTyping.js
  
  var booleanPropertiesSet = new Set(booleanProperties);
  var numericPropertiesSet = new Set(numericProperties);
  var numericOrStringPropertiesSet = new Set(numericOrStringProperties);
  var stringPropertiesSet = new Set(stringProperties);
  var locationPropertiesSet = new Set(locationProperties);
  var monsterPropertiesSet = new Set(monsterProperties);
  var familiarPropertiesSet = new Set(familiarProperties);
  var statPropertiesSet = new Set(statProperties);
  var phylumPropertiesSet = new Set(phylumProperties);
  var itemPropertiesSet = new Set(itemProperties);
  /**
   * Determine whether a property has a boolean value
   *
   * @param property Property to check
   * @returns Whether the supplied property has a boolean value
   */
  
  function isBooleanProperty(property) {
    return booleanPropertiesSet.has(property);
  }
  /**
   * Determine whether a property has a numeric value
   *
   * @param property Property to check
   * @returns Whether the supplied property has a numeric value
   */
  
  function propertyTyping_isNumericProperty(property) {
    return numericPropertiesSet.has(property);
  }
  /**
   * Determine whether a property has a numeric or string value
   *
   * @param property Property to check
   * @returns Whether the supplied property has a numeric or string value
   */
  
  function isNumericOrStringProperty(property) {
    return numericOrStringPropertiesSet.has(property);
  }
  /**
   * Determine whether a property has a string value
   *
   * @param property Property to check
   * @returns Whether the supplied property has a string value
   */
  
  function isStringProperty(property) {
    return stringPropertiesSet.has(property);
  }
  /**
   * Determine whether a property has a Location value
   *
   * @param property Property to check
   * @returns Whether the supplied property has a Location value
   */
  
  function isLocationProperty(property) {
    return locationPropertiesSet.has(property);
  }
  /**
   * Determine whether a property has a Monster value
   *
   * @param property Property to check
   * @returns Whether the supplied property has a Monster value
   */
  
  function isMonsterProperty(property) {
    return monsterPropertiesSet.has(property);
  }
  /**
   * Determine whether a property has a Familiar value
   *
   * @param property Property to check
   * @returns Whether the supplied property has a Familiar value
   */
  
  function isFamiliarProperty(property) {
    return familiarPropertiesSet.has(property);
  }
  /**
   * Determine whether a property has a Stat value
   *
   * @param property Property to check
   * @returns Whether the supplied property has a Stat value
   */
  
  function isStatProperty(property) {
    return statPropertiesSet.has(property);
  }
  /**
   * Determine whether a property has a Phylum value
   *
   * @param property Property to check
   * @returns Whether the supplied property has a Phylum value
   */
  
  function isPhylumProperty(property) {
    return phylumPropertiesSet.has(property);
  }
  /**
   * Determine whether a property has an Item value
   *
   * @param property Property to check
   * @returns Whether the supplied property has an Item value
   */
  
  function isItemProperty(property) {
    return itemPropertiesSet.has(property);
  }
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/property.js
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  
  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
  
  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  
  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
  
  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
  
  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
  
  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
  
  
  
  
  var createPropertyGetter = transform => (property, default_) => {
    var value = (0,external_kolmafia_namespaceObject.getProperty)(property);
  
    if (default_ !== undefined && value === "") {
      return default_;
    }
  
    return transform(value, property);
  };
  
  var createMafiaClassPropertyGetter = (Type, toType) => createPropertyGetter(value => {
    if (value === "") return null;
    var v = toType(value);
    return v === Type.none ? null : v;
  });
  
  var getString = createPropertyGetter(value => value);
  var getCommaSeparated = createPropertyGetter(value => value.split(/, ?/));
  var getBoolean = createPropertyGetter(value => value === "true");
  var getNumber = createPropertyGetter(value => Number(value));
  var getBounty = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Bounty, external_kolmafia_namespaceObject.toBounty);
  var getClass = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Class, external_kolmafia_namespaceObject.toClass);
  var getCoinmaster = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Coinmaster, external_kolmafia_namespaceObject.toCoinmaster);
  var getEffect = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Effect, external_kolmafia_namespaceObject.toEffect);
  var getElement = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Element, external_kolmafia_namespaceObject.toElement);
  var getFamiliar = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Familiar, external_kolmafia_namespaceObject.toFamiliar);
  var getItem = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Item, external_kolmafia_namespaceObject.toItem);
  var getLocation = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Location, external_kolmafia_namespaceObject.toLocation);
  var getMonster = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Monster, external_kolmafia_namespaceObject.toMonster);
  var getPhylum = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Phylum, external_kolmafia_namespaceObject.toPhylum);
  var getServant = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Servant, external_kolmafia_namespaceObject.toServant);
  var getSkill = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Skill, external_kolmafia_namespaceObject.toSkill);
  var getSlot = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Slot, external_kolmafia_namespaceObject.toSlot);
  var getStat = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Stat, external_kolmafia_namespaceObject.toStat);
  var getThrall = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Thrall, external_kolmafia_namespaceObject.toThrall);
  /**
   * Gets the value of a mafia property, either built in or custom
   *
   * @param property Name of the property
   * @param _default Default value for the property to take if not set
   * @returns Value of the mafia property
   */
  
  function property_get(property, _default) {
    var value = getString(property); // Handle known properties.
  
    if (isBooleanProperty(property)) {
      var _getBoolean;
  
      return (_getBoolean = getBoolean(property, _default)) !== null && _getBoolean !== void 0 ? _getBoolean : false;
    } else if (propertyTyping_isNumericProperty(property)) {
      var _getNumber;
  
      return (_getNumber = getNumber(property, _default)) !== null && _getNumber !== void 0 ? _getNumber : 0;
    } else if (isNumericOrStringProperty(property)) {
      return value.match(/^\d+$/) ? parseInt(value) : value;
    } else if (isLocationProperty(property)) {
      return getLocation(property, _default);
    } else if (isMonsterProperty(property)) {
      return getMonster(property, _default);
    } else if (isFamiliarProperty(property)) {
      return getFamiliar(property, _default);
    } else if (isStatProperty(property)) {
      return getStat(property, _default);
    } else if (isPhylumProperty(property)) {
      return getPhylum(property, _default);
    } else if (isItemProperty(property)) {
      return getItem(property, _default);
    } else if (isStringProperty(property)) {
      return value === "" && _default !== undefined ? _default : value;
    } // Not a KnownProperty from here on out.
  
  
    if (_default instanceof external_kolmafia_namespaceObject.Location) {
      return getLocation(property, _default);
    } else if (_default instanceof external_kolmafia_namespaceObject.Monster) {
      return getMonster(property, _default);
    } else if (_default instanceof external_kolmafia_namespaceObject.Familiar) {
      return getFamiliar(property, _default);
    } else if (_default instanceof external_kolmafia_namespaceObject.Stat) {
      return getStat(property, _default);
    } else if (_default instanceof external_kolmafia_namespaceObject.Phylum) {
      return getPhylum(property, _default);
    } else if (_default instanceof external_kolmafia_namespaceObject.Item) {
      return getItem(property, _default);
    } else if (typeof _default === "boolean") {
      return value === "true" ? true : value === "false" ? false : _default;
    } else if (typeof _default === "number") {
      return value === "" ? _default : parseInt(value);
    } else if (value === "") {
      return _default === undefined ? "" : _default;
    } else {
      return value;
    }
  }
  /**
   * Sets the value of a mafia property, either built in or custom
   *
   * @param property Name of the property
   * @param value Value to give the property
   * @returns Value that was set
   */
  
  function _set(property, value) {
    var stringValue = value === null ? "" : value.toString();
    (0,external_kolmafia_namespaceObject.setProperty)(property, stringValue);
    return value;
  }
  /**
   * Increment a property
   *
   * @param property Numeric property to increment
   * @param delta Number by which to increment
   * @param max Maximum value to set
   * @returns New value
   */
  
  
  
  function increment(property) {
    var delta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
    var value = property_get(property);
    if (!isNumericProperty(property)) return value;
    var nextValue = Math.min(max, value + delta);
    return _set(property, nextValue);
  }
  /**
   * Decrement a property
   *
   * @param property Numeric property to decrement
   * @param delta Number by which to decrement
   * @param min Maximum value to set
   * @returns New value
   */
  
  function decrement(property) {
    var delta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var min = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
    var value = property_get(property);
    if (!isNumericProperty(property)) return value;
    var nextValue = Math.max(min, value - delta);
    return _set(property, nextValue);
  }
  /**
   * Sets the value of a set of mafia properties
   *
   * @param properties Set of properties
   */
  
  function setProperties(properties) {
    for (var _i = 0, _Object$entries = Object.entries(properties); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          prop = _Object$entries$_i[0],
          value = _Object$entries$_i[1];
  
      _set(prop, value);
    }
  }
  /**
   * Carries out a callback during which a set of properties will be set as supplied
   *
   * @param properties Properties to set during callback
   * @param callback Callback to execute with set properties
   * @returns Return value of the supplied callback
   */
  
  function withProperties(properties, callback) {
    var propertiesBackup = Object.fromEntries(Object.entries(properties).map(_ref => {
      var _ref2 = _slicedToArray(_ref, 1),
          prop = _ref2[0];
  
      return [prop, property_get(prop)];
    }));
    setProperties(properties);
  
    try {
      return callback();
    } finally {
      setProperties(propertiesBackup);
    }
  }
  /**
   * Carries out a callback during which a property will be set as supplied
   *
   * @param property Property to set during callback
   * @param value Value to set property during callback
   * @param callback Callback to execute with set properties
   * @returns Return value of the supplied callback
   */
  
  function withProperty(property, value, callback) {
    return withProperties(_defineProperty({}, property, value), callback);
  }
  /**
   * Carries out a callback during which a set of choices will be handled as supplied
   *
   * @param choices Choices to set during callback
   * @param callback Callback to execute with set choices
   * @returns Return value of the supplied callback
   */
  
  function withChoices(choices, callback) {
    var properties = Object.fromEntries(Object.entries(choices).map(_ref3 => {
      var _ref4 = _slicedToArray(_ref3, 2),
          choice = _ref4[0],
          option = _ref4[1];
  
      return ["choiceAdventure".concat(choice), option];
    }));
    return withProperties(properties, callback);
  }
  /**
   * Carries out a callback during which a choice will be handled as supplied
   *
   * @param choice Choice to set during callback
   * @param value How to handle choice during callback
   * @param callback Callback to execute with set properties
   * @returns Return value of the supplied callback
   */
  
  function property_withChoice(choice, value, callback) {
    return withChoices(_defineProperty({}, choice, value), callback);
  }
  var PropertiesManager = /*#__PURE__*/function () {
    function PropertiesManager() {
      _classCallCheck(this, PropertiesManager);
  
      _defineProperty(this, "properties", {});
    }
  
    _createClass(PropertiesManager, [{
      key: "storedValues",
      get: function get() {
        return this.properties;
      }
      /**
       * Sets a collection of properties to the given values, storing the old values.
       *
       * @param propertiesToSet A Properties object, keyed by property name.
       */
  
    }, {
      key: "set",
      value: function set(propertiesToSet) {
        for (var _i2 = 0, _Object$entries2 = Object.entries(propertiesToSet); _i2 < _Object$entries2.length; _i2++) {
          var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
              propertyName = _Object$entries2$_i[0],
              propertyValue = _Object$entries2$_i[1];
  
          if (!(propertyName in this.properties)) {
            this.properties[propertyName] = (0,external_kolmafia_namespaceObject.propertyExists)(propertyName) ? property_get(propertyName) : PropertiesManager.EMPTY_PREFERENCE;
          }
  
          _set(propertyName, propertyValue);
        }
      }
      /**
       * Sets a collection of choice adventure properties to the given values, storing the old values.
       *
       * @param choicesToSet An object keyed by choice adventure number.
       */
  
    }, {
      key: "setChoices",
      value: function setChoices(choicesToSet) {
        this.set(Object.fromEntries(Object.entries(choicesToSet).map(_ref5 => {
          var _ref6 = _slicedToArray(_ref5, 2),
              choiceNumber = _ref6[0],
              choiceValue = _ref6[1];
  
          return ["choiceAdventure".concat(choiceNumber), choiceValue];
        })));
      }
      /**
       * Sets a single choice adventure property to the given value, storing the old value.
       *
       * @param choiceToSet The number of the choice adventure to set the property for.
       * @param value The value to assign to that choice adventure.
       */
  
    }, {
      key: "setChoice",
      value: function setChoice(choiceToSet, value) {
        this.setChoices(_defineProperty({}, choiceToSet, value));
      }
      /**
       * Resets the given properties to their original stored value. Does not delete entries from the manager.
       *
       * @param properties Collection of properties to reset.
       */
  
    }, {
      key: "reset",
      value: function reset() {
        for (var _len = arguments.length, properties = new Array(_len), _key = 0; _key < _len; _key++) {
          properties[_key] = arguments[_key];
        }
  
        for (var _i3 = 0, _properties = properties; _i3 < _properties.length; _i3++) {
          var property = _properties[_i3];
          if (!(property in this.properties)) continue;
          var value = this.properties[property];
  
          if (value === PropertiesManager.EMPTY_PREFERENCE) {
            (0,external_kolmafia_namespaceObject.removeProperty)(property);
          } else {
            _set(property, value);
          }
        }
      }
      /**
       * Iterates over all stored values, setting each property back to its original stored value. Does not delete entries from the manager.
       */
  
    }, {
      key: "resetAll",
      value: function resetAll() {
        this.reset.apply(this, _toConsumableArray(Object.keys(this.properties)));
      }
      /**
       * Stops storing the original values of inputted properties.
       *
       * @param properties Properties for the manager to forget.
       */
  
    }, {
      key: "clear",
      value: function clear() {
        for (var _len2 = arguments.length, properties = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          properties[_key2] = arguments[_key2];
        }
  
        for (var _i4 = 0, _properties2 = properties; _i4 < _properties2.length; _i4++) {
          var property = _properties2[_i4];
  
          if (this.properties[property]) {
            delete this.properties[property];
          }
        }
      }
      /**
       * Clears all properties.
       */
  
    }, {
      key: "clearAll",
      value: function clearAll() {
        this.properties = {};
      }
      /**
       * Increases a numeric property to the given value if necessary.
       *
       * @param property The numeric property we want to potentially raise.
       * @param value The minimum value we want that property to have.
       * @returns Whether we needed to change the property.
       */
  
    }, {
      key: "setMinimumValue",
      value: function setMinimumValue(property, value) {
        if (property_get(property, 0) < value) {
          this.set(_defineProperty({}, property, value));
          return true;
        }
  
        return false;
      }
      /**
       * Decrease a numeric property to the given value if necessary.
       *
       * @param property The numeric property we want to potentially lower.
       * @param value The maximum value we want that property to have.
       * @returns Whether we needed to change the property.
       */
  
    }, {
      key: "setMaximumValue",
      value: function setMaximumValue(property, value) {
        if (property_get(property, 0) > value) {
          this.set(_defineProperty({}, property, value));
          return true;
        }
  
        return false;
      }
      /**
       * Creates a new PropertiesManager with identical stored values to this one.
       *
       * @returns A new PropertiesManager, with identical stored values to this one.
       */
  
    }, {
      key: "clone",
      value: function clone() {
        var newGuy = new PropertiesManager();
        newGuy.properties = this.storedValues;
        return newGuy;
      }
      /**
       * Clamps a numeric property, modulating it up or down to fit within a specified range
       *
       * @param property The numeric property to clamp
       * @param min The lower bound for what we want the property to be allowed to be.
       * @param max The upper bound for what we want the property to be allowed to be.
       * @returns Whether we ended up changing the property or not.
       */
  
    }, {
      key: "clamp",
      value: function clamp(property, min, max) {
        if (max < min) return false;
        var start = property_get(property);
        this.setMinimumValue(property, min);
        this.setMaximumValue(property, max);
        return start !== property_get(property);
      }
      /**
       * Determines whether this PropertiesManager has identical stored values to another.
       *
       * @param other The PropertiesManager to compare to this one.
       * @returns Whether their StoredValues are identical.
       */
  
    }, {
      key: "equals",
      value: function equals(other) {
        var thisProps = Object.entries(this.storedValues);
        var otherProps = new Map(Object.entries(other.storedValues));
        if (thisProps.length !== otherProps.size) return false;
  
        for (var _i5 = 0, _thisProps = thisProps; _i5 < _thisProps.length; _i5++) {
          var _thisProps$_i = _slicedToArray(_thisProps[_i5], 2),
              propertyName = _thisProps$_i[0],
              propertyValue = _thisProps$_i[1];
  
          if (otherProps.get(propertyName) === propertyValue) return false;
        }
  
        return true;
      }
      /**
       * Merges a PropertiesManager onto this one, letting the input win in the event that both PropertiesManagers have a value stored.
       *
       * @param other The PropertiesManager to be merged onto this one.
       * @returns A new PropertiesManager with stored values from both its parents.
       */
  
    }, {
      key: "merge",
      value: function merge(other) {
        var newGuy = new PropertiesManager();
        newGuy.properties = _objectSpread(_objectSpread({}, this.properties), other.properties);
        return newGuy;
      }
      /**
       * Merges an arbitrary collection of PropertiesManagers, letting the rightmost PropertiesManager win in the event of verlap.
       *
       * @param mergees The PropertiesManagers to merge together.
       * @returns A PropertiesManager that is just an amalgam of all the constituents.
       */
  
    }], [{
      key: "merge",
      value: function merge() {
        for (var _len3 = arguments.length, mergees = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          mergees[_key3] = arguments[_key3];
        }
  
        if (mergees.length === 0) return new PropertiesManager();
        return mergees.reduce((a, b) => a.merge(b));
      }
    }]);
  
    return PropertiesManager;
  }();
  
  _defineProperty(PropertiesManager, "EMPTY_PREFERENCE", Symbol("empty preference"));
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/utils.js
  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = utils_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  
  function utils_slicedToArray(arr, i) { return utils_arrayWithHoles(arr) || utils_iterableToArrayLimit(arr, i) || utils_unsupportedIterableToArray(arr, i) || utils_nonIterableRest(); }
  
  function utils_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function utils_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
  
  function utils_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
  
  function utils_toConsumableArray(arr) { return utils_arrayWithoutHoles(arr) || utils_iterableToArray(arr) || utils_unsupportedIterableToArray(arr) || utils_nonIterableSpread(); }
  
  function utils_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function utils_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return utils_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return utils_arrayLikeToArray(o, minLen); }
  
  function utils_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  
  function utils_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return utils_arrayLikeToArray(arr); }
  
  function utils_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  /**
   * Type guard against null value
   *
   * @param value Value that could be null
   * @returns Confirmation that the value is not null
   */
  function utils_notNull(value) {
    return value !== null;
  }
  /**
   * Type guard against nullish value
   *
   * @param value Value that could be null or undefined
   * @returns Confirmation that the value is not null nor undefined
   */
  
  function notNullish(value) {
    return utils_notNull(value) && value !== undefined;
  }
  /**
   * Parse string to number, stripping commas
   *
   * @param n Numberical string to parse
   * @returns Numerical value of string
   */
  
  function parseNumber(n) {
    return Number.parseInt(n.replace(/,/g, ""));
  }
  /**
   * Clamp a number between lower and upper bounds.
   *
   * @param n Number to clamp.
   * @param min Lower bound.
   * @param max Upper bound.
   * @returns Clamped value
   */
  
  function utils_clamp(n, min, max) {
    return Math.max(min, Math.min(max, n));
  }
  /**
   * Split an {@param array} into {@param chunkSize} sized chunks
   *
   * @param array Array to split
   * @param chunkSize Size of chunk
   * @returns Split array
   */
  
  function chunk(array, chunkSize) {
    var result = [];
  
    for (var i = 0; i < array.length; i += chunkSize) {
      result.push(array.slice(i, i + chunkSize));
    }
  
    return result;
  }
  /**
   * Count distinct values in an array
   *
   * @param array Array of values
   * @returns Map of distinct values to count
   */
  
  function arrayToCountedMap(array) {
    if (!Array.isArray(array)) return array;
    var map = new Map();
    array.forEach(item => {
      map.set(item, (map.get(item) || 0) + 1);
    });
    return map;
  }
  /**
   * Turn map of distinct values to count into array of values
   *
   * @param map Map to turn into array
   * @returns Array of values
   */
  
  function countedMapToArray(map) {
    var _ref;
  
    return (_ref = []).concat.apply(_ref, utils_toConsumableArray(utils_toConsumableArray(map).map(_ref2 => {
      var _ref3 = utils_slicedToArray(_ref2, 2),
          item = _ref3[0],
          quantity = _ref3[1];
  
      return Array(quantity).fill(item);
    })));
  }
  /**
   * Stringify a counted map
   *
   * @param map Map of counted values
   * @returns String representing map of counted values
   */
  
  function countedMapToString(map) {
    return utils_toConsumableArray(map).map(_ref4 => {
      var _ref5 = utils_slicedToArray(_ref4, 2),
          item = _ref5[0],
          quantity = _ref5[1];
  
      return "".concat(quantity, " x ").concat(item);
    }).join(", ");
  }
  /**
   * Sum an array of numbers.
   *
   * @param addends Addends to sum.
   * @param x Property or mapping function of addends to sum
   * @returns Sum of numbers
   */
  
  function utils_sum(addends, x) {
    return addends.reduce((subtotal, element) => subtotal + (typeof x === "function" ? x(element) : element[x]), 0);
  }
  /**
   * Sum array of numbers
   *
   * @param addends Numbers to sum
   * @returns Sum of numbers
   */
  
  function sumNumbers(addends) {
    return utils_sum(addends, x => x);
  }
  /**
   * Checks if a given item is in a readonly array, acting as a typeguard.
   *
   * @param item Needle
   * @param array Readonly array haystack
   * @returns Whether the item is in the array, and narrows the type of the item.
   */
  
  function utils_arrayContains(item, array) {
    return array.includes(item);
  }
  /**
   * Checks if two arrays contain the same elements in the same quantity.
   *
   * @param a First array for comparison
   * @param b Second array for comparison
   * @returns Whether the two arrays are equal, irrespective of order.
   */
  
  function setEqual(a, b) {
    var sortedA = utils_toConsumableArray(a).sort();
  
    var sortedB = utils_toConsumableArray(b).sort();
  
    return a.length === b.length && sortedA.every((item, index) => item === sortedB[index]);
  }
  /**
   * Reverses keys and values for a given map
   *
   * @param map Map to invert
   * @returns Inverted map
   */
  
  function invertMap(map) {
    var returnValue = new Map();
  
    var _iterator = _createForOfIteratorHelper(map),
        _step;
  
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _step$value = utils_slicedToArray(_step.value, 2),
            key = _step$value[0],
            value = _step$value[1];
  
        returnValue.set(value, key);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  
    return returnValue;
  }
  /**
   * Splits a string by commas while also respecting escaping commas with a backslash
   *
   * @param str String to split
   * @returns List of tokens
   */
  
  function splitByCommasWithEscapes(str) {
    var returnValue = [];
    var ignoreNext = false;
    var currentString = "";
  
    var _iterator2 = _createForOfIteratorHelper(str.split("")),
        _step2;
  
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var char = _step2.value;
  
        if (char === "\\") {
          ignoreNext = true;
        } else {
          if (char == "," && !ignoreNext) {
            returnValue.push(currentString.trim());
            currentString = "";
          } else {
            currentString += char;
          }
  
          ignoreNext = false;
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  
    returnValue.push(currentString.trim());
    return returnValue;
  }
  /**
   * Find the best element of an array, where "best" is defined by some given criteria.
   *
   * @param array The array to traverse and find the best element of.
   * @param optimizer Either a key on the objects we're looking at that corresponds to numerical values, or a function for mapping these objects to numbers. Essentially, some way of assigning value to the elements of the array.
   * @param reverse Make this true to find the worst element of the array, and false to find the best. Defaults to false.
   * @returns Best element by optimizer function
   */
  
  function maxBy(array, optimizer) {
    var reverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (!array.length) throw new Error("Cannot call maxBy on an empty array!");
  
    if (typeof optimizer === "function") {
      return utils_toConsumableArray(array).reduce((_ref6, other) => {
        var value = _ref6.value,
            item = _ref6.item;
        var otherValue = optimizer(other);
        return value >= otherValue !== reverse ? {
          value: value,
          item: item
        } : {
          value: otherValue,
          item: other
        };
      }, {
        item: array[0],
        value: optimizer(array[0])
      }).item;
    } else {
      return array.reduce((a, b) => a[optimizer] >= b[optimizer] !== reverse ? a : b);
    }
  }
  /**
   * Let Typescript see that you're working with tuples!
   *
   * @param args A spread array to interpret as a tuple
   * @returns The given arg, its type now interpreted as a tuple
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  
  function tuple() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
  
    return args;
  }
  /**
   * Compare arrays shallowly
   *
   * @param left One array to compare
   * @param right The other array to compare
   * @returns Whether the two arrays are shallowly equal
   */
  
  function arrayEquals(left, right) {
    if (left.length !== right.length) return false;
    return left.every((element, index) => element === right[index]);
  }
  /**
   * Used to collapse a Delayed<T, S> object into an entity of type "T" as represented by the object.
   *
   * @param delayedObject Object of type Delayed<T, S> that represents either a value of type T or a function returning a value of type T.
   * @param args The arguments to pass to the delay function
   * @returns The return value of the function, if delayedObject is a function. Otherwise, this returns the original element.
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  
  function undelay(delayedObject) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
  
    return typeof delayedObject === "function" ? delayedObject.apply(void 0, args) : delayedObject;
  }
  /**
   * Makes a byX function, like byStat or byClass
   *
   * @param source A method for finding your stat, or class, or whatever X is in this context
   * @returns A function akin to byStat or byClass; it accepts an object that either is "complete" in the sense that it has a key for every conceivable value, or contains a `default` parameter. If an inappropriate input is provided, returns undefined.
   */
  
  function makeByXFunction(source) {
    return function (options, alternateSource) {
      var _options$val;
  
      var val = undelay(alternateSource !== null && alternateSource !== void 0 ? alternateSource : source);
      if ("default" in options) return (_options$val = options[val]) !== null && _options$val !== void 0 ? _options$val : options.default;
      return options[val];
    };
  }
  /**
   * Flattens an array. Basically replacing Array.prototype.flat for which Rhino doesn't yet have an implementation
   * @deprecated KoLMafia now supports the `flat` and `flatMap` methods
   *
   * @param arr Array to flatten
   * @param depth Number of layers to flatten by; Infinity for a fully flat array
   * @returns Flattened array
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  
  function flat(arr) {
    var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;
    var flatArray = [];
  
    var _iterator3 = _createForOfIteratorHelper(arr),
        _step3;
  
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var item = _step3.value;
  
        if (Array.isArray(item) && depth > 0) {
          var child = flat(item, depth - 1);
          flatArray = flatArray.concat(child);
        } else {
          flatArray.push(item);
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  
    return flatArray;
  }
  /**
   * @param array Array to select from
   * @returns Random item from array
   */
  
  function random(array) {
    return array[Math.floor(Math.random() * array.length)];
  }
  /**
   * Title cases a single word
   *
   * @param word Word to transform
   * @returns Word in title case
   */
  
  var tc = word => word.charAt(0).toUpperCase() + word.slice(1);
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/template-string.js
  
  
  
  var concatTemplateString = function concatTemplateString(literals) {
    for (var _len = arguments.length, placeholders = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      placeholders[_key - 1] = arguments[_key];
    }
  
    return literals.raw.reduce((acc, literal, i) => {
      var _placeholders$i;
  
      return acc + literal + ((_placeholders$i = placeholders[i]) !== null && _placeholders$i !== void 0 ? _placeholders$i : "");
    }, "");
  };
  
  var handleTypeGetError = (Type, error) => {
    var message = "".concat(error);
    var match = message.match(RegExp("Bad ".concat(Type.name.toLowerCase(), " value: .*")));
  
    if (match) {
      (0,external_kolmafia_namespaceObject.print)("".concat(match[0], "; if you're certain that this ").concat(Type.name, " exists and is spelled correctly, please update KoLMafia"), "red");
    } else {
      (0,external_kolmafia_namespaceObject.print)(message);
    }
  };
  
  var createSingleConstant = (Type, converter) => {
    var tagFunction = function tagFunction(literals) {
      for (var _len2 = arguments.length, placeholders = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        placeholders[_key2 - 1] = arguments[_key2];
      }
  
      var input = concatTemplateString.apply(void 0, [literals].concat(placeholders));
  
      try {
        return Type.get(input);
      } catch (error) {
        handleTypeGetError(Type, error);
      }
  
      (0,external_kolmafia_namespaceObject.abort)();
    };
  
    tagFunction.cls = Type;
    tagFunction.none = Type.none;
  
    tagFunction.get = name => {
      var value = converter(name);
      return value === Type.none ? null : value;
    };
  
    return tagFunction;
  };
  
  var createPluralConstant = Type => {
    var tagFunction = function tagFunction(literals) {
      for (var _len3 = arguments.length, placeholders = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        placeholders[_key3 - 1] = arguments[_key3];
      }
  
      var input = concatTemplateString.apply(void 0, [literals].concat(placeholders));
  
      if (input === "") {
        return Type.all();
      }
  
      try {
        return Type.get(splitByCommasWithEscapes(input));
      } catch (error) {
        handleTypeGetError(Type, error);
      }
  
      (0,external_kolmafia_namespaceObject.abort)();
    };
  
    tagFunction.all = () => Type.all();
  
    return tagFunction;
  };
  /**
   * A Bounty specified by name.
   *
   * @category In-game constant
   */
  
  
  var $bounty = createSingleConstant(external_kolmafia_namespaceObject.Bounty, external_kolmafia_namespaceObject.toBounty);
  /**
   * A list of Bounties specified by a comma-separated list of names.
   * For a list of all possible Bounties, leave the template string blank.
   *
   * @category In-game constant
   */
  
  var $bounties = createPluralConstant(external_kolmafia_namespaceObject.Bounty);
  /**
   * A Class specified by name.
   *
   * @category In-game constant
   */
  
  var $class = createSingleConstant(external_kolmafia_namespaceObject.Class, external_kolmafia_namespaceObject.toClass);
  /**
   * A list of Classes specified by a comma-separated list of names.
   * For a list of all possible Classes, leave the template string blank.
   *
   * @category In-game constant
   */
  
  var $classes = createPluralConstant(external_kolmafia_namespaceObject.Class);
  /**
   * A Coinmaster specified by name.
   *
   * @category In-game constant
   */
  
  var $coinmaster = createSingleConstant(external_kolmafia_namespaceObject.Coinmaster, external_kolmafia_namespaceObject.toCoinmaster);
  /**
   * A list of Coinmasters specified by a comma-separated list of names.
   * For a list of all possible Coinmasters, leave the template string blank.
   *
   * @category In-game constant
   */
  
  var $coinmasters = createPluralConstant(external_kolmafia_namespaceObject.Coinmaster);
  /**
   * An Effect specified by name.
   *
   * @category In-game constant
   */
  
  var template_string_$effect = createSingleConstant(external_kolmafia_namespaceObject.Effect, external_kolmafia_namespaceObject.toEffect);
  /**
   * A list of Effects specified by a comma-separated list of names.
   * For a list of all possible Effects, leave the template string blank.
   *
   * @category In-game constant
   */
  
  var $effects = createPluralConstant(external_kolmafia_namespaceObject.Effect);
  /**
   * An Element specified by name.
   *
   * @category In-game constant
   */
  
  var $element = createSingleConstant(external_kolmafia_namespaceObject.Element, external_kolmafia_namespaceObject.toElement);
  /**
   * A list of Elements specified by a comma-separated list of names.
   * For a list of all possible Elements, leave the template string blank.
   *
   * @category In-game constant
   */
  
  var $elements = createPluralConstant(external_kolmafia_namespaceObject.Element);
  /**
   * A Familiar specified by name.
   *
   * @category In-game constant
   */
  
  var template_string_$familiar = createSingleConstant(external_kolmafia_namespaceObject.Familiar, external_kolmafia_namespaceObject.toFamiliar);
  /**
   * A list of Familiars specified by a comma-separated list of names.
   * For a list of all possible Familiars, leave the template string blank.
   *
   * @category In-game constant
   */
  
  var $familiars = createPluralConstant(external_kolmafia_namespaceObject.Familiar);
  /**
   * An Item specified by name.
   *
   * @category In-game constant
   */
  
  var template_string_$item = createSingleConstant(external_kolmafia_namespaceObject.Item, external_kolmafia_namespaceObject.toItem);
  /**
   * A list of Items specified by a comma-separated list of names.
   * For a list of all possible Items, leave the template string blank.
   *
   * @category In-game constant
   */
  
  var template_string_$items = createPluralConstant(external_kolmafia_namespaceObject.Item);
  /**
   * A Location specified by name.
   *
   * @category In-game constant
   */
  
  var $location = createSingleConstant(external_kolmafia_namespaceObject.Location, external_kolmafia_namespaceObject.toLocation);
  /**
   * A list of Locations specified by a comma-separated list of names.
   * For a list of all possible Locations, leave the template string blank.
   *
   * @category In-game constant
   */
  
  var $locations = createPluralConstant(external_kolmafia_namespaceObject.Location);
  /**
   * A Modifier specified by name.
   *
   * @category In-game constant
   */
  
  var $modifier = createSingleConstant(external_kolmafia_namespaceObject.Modifier, external_kolmafia_namespaceObject.toModifier);
  /**
   * A list of Modifiers specified by a comma-separated list of names.
   * For a list of all possible Modifiers, leave the template string blank.
   *
   * @category In-game constant
   */
  
  var $modifiers = createPluralConstant(external_kolmafia_namespaceObject.Modifier);
  /**
   * A Monster specified by name.
   *
   * @category In-game constant
   */
  
  var $monster = createSingleConstant(external_kolmafia_namespaceObject.Monster, external_kolmafia_namespaceObject.toMonster);
  /**
   * A list of Monsters specified by a comma-separated list of names.
   * For a list of all possible Monsters, leave the template string blank.
   *
   * @category In-game constant
   */
  
  var $monsters = createPluralConstant(external_kolmafia_namespaceObject.Monster);
  /**
   * A Path specified by name.
   *
   * @category In-game constant
   */
  
  var $path = createSingleConstant(external_kolmafia_namespaceObject.Path, external_kolmafia_namespaceObject.toPath);
  /**
   * A list of Paths specified by a comma-separated list of names.
   * For a list of all possible Paths, leave the template string blank.
   *
   * @category In-game constant
   */
  
  var $paths = createPluralConstant(external_kolmafia_namespaceObject.Path);
  /**
   * A Phylum specified by name.
   *
   * @category In-game constant
   */
  
  var $phylum = createSingleConstant(external_kolmafia_namespaceObject.Phylum, external_kolmafia_namespaceObject.toPhylum);
  /**
   * A list of Phyla specified by a comma-separated list of names.
   * For a list of all possible Phyla, leave the template string blank.
   *
   * @category In-game constant
   */
  
  var $phyla = createPluralConstant(external_kolmafia_namespaceObject.Phylum);
  /**
   * A Servant specified by name.
   *
   * @category In-game constant
   */
  
  var $servant = createSingleConstant(external_kolmafia_namespaceObject.Servant, external_kolmafia_namespaceObject.toServant);
  /**
   * A list of Servants specified by a comma-separated list of names.
   * For a list of all possible Servants, leave the template string blank.
   *
   * @category In-game constant
   */
  
  var $servants = createPluralConstant(external_kolmafia_namespaceObject.Servant);
  /**
   * A Skill specified by name.
   *
   * @category In-game constant
   */
  
  var template_string_$skill = createSingleConstant(external_kolmafia_namespaceObject.Skill, external_kolmafia_namespaceObject.toSkill);
  /**
   * A list of Skills specified by a comma-separated list of names.
   * For a list of all possible Skills, leave the template string blank.
   *
   * @category In-game constant
   */
  
  var $skills = createPluralConstant(external_kolmafia_namespaceObject.Skill);
  /**
   * A Slot specified by name.
   *
   * @category In-game constant
   */
  
  var $slot = createSingleConstant(external_kolmafia_namespaceObject.Slot, external_kolmafia_namespaceObject.toSlot);
  /**
   * A list of Slots specified by a comma-separated list of names.
   * For a list of all possible Slots, leave the template string blank.
   *
   * @category In-game constant
   */
  
  var $slots = createPluralConstant(external_kolmafia_namespaceObject.Slot);
  /**
   * A Stat specified by name.
   *
   * @category In-game constant
   */
  
  var $stat = createSingleConstant(external_kolmafia_namespaceObject.Stat, external_kolmafia_namespaceObject.toStat);
  /**
   * A list of Stats specified by a comma-separated list of names.
   * For a list of all possible Stats, leave the template string blank.
   *
   * @category In-game constant
   */
  
  var $stats = createPluralConstant(external_kolmafia_namespaceObject.Stat);
  /**
   * A Thrall specified by name.
   *
   * @category In-game constant
   */
  
  var $thrall = createSingleConstant(external_kolmafia_namespaceObject.Thrall, external_kolmafia_namespaceObject.toThrall);
  /**
   * A list of Thralls specified by a comma-separated list of names.
   * For a list of all possible Thralls, leave the template string blank.
   *
   * @category In-game constant
   */
  
  var $thralls = createPluralConstant(external_kolmafia_namespaceObject.Thrall);
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/lib.js
  var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34, _templateObject35, _templateObject36, _templateObject37, _templateObject38, _templateObject39, _templateObject40, _templateObject41, _templateObject42, _templateObject43, _templateObject44, _templateObject45, _templateObject46, _templateObject47, _templateObject48;
  
  function lib_toConsumableArray(arr) { return lib_arrayWithoutHoles(arr) || lib_iterableToArray(arr) || lib_unsupportedIterableToArray(arr) || lib_nonIterableSpread(); }
  
  function lib_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function lib_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  
  function lib_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return lib_arrayLikeToArray(arr); }
  
  function lib_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function lib_createClass(Constructor, protoProps, staticProps) { if (protoProps) lib_defineProperties(Constructor.prototype, protoProps); if (staticProps) lib_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function lib_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
  
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  
  function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
  
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
  
  function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
  
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }
  
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  
  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
  
  function lib_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = lib_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  
  function lib_slicedToArray(arr, i) { return lib_arrayWithHoles(arr) || lib_iterableToArrayLimit(arr, i) || lib_unsupportedIterableToArray(arr, i) || lib_nonIterableRest(); }
  
  function lib_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function lib_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return lib_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return lib_arrayLikeToArray(o, minLen); }
  
  function lib_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function lib_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
  
  function lib_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
  
  function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  /** @module GeneralLibrary */
  
  
  
  
  
  /**
   * Determines the current maximum Accordion Thief songs the player can have in their head
   *
   * @category General
   * @returns Maximum number of songs for player
   */
  
  function getSongLimit() {
    return 3 + (booleanModifier("Four Songs") ? 1 : 0) + numericModifier("Additional Song");
  }
  /**
   * Determine whether the Skill or Effect provided is an Accordion Thief song
   *
   * @category General
   * @param skillOrEffect The Skill or Effect
   * @returns Whether it's a song
   */
  
  function isSong(skillOrEffect) {
    if (skillOrEffect instanceof external_kolmafia_namespaceObject.Effect && skillOrEffect.attributes.includes("song")) {
      return true;
    } else {
      var skill = skillOrEffect instanceof external_kolmafia_namespaceObject.Effect ? (0,external_kolmafia_namespaceObject.toSkill)(skillOrEffect) : skillOrEffect;
      return skill.class === $class(_templateObject || (_templateObject = _taggedTemplateLiteral(["Accordion Thief"]))) && skill.buff;
    }
  }
  /**
   * List all active Effects
   *
   * @category General
   * @returns List of Effects
   */
  
  function getActiveEffects() {
    return Object.keys(myEffects()).map(e => Effect.get(e));
  }
  /**
   * List currently active Accordion Thief songs
   *
   * @category General
   * @returns List of song Effects
   */
  
  function getActiveSongs() {
    return getActiveEffects().filter(isSong);
  }
  /**
   * List number of active Accordion Thief songs
   *
   * @category General
   * @returns Number of songs
   */
  
  function getSongCount() {
    return getActiveSongs().length;
  }
  /**
   * Determine whether player can remember another Accordion Thief song
   *
   * @category General
   * @param quantity Number of songs to test the space for
   * @returns Whether player can remember another song
   */
  
  function canRememberSong() {
    var quantity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    return getSongLimit() - getSongCount() >= quantity;
  }
  /**
   * Determine the locations in which the given monster can be encountered naturally
   *
   * @category General
   * @param monster Monster to find
   * @returns Locations for monster
   */
  
  function getMonsterLocations(monster) {
    return Location.all().filter(location => monster.name in appearanceRates(location));
  }
  /**
   * Determine the player's remaining liver space
   *
   * @category General
   * @returns Remaining liver space
   */
  
  function getRemainingLiver() {
    return (0,external_kolmafia_namespaceObject.inebrietyLimit)() - (0,external_kolmafia_namespaceObject.myInebriety)();
  }
  /**
   * Determine the player's remaining stomach space
   *
   * @category General
   * @returns Remaining stomach space
   */
  
  function getRemainingStomach() {
    return (0,external_kolmafia_namespaceObject.fullnessLimit)() - (0,external_kolmafia_namespaceObject.myFullness)();
  }
  /**
   * Determine the player's remaining spleen space
   *
   * @category General
   * @returns Remaining spleen space
   */
  
  function getRemainingSpleen() {
    return (0,external_kolmafia_namespaceObject.spleenLimit)() - (0,external_kolmafia_namespaceObject.mySpleenUse)();
  }
  /**
   * Determine whether the player "has" any entity which one could feasibly "have".
   *
   * @category General
   * @param thing Thing to check
   * @param quantity Minimum quantity the player must have to pass
   * @returns Whether the player meets the requirements of owning the supplied thing
   */
  
  function lib_have(thing) {
    var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  
    if (thing instanceof external_kolmafia_namespaceObject.Effect) {
      return (0,external_kolmafia_namespaceObject.haveEffect)(thing) >= quantity;
    }
  
    if (thing instanceof external_kolmafia_namespaceObject.Familiar) {
      return (0,external_kolmafia_namespaceObject.haveFamiliar)(thing);
    }
  
    if (thing instanceof external_kolmafia_namespaceObject.Item) {
      return (0,external_kolmafia_namespaceObject.availableAmount)(thing) >= quantity;
    }
  
    if (thing instanceof external_kolmafia_namespaceObject.Servant) {
      return (0,external_kolmafia_namespaceObject.haveServant)(thing);
    }
  
    if (thing instanceof external_kolmafia_namespaceObject.Skill) {
      return (0,external_kolmafia_namespaceObject.haveSkill)(thing);
    }
  
    if (thing instanceof external_kolmafia_namespaceObject.Thrall) {
      var thrall = (0,external_kolmafia_namespaceObject.myThrall)();
      return thrall.id === thing.id && thrall.level >= quantity;
    }
  
    return false;
  }
  /**
   * Determine whether a given item is in the player's campground
   *
   * @category General
   * @param item The Item KoLmafia uses to represent the campground item
   * @returns Whether the item is in the campground
   */
  
  function lib_haveInCampground(item) {
    return Object.keys((0,external_kolmafia_namespaceObject.getCampground)()).map(i => external_kolmafia_namespaceObject.Item.get(i)).includes(item);
  }
  var Wanderer;
  
  (function (Wanderer) {
    Wanderer["Digitize"] = "Digitize Monster";
    Wanderer["Enamorang"] = "Enamorang Monster";
    Wanderer["Familiar"] = "Familiar";
    Wanderer["Holiday"] = "Holiday Monster";
    Wanderer["Kramco"] = "Kramco";
    Wanderer["Nemesis"] = "Nemesis Assassin";
    Wanderer["Portscan"] = "portscan.edu";
    Wanderer["Romantic"] = "Romantic Monster";
    Wanderer["Vote"] = "Vote Monster";
  })(Wanderer || (Wanderer = {}));
  
  var deterministicWanderers = [Wanderer.Digitize, Wanderer.Portscan];
  /**
   * Determine whether the player has the specified counter
   *
   * @param counterName Name of the counter
   * @param minTurns Minimum turns the counter is set to
   * @param maxTurns Maximum turns the counter is set to
   * @category General
   * @returns Whether player has the counter
   */
  
  function haveCounter(counterName) {
    var minTurns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var maxTurns = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500;
    return getCounters(counterName, minTurns, maxTurns) === counterName;
  }
  /**
   * Determine whether the player has the specified wanderer's counter
   *
   * @param wanderer Wanderer to check
   * @category Wanderers
   * @returns Whether player has the wanderer counter
   */
  
  function haveWandererCounter(wanderer) {
    if (deterministicWanderers.includes(wanderer)) {
      return haveCounter(wanderer);
    }
  
    var begin = wanderer + " window begin";
    var end = wanderer + " window end";
    return haveCounter(begin) || haveCounter(end);
  }
  /**
   * Determine whether the player will encounter a vote wanderer on the next turn,
   * providing an "I Voted!" sticker is equipped.
   *
   * @category Wanderers
   * @returns Whether the vote wanderer is due
   */
  
  function isVoteWandererNow() {
    return totalTurnsPlayed() % 11 === 1 && get("lastVoteMonsterTurn") < totalTurnsPlayed();
  }
  /**
   * Tells us whether we can expect a given wanderer now. Behaves differently
   * for different types of wanderer.
   *
   * - For deterministic wanderers, return whether the player will encounter
   *   the queried wanderer on the next turn
   *
   * - For variable wanderers (window), return whether the player is within
   *   an encounter window for the queried wanderer
   *
   * - For variable wanderers (chance per turn), returns true unless the player
   *   has exhausted the number of wanderers possible
   *
   * @category Wanderers
   * @param wanderer Wanderer to check
   * @returns Whether the wanderer is due
   */
  
  function isWandererNow(wanderer) {
    if (deterministicWanderers.includes(wanderer)) {
      return haveCounter(wanderer, 0, 0);
    }
  
    if (wanderer === Wanderer.Kramco) {
      return true;
    }
  
    if (wanderer === Wanderer.Vote) {
      return isVoteWandererNow();
    }
  
    if (wanderer === Wanderer.Familiar) {
      return get("_hipsterAdv") < 7;
    }
  
    var begin = wanderer + " window begin";
    var end = wanderer + " window end";
    return !haveCounter(begin, 1) && haveCounter(end);
  }
  /**
   * Determines the chance the player will encounter a sausage goblin on the
   * next turn, providing the Kramco Sausage-o-Matic is equipped.
   *
   * @category Wanderers
   * @returns Chance that the sausage goblin is due (as a number between 0 and 1)
   */
  
  function getKramcoWandererChance() {
    var fights = property_get("_sausageFights");
    var lastFight = property_get("_lastSausageMonsterTurn");
    var totalTurns = (0,external_kolmafia_namespaceObject.totalTurnsPlayed)();
  
    if (fights < 1) {
      return lastFight === totalTurns && (0,external_kolmafia_namespaceObject.myTurncount)() < 1 ? 0.5 : 1.0;
    }
  
    var turnsSinceLastFight = totalTurns - lastFight;
    return Math.min(1.0, (turnsSinceLastFight + 1) / (5 + fights * 3 + Math.pow(Math.max(0, fights - 5), 3)));
  }
  /**
   * Determines the chance the player will encounter an Artistic Goth Kid or
   * Mini-Hipster wanderer on the next turn, providing a familiar is equipped.
   *
   * NOTE: You must complete one combat with the Artistic Goth Kid before you
   * can encounter any wanderers. Consequently,ƒ the first combat with the
   * Artist Goth Kid is effectively 0% chance to encounter a wanderer.
   *
   * @category Wanderers
   * @returns Chance that the familiar wanderer is due (as a number between 0 and 1)
   */
  
  function getFamiliarWandererChance() {
    var totalFights = get("_hipsterAdv");
    var probability = [0.5, 0.4, 0.3, 0.2];
  
    if (totalFights < 4) {
      return probability[totalFights];
    }
  
    return totalFights > 7 ? 0.0 : 0.1;
  }
  /**
   * Determines the chance the player will encounter the specified wanderer
   * on the next turn.
   *
   * @category Wanderers
   * @param wanderer Wanderer to check
   * @returns Chance that the specified wanderer is due (as a number between 0 and 1)
   */
  
  function getWandererChance(wanderer) {
    if (deterministicWanderers.includes(wanderer)) {
      return haveCounter(wanderer, 0, 0) ? 1.0 : 0.0;
    }
  
    if (wanderer === Wanderer.Kramco) {
      getKramcoWandererChance();
    }
  
    if (wanderer === Wanderer.Vote) {
      return isVoteWandererNow() ? 1.0 : 0.0;
    }
  
    if (wanderer === Wanderer.Familiar) {
      getFamiliarWandererChance();
    }
  
    var begin = wanderer + " window begin";
    var end = wanderer + " window end";
  
    if (haveCounter(begin, 1, 100)) {
      return 0.0;
    }
  
    var counters = get("relayCounters");
    var re = new RegExp("(\\d+):" + end);
    var matches = counters.match(re);
  
    if (matches && matches.length === 2) {
      var window = Number.parseInt(matches[1]) - myTurncount();
      return 1.0 / window;
    }
  
    return 0.0;
  }
  /**
   * Determines whether the player's current familiar is equal to the one supplied
   *
   * @category General
   * @param familiar Familiar to check
   * @returns Whether it is the player's current familiar
   */
  
  function isCurrentFamiliar(familiar) {
    return myFamiliar() === familiar;
  }
  var foldGroupCache = new Map();
  /**
   * Determines the fold group (if any) of which the given item is a part
   *
   * @category General
   * @param item Item that is part of the required fold group
   * @param cache Whether to query the fold group cache
   * @returns List of items in the fold group
   */
  
  function getFoldGroup(item) {
    var cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  
    if (cache) {
      var cached = foldGroupCache.get(item);
      if (cached !== undefined) return cached;
    }
  
    var result = Object.entries((0,external_kolmafia_namespaceObject.getRelated)(item, "fold")).sort((_ref, _ref2) => {
      var _ref3 = lib_slicedToArray(_ref, 2),
          a = _ref3[1];
  
      var _ref4 = lib_slicedToArray(_ref2, 2),
          b = _ref4[1];
  
      return a - b;
    }).map(_ref5 => {
      var _ref6 = lib_slicedToArray(_ref5, 1),
          i = _ref6[0];
  
      return external_kolmafia_namespaceObject.Item.get(i);
    });
  
    var _iterator = lib_createForOfIteratorHelper(result),
        _step;
  
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var fold = _step.value;
        foldGroupCache.set(fold, result);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  
    return result;
  }
  /**
   * Determines the zap group (if any) of which the given item is a part
   *
   * @category General
   * @param item Item that is part of the required zap group
   * @returns List of items in the zap group
   */
  
  function getZapGroup(item) {
    return Object.keys(getRelated(item, "zap")).map(i => Item.get(i));
  }
  
  var banishSource = banisher => {
    if (banisher.toLowerCase() === "saber force") return template_string_$skill(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Use the Force"])));
    if (banisher.toLowerCase() === "nanorhino") return template_string_$skill(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Unleash Nanites"])));
    var item = (0,external_kolmafia_namespaceObject.toItem)(banisher);
  
    if (template_string_$items(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["none, training scroll:  Snokebomb, tomayohawk-style reflex hammer"]))).includes(item)) {
      return (0,external_kolmafia_namespaceObject.toSkill)(banisher);
    }
  
    return item;
  };
  /**
   * Translate mafia's multi-dimensional array prefs into a multi-dimensional array
   * @param prop The name of the mafia string property to process
   * @param outerDelimiter The "outer" delimiter, which separates tuples from eachother
   * @param innerDelimiter The "inner" delimieter, which separates the elements of tuples from eachother
   * @param mappers An array of string => whatever mapping functions that turn this into the actual objects we want
   * @returns An array of typed tuples, based on the given inputs
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  
  
  function multiSplit(prop, outerDelimiter, innerDelimiter, mappers) {
    var initialSplit = property_get(prop).split(outerDelimiter).filter(Boolean);
    var multiDimensionalArray = outerDelimiter === innerDelimiter ? chunk(initialSplit, mappers.length) : initialSplit.map(entry => entry.split(innerDelimiter));
    return multiDimensionalArray.map(tup => mappers.map((func, index) => func(tup[index])));
  }
  /**
   * Get a map of banished monsters keyed by what banished them
   *
   * @category General
   * @returns Map of banished monsters
   */
  
  function getBanishedMonsters() {
    return new Map(multiSplit("banishedMonsters", ":", ":", [external_kolmafia_namespaceObject.toMonster, banishSource, Number]).map(_ref7 => {
      var _ref8 = lib_slicedToArray(_ref7, 2),
          monster = _ref8[0],
          source = _ref8[1];
  
      return [source, monster];
    }));
  }
  /**
   * Determines whether the item is usable
   *
   * This function will be an ongoing work in progress
   *
   * @param item Item to check
   * @returns Whether item is usable
   */
  
  function canUse(item) {
    var path = myPath();
  
    if (path !== Path.get("Nuclear Autumn")) {
      if ($items(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Shrieking Weasel holo-record, Power-Guy 2000 holo-record, Lucky Strikes holo-record, EMD holo-record, Superdrifter holo-record, The Pigs holo-record, Drunk Uncles holo-record"]))).includes(item)) {
        return false;
      }
    }
  
    if (path === Path.get("G-Lover")) {
      if (!item.name.toLowerCase().includes("g")) return false;
    }
  
    if (path === Path.get("Bees Hate You")) {
      if (item.name.toLowerCase().includes("b")) return false;
    }
  
    return true;
  }
  /**
   * Turn KoLmafia `none`s to JavaScript `null`s
   *
   * @param thing Thing that can have a mafia "none" value
   * @returns The thing specified or `null`
   */
  
  function noneToNull(thing) {
    var type = MafiaClasses.find(t => thing instanceof t);
    return type && thing === type.none ? null : thing;
  }
  /**
   * Parse the sort of range that KoLmafia encodes as a string
   * @param range KoLmafia-style range string
   * @returns Tuple of integers representing range
   */
  
  function getRange(range) {
    var _range$match$slice$ma, _range$match;
  
    var _ref9 = (_range$match$slice$ma = (_range$match = range.match(/^(-?\d+)(?:-(-?\d+))?$/)) === null || _range$match === void 0 ? void 0 : _range$match.slice(1, 3).map(v => parseInt(v))) !== null && _range$match$slice$ma !== void 0 ? _range$match$slice$ma : [0],
        _ref10 = lib_slicedToArray(_ref9, 2),
        lower = _ref10[0],
        upper = _ref10[1];
  
    return [lower, Number.isNaN(upper) || upper === undefined ? lower : upper];
  }
  /**
   * Determine the average value from the sort of range that KoLmafia encodes as a string
   *
   * @param range KoLmafia-style range string
   * @returns Average value for range
   */
  
  function getAverage(range) {
    var _getRange = getRange(range),
        _getRange2 = lib_slicedToArray(_getRange, 2),
        min = _getRange2[0],
        max = _getRange2[1];
  
    return (min + max) / 2;
  }
  /**
   * Deternube tge average adventures expected from consuming an Item
   *
   * If item is not a consumable, will just return "0".
   *
   * @param item Consumable item
   * @returns Average aventures from consumable
   */
  
  function getAverageAdventures(item) {
    return getAverage(item.adventures);
  }
  /**
   * Remove an effect
   *
   * @category General
   * @param effect Effect to remove
   * @returns Success
   */
  
  function uneffect(effect) {
    return (0,external_kolmafia_namespaceObject.cliExecute)("uneffect ".concat(effect.name));
  }
  /**
   * Get the player id from a player name (if it exists)
   * @param name the name of the player
   * @param onMissing Pass "throw" to throw an error if the player is not found, or "return-null" to return null
   * @returns the player id if the player exists, or handles according to onMissing
   */
  
  function getPlayerIdFromName(name) {
    var onMissing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "throw";
    var playerId = getPlayerId(name); // KoLmafia returns the input when not found
  
    if (playerId === name) {
      if (onMissing === "throw") {
        throw new Error("Player not found: ".concat(name));
      }
  
      return null;
    }
  
    return parseInt(playerId);
  }
  /**
   * Get the player id from a player name (if it exists)
   * @param id the id of the player
   * @param onMissing Pass "throw" to throw an error if the player is not found, or "return-null" to return null
   * @returns the player id if the player exists, or handles according to onMissing
   */
  
  function getPlayerNameFromId(id) {
    var onMissing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "throw";
    var playerName = getPlayerName(id); // KoLmafia returns the input when not found
  
    if (playerName === id.toString()) {
      if (onMissing === "throw") {
        throw new Error("Player not found: ".concat(playerName));
      }
  
      return null;
    }
  
    return playerName;
  }
  /**
   * Get both the name and id of a player from either their name or id
   *
   * @param idOrName Id or name of player
   * @param onMissing Pass "throw" to throw an error if the player is not found, or "return-null" to return null
   * @returns Object containing id and name of player if it exists, or handles according to onMissing
   */
  
  function getPlayerFromIdOrName(idOrName) {
    var onMissing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "throw";
  
    if (typeof idOrName === "number") {
      var name = getPlayerNameFromId(idOrName, onMissing);
      if (name === null) return null;
      return {
        name: name,
        id: idOrName
      };
    } else {
      var id = getPlayerIdFromName(idOrName, onMissing);
      if (id === null) return null; // load from KoLmafia to get the right capitalization
  
      var _name = getPlayerName(id);
  
      return {
        name: _name,
        id: id
      };
    }
  }
  /**
   * Determine the step as a number for a given quest property.
   *
   * @param questName Name of quest property to check.
   * @returns Quest step
   */
  
  function questStep(questName) {
    var stringStep = get(questName);
    if (stringStep === "unstarted") return -1;else if (stringStep === "started") return 0;else if (stringStep === "finished" || stringStep === "") return 999;else {
      if (stringStep.substring(0, 4) !== "step") {
        throw new Error("Quest state parsing error.");
      }
  
      return parseInt(stringStep.substring(4), 10);
    }
  }
  var EnsureError = /*#__PURE__*/function (_Error) {
    _inherits(EnsureError, _Error);
  
    var _super = _createSuper(EnsureError);
  
    function EnsureError(cause, reason) {
      var _this;
  
      lib_classCallCheck(this, EnsureError);
  
      _this = _super.call(this, "Failed to ensure ".concat(cause.name, "!").concat(reason ? " ".concat(reason) : ""));
      _this.name = "Ensure Error";
      return _this;
    }
  
    return lib_createClass(EnsureError);
  }( /*#__PURE__*/_wrapNativeSuper(Error));
  /**
   * Tries to get an effect using the default method
   *
   * @param ef effect to try to get
   * @param turns turns to aim for; default of 1
   * @throws {EnsureError} Throws an error if the effect cannot be guaranteed
   */
  
  function ensureEffect(ef) {
    var turns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  
    if ((0,external_kolmafia_namespaceObject.haveEffect)(ef) < turns) {
      if (ef.default === null) {
        throw new EnsureError(ef, "No default action");
      }
  
      if (!(0,external_kolmafia_namespaceObject.cliExecute)(ef.default) || (0,external_kolmafia_namespaceObject.haveEffect)(ef) === 0) {
        throw new EnsureError(ef);
      }
    }
  }
  var valueMap = new Map();
  var MALL_VALUE_MODIFIER = 0.9;
  /**
   * Determiens the average value (based on mallprice and autosell) of a collection of items
   *
   * @param items items whose value you care about
   * @returns Average value of items
   */
  
  function getSaleValue() {
    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
      items[_key] = arguments[_key];
    }
  
    return items.map(item => {
      if (valueMap.has(item)) return valueMap.get(item) || 0;
  
      if (item.discardable) {
        valueMap.set(item, (0,external_kolmafia_namespaceObject.mallPrice)(item) > Math.max(2 * (0,external_kolmafia_namespaceObject.autosellPrice)(item), 100) ? MALL_VALUE_MODIFIER * (0,external_kolmafia_namespaceObject.mallPrice)(item) : (0,external_kolmafia_namespaceObject.autosellPrice)(item));
      } else {
        valueMap.set(item, (0,external_kolmafia_namespaceObject.mallPrice)(item) > 100 ? MALL_VALUE_MODIFIER * (0,external_kolmafia_namespaceObject.mallPrice)(item) : 0);
      }
  
      return valueMap.get(item) || 0;
    }).reduce((s, price) => s + price, 0) / items.length;
  }
  var Environment = {
    Outdoor: "outdoor",
    Indoor: "indoor",
    Underground: "underground",
    Underwater: "underwater"
  };
  /**
   * Determines the weight-coefficient of any leprechaunning that this familiar may find itself doing
   * Assumes the familiar is nude and thus fails for hatrack & pantsrack
   * For the Mutant Cactus Bud, returns the efficacy-multiplier instead
   *
   * @param familiar The familiar whose leprechaun multiplier you're interested in
   * @returns Weight-coefficient
   */
  
  function findLeprechaunMultiplier(familiar) {
    if (familiar === $familiar(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Mutant Cactus Bud"])))) {
      return numericModifier(familiar, "Leprechaun Effectiveness", 1, $item.none);
    }
  
    if (familiar === $familiar(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Reanimated Reanimator"])))) return 0;
    var meatBonus = numericModifier(familiar, "Meat Drop", 1, $item.none);
    if (meatBonus === 0) return 0;
    return Math.pow(Math.sqrt(meatBonus / 2 + 55 / 4 + 3) - Math.sqrt(55) / 2, 2);
  }
  /**
   * Determines the weight-coefficient of any baby gravy fairying that this familiar may find itself doing
   * Assumes the familiar is nude and thus fails for hatrack & pantsrack
   * For the Mutant Fire Ant, returns the efficacy-multiplier instead
   *
   * @param familiar The familiar whose fairy multiplier you're interested in
   * @returns Weight-coefficient
   */
  
  function findFairyMultiplier(familiar) {
    if (familiar === $familiar(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["Mutant Fire Ant"])))) {
      return numericModifier(familiar, "Fairy Effectiveness", 1, $item.none);
    }
  
    if (familiar === $familiar(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["Reanimated Reanimator"])))) return 0;
    var itemBonus = numericModifier(familiar, "Item Drop", 1, $item.none);
    if (itemBonus === 0) return 0; // Assumes you're using LED candle; returns effective weight multiplier
  
    if (familiar === $familiar(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["Jill-of-All-Trades"])))) return 1.5; // Working out the multiplier based on the Item Drop at 1lb
  
    return Math.pow(Math.sqrt(itemBonus + 55 / 4 + 3) - Math.sqrt(55) / 2, 2);
  }
  var holidayWanderers = new Map([["El Dia De Los Muertos Borrachos", $monsters(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["Novia Cad\xE1ver, Novio Cad\xE1ver, Padre Cad\xE1ver, Persona Inocente Cad\xE1ver"])))], ["Feast of Boris", $monsters(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["Candied Yam Golem, Malevolent Tofurkey, Possessed Can of Cranberry Sauce, Stuffing Golem"])))], ["Talk Like a Pirate Day", $monsters(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["ambulatory pirate, migratory pirate, peripatetic pirate"])))]]);
  /**
   * Get today's holiday wanderers
   *
   * @returns List of holiday wanderer Monsters
   */
  
  function getTodaysHolidayWanderers() {
    return (0,external_kolmafia_namespaceObject.holiday)().split("/").flatMap(holiday => {
      var _holidayWanderers$get;
  
      return (_holidayWanderers$get = holidayWanderers.get(holiday)) !== null && _holidayWanderers$get !== void 0 ? _holidayWanderers$get : [];
    });
  }
  /**
   * Determines whether or not we can safely call visitUrl(), based on whether we're in a fight, multi-fight, choice, etc
   *
   * @returns Whether urls can be safely visited
   */
  
  function canVisitUrl() {
    if (currentRound()) {
      logger.debug("Current round is ".concat(currentRound(), "; you're in combat."));
      return false;
    }
  
    if (inMultiFight()) {
      logger.debug("You're in a multifight.");
      return false;
    }
  
    if (choiceFollowsFight()) {
      logger.debug("A choice follows this fight.");
      return false;
    }
  
    if (handlingChoice()) {
      logger.debug("You're currently in a choice adventure");
      return false;
    }
  
    return true;
  }
  /**
   * Calculate damage taken from a specific element after factoring in resistance
   *
   * @param baseDamage Base damage
   * @param element Element
   * @returns damage after factoring in resistances
   */
  
  function damageTakenByElement(baseDamage, element) {
    if (baseDamage < 0) return 1;
    var res = elementalResistance(element);
    return Math.max(1, Math.ceil(baseDamage - baseDamage * res / 100));
  }
  var telescopeStats = new Map([["standing around flexing their muscles and using grip exercisers", $stat(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["Muscle"])))], ["sitting around playing chess and solving complicated-looking logic puzzles", $stat(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["Mysticality"])))], ["all wearing sunglasses and dancing", $stat(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["Moxie"])))]]);
  var telescopeElements = new Map([["people, all of whom appear to be on fire", $element(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["hot"])))], ["people, surrounded by a cloud of eldritch mist", $element(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["spooky"])))], ["greasy-looking people furtively skulking around", $element(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["sleaze"])))], ["people, surrounded by garbage and clouds of flies", $element(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["stench"])))], ["people, clustered around a group of igloos", $element(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["cold"])))]]);
  var hedgeTrap1 = new Map([["smoldering bushes on the outskirts of a hedge maze", $element(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["hot"])))], ["creepy-looking black bushes on the outskirts of a hedge maze", $element(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["spooky"])))], ["purplish, greasy-looking hedges", $element(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["sleaze"])))], ["nasty-looking, dripping green bushes on the outskirts of a hedge maze", $element(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["stench"])))], ["frost-rimed bushes on the outskirts of a hedge maze", $element(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["cold"])))]]);
  var hedgeTrap2 = new Map([["smoke rising from deeper within the maze", $element(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["hot"])))], ["a miasma of eldritch vapors rising from deeper within the maze", $element(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["spooky"])))], ["a greasy purple cloud hanging over the center of the maze", $element(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["sleaze"])))], ["a cloud of green gas hovering over the maze", $element(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral(["stench"])))], ["wintry mists rising from deeper within the maze", $element(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral(["cold"])))]]);
  var hedgeTrap3 = new Map([["with lava slowly oozing out of it", $element(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["hot"])))], ["surrounded by creepy black mist", $element(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["spooky"])))], ["that occasionally vomits out a greasy ball of hair", $element(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral(["sleaze"])))], ["disgorging a really surprising amount of sewage", $element(_templateObject35 || (_templateObject35 = _taggedTemplateLiteral(["stench"])))], ["occasionally disgorging a bunch of ice cubes", $element(_templateObject36 || (_templateObject36 = _taggedTemplateLiteral(["cold"])))]]);
  /**
   * Get information from telescope
   *
   * @returns An object with all information the telescope gives you about the sorceress's contests and maze
   */
  
  function telescope() {
    return Object.fromEntries(Object.entries({
      statContest: telescopeStats.get(get("telescope1")),
      elementContest: telescopeElements.get(get("telescope2")),
      hedge1: hedgeTrap1.get(get("telescope3")),
      hedge2: hedgeTrap2.get(get("telescope4")),
      hedge3: hedgeTrap3.get(get("telescope5"))
    }).filter(_ref11 => {
      var _ref12 = lib_slicedToArray(_ref11, 2),
          value = _ref12[1];
  
      return value;
    }));
  }
  /**
   * Visit the desc_x.php page for a given thing
   *
   * @param thing Thing to examine
   * @returns Contents of desc_x.php page
   */
  
  function examine(thing) {
    var url = thing instanceof Item ? "desc_item.php?whichitem=".concat(thing.descid) : thing instanceof Familiar ? "desc_familiar.php?which=".concat(thing.id) : thing instanceof Effect ? "desc_effect.php?whicheffect=".concat(thing.descid) : "desc_skill.php?whichskill=".concat(thing.id);
    return visitUrl(url);
  }
  /**
   * Picks an option based on your primestat
   *
   * @param options An object keyed by stat; it must either contain all stats, or have a `default` parameter.
   * @param alternateSource An optional alternate way of determining which Stat to choose by.
   * @returns The option corresponding to your primestat.
   */
  
  var byStat = makeByXFunction(() => (0,external_kolmafia_namespaceObject.myPrimestat)().toString());
  /**
   * Picks an option based on your player class
   *
   * @param options An object keyed by player class; it must either contain all classes, or have a `default` parameter.
   * @param alternateSource An optional anternate way of determining which Class to choose by.
   * @returns The option corresponding to your player class.
   */
  
  var byClass = makeByXFunction(() => (0,external_kolmafia_namespaceObject.myClass)().toString());
  /**
   * Use an item with visitUrl instead of `use`; this is sometimes useful
   *
   * @param item The item you want to use
   * @returns The html of the resulting page
   */
  
  function directlyUse(item) {
    return (0,external_kolmafia_namespaceObject.visitUrl)("inv_use.php?which=3&whichitem=".concat(item.id, "&pwd"));
  }
  /**
   * Empty a slot, or unequip all instances of a given equipped item
   *
   * @param thing The slot or item in question
   * @returns Whether we succeeded completely--`false` if we unequip some but not all instances of the item.
   */
  
  function unequip(thing) {
    if (thing instanceof Slot) return equip(thing, $item.none);
    var failedSlots = Slot.all().filter(s => {
      // Filter the slot out if it doesn't contain the relevant item
      if (equippedItem(s) !== thing) return false; // Filter the slot out if we succeed at unequipping it
  
      return !unequip(s); // This leaves only slots that do contain the item but that we failed to unequip
    });
    if (failedSlots.length) logger.debug("Failed to unequip ".concat(thing, " from slots ").concat(failedSlots.join(", ")));
    return failedSlots.length === 0;
  }
  /**
   * @returns a Date object corresponding to the current in-game day, at midnight
   */
  
  function gameDay() {
    var _todayToString$match;
  
    var _map = ((_todayToString$match = todayToString().match(/(\d{4})(\d{2})(\d{2})/)) !== null && _todayToString$match !== void 0 ? _todayToString$match : []).map(Number),
        _map2 = lib_slicedToArray(_map, 4),
        year = _map2[1],
        month = _map2[2],
        day = _map2[3];
  
    return new Date(year, month - 1, day, 0, 0, 0);
  }
  /**
   * @param [type="all"] the type of crafting to check for free crafts
   * @returns the number of free crafts available of that type
   */
  
  function freeCrafts() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "all";
  
    var effectCrafts = effect => Math.floor(haveEffect(effect) / 5);
  
    var all = (lib_have($skill(_templateObject37 || (_templateObject37 = _taggedTemplateLiteral(["Rapid Prototyping"])))) ? 5 - get("_rapidPrototypingUsed") : 0) + (lib_have($skill(_templateObject38 || (_templateObject38 = _taggedTemplateLiteral(["Expert Corner-Cutter"])))) ? 5 - get("_expertCornerCutterUsed") : 0) + effectCrafts($effect(_templateObject39 || (_templateObject39 = _taggedTemplateLiteral(["Inigo's Incantation of Inspiration"])))) + effectCrafts($effect(_templateObject40 || (_templateObject40 = _taggedTemplateLiteral(["Craft Tea"])))) + effectCrafts($effect(_templateObject41 || (_templateObject41 = _taggedTemplateLiteral(["Cooking Concentrate"]))));
    var food = type === "food" ? 5 - get("_cookbookbatCrafting") : 0;
    var smith = type === "smith" ? 5 - get("_thorsPliersCrafting") : 0;
    var booze = 0; // currently there is no booze specific free crafting skill
  
    return all + food + smith + booze;
  }
  var realmTypes = (/* unused pure expression or super */ null && (["spooky", "stench", "hot", "cold", "sleaze", "fantasy", "pirate"]));
  /**
   * @param identifier which realm to check for
   * @returns if that realm is available
   */
  
  function realmAvailable(identifier) {
    if (identifier === "fantasy") {
      return get("_frToday") || get("frAlways");
    } else if (identifier === "pirate") {
      return get("_prToday") || get("prAlways");
    }
  
    return get("_".concat(identifier, "AirportToday")) || get("".concat(identifier, "AirportAlways"));
  }
  /**
   * Compute the currently available Lucky Gold Ring Currencies
   * @param realm the realm type to consider
   * @returns The currency for the given zone
   */
  
  function realmCurrency(realm) {
    switch (realm) {
      case "sleaze":
        return $item(_templateObject42 || (_templateObject42 = _taggedTemplateLiteral(["Beach Buck"])));
  
      case "spooky":
        return $item(_templateObject43 || (_templateObject43 = _taggedTemplateLiteral(["Coinspiracy"])));
  
      case "stench":
        return $item(_templateObject44 || (_templateObject44 = _taggedTemplateLiteral(["FunFunds\u2122"])));
  
      case "cold":
        return $item(_templateObject45 || (_templateObject45 = _taggedTemplateLiteral(["Wal-Mart gift certificate"])));
  
      case "hot":
        return $item(_templateObject46 || (_templateObject46 = _taggedTemplateLiteral(["Volcoino"])));
  
      case "fantasy":
        return $item(_templateObject47 || (_templateObject47 = _taggedTemplateLiteral(["Rubee\u2122"])));
  
      default:
        return null;
    }
  }
  /**
   * Compute which Lucky Gold Ring currencies are currently available
   * @returns a list of currently available currencies
   */
  
  function lgrCurrencies() {
    return realmTypes.filter(realm => realmAvailable(realm) && !(realm === "hot" && get("_luckyGoldRingVolcoino"))).map(realmCurrency).filter(notNull);
  }
  var ACCOUNT_COMBAT_FLAGS = (/* unused pure expression or super */ null && (["aabosses", "wowbar", "bothcombatinterf", "compactmanuel", "eternalmrj", "disablelovebugs", "boringdarts"]));
  /**
   * Get the current value of all of your account's combat setting flags
   * @param flags An array of the flags you want to get, defaults to all of them
   * @returns An array of objects that contain the flags and their values as booleans
   */
  
  function getCombatFlags() {
    var flags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [].concat(ACCOUNT_COMBAT_FLAGS);
    var accountPage = visitUrl("account.php?tab=combat");
    return flags.map(flag => ({
      flag: flag,
      value: xpath(accountPage, "//*[@id=\"opt_flag_".concat(flag, "\"]/label/input[@type='checkbox']@checked"))[0] === "checked"
    }));
  }
  /**
   * Sets the given combat setting flags on your account
   *
   * @param flags A spread array of objects that contain a flag and its desired value; these look like the return value of `getCombatFlags`
   * @returns the result of the associated `visitUrl` call
   */
  
  function setCombatFlags() {
    for (var _len2 = arguments.length, flags = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      flags[_key2] = arguments[_key2];
    }
  
    return visitUrl("account.php?".concat(([].concat(lib_toConsumableArray(flags.flatMap(_ref13 => {
      var flag = _ref13.flag,
          value = _ref13.value;
      return ["actions[]=flag_".concat(flag), "flag_".concat(flag, "=").concat(Number(value))];
    })), ["action=Update", "am=1", "ajax=1", "pwd"]).join("&"), true)));
  }
  /**
   * Perform a given action with certain combat setting flags set, returning them to their initial values if possible
   *
   * @param action The action you want to do with the given combat setting flags
   * @param flags A spread array of objects that contain a combat setting flag and its desired value; these look like the return value of `getCombatFlags`
   * @returns The result of the action
   */
  
  function withCombatFlags(action) {
    for (var _len3 = arguments.length, flags = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      flags[_key3 - 1] = arguments[_key3];
    }
  
    var initialValues = getCombatFlags(flags.map(_ref14 => {
      var flag = _ref14.flag;
      return flag;
    }));
  
    try {
      return action();
    } finally {
      setCombatFlags.apply(void 0, lib_toConsumableArray(initialValues));
    }
  }
  /**
   * Determines whether you currently have an effect intrinsically
   * @param effect The effect in question
   * @returns Whether you have that effect as an intrinsic. Alternately you could just have over 2147483647 turns of that effect, but that seems unlikely.
   */
  
  function haveIntrinsic(effect) {
    return haveEffect(effect) >= 2147483647;
  }
  /**
   * Extracts a map of gained items from a string, for example from the result
   * of a combat.
   *
   * NOTE: Make sure you trust the source of that text.
   *
   * @param text The text to extract items from
   * @returns A map of items and their quantities
   */
  
  function extractItems(text) {
    return new Map(Object.entries(kolmafiaExtractItems(text)).map(_ref15 => {
      var _ref16 = lib_slicedToArray(_ref15, 2),
          itemName = _ref16[0],
          quantity = _ref16[1];
  
      return [Item.get(itemName), quantity];
    }));
  }
  
  function makeScalerCalcFunction(cache, pattern) {
    return function (monster) {
      var _pattern$exec$, _pattern$exec;
  
      var current = cache.get(monster);
      if (current !== undefined) return (0,external_kolmafia_namespaceObject.monsterEval)(current);
      var result = (_pattern$exec$ = (_pattern$exec = pattern.exec(monster.attributes)) === null || _pattern$exec === void 0 ? void 0 : _pattern$exec[1]) !== null && _pattern$exec$ !== void 0 ? _pattern$exec$ : "0";
      cache.set(monster, result);
      return (0,external_kolmafia_namespaceObject.monsterEval)(result);
    };
  }
  
  var scalerRates = new Map();
  var scalerCaps = new Map();
  var SCALE_RATE_PATTERN = /Scale: (?:\[([^\]]*)\]|(\d*))/;
  var SCALE_CAP_PATTERN = /Cap: (?:\[([^\]]*)\]|(\d*))/;
  /**
   * Calculate & return the scaling rate of a monster--`0` for non-scalers.
   * @param monster The monster to check
   * @returns The current scaling rate of the monster, based on your current in-game state
   */
  
  var getScalingRate = makeScalerCalcFunction(scalerRates, SCALE_RATE_PATTERN);
  /**
   * Calculate & return the scaling cap of a monster--`0` for non-scalers.
   * @param monster The monster to check
   * @returns The current scaling cap of the monster, based on your current in-game state
   */
  
  var getScalingCap = makeScalerCalcFunction(scalerCaps, SCALE_CAP_PATTERN);
  /**
   * Wrap a specified action in mafia's `batchOpen` and `batchClose`
   *
   * @param action Action to perform while using mafia's batching feature
   * @returns The return value of the action
   */
  
  function withBatch(action) {
    batchOpen();
  
    try {
      return action();
    } finally {
      batchClose();
    }
  }
  
  var makeBulkFunction = action => items => {
    (0,external_kolmafia_namespaceObject.batchOpen)();
  
    var _iterator2 = lib_createForOfIteratorHelper(items.entries()),
        _step2;
  
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _step2$value = lib_slicedToArray(_step2.value, 2),
            item = _step2$value[0],
            quantity = _step2$value[1];
  
        action(quantity, item);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  
    return (0,external_kolmafia_namespaceObject.batchClose)();
  };
  /*
   * Autosell items in bulk
   */
  
  
  var bulkAutosell = makeBulkFunction(external_kolmafia_namespaceObject.autosell);
  /*
   * Closet items in bulk
   * Note: each item transfer will still consume one request
   */
  
  var bulkPutCloset = makeBulkFunction(external_kolmafia_namespaceObject.putCloset);
  /*
   * Display items in bulk
   */
  
  var bulkPutDisplay = makeBulkFunction(external_kolmafia_namespaceObject.putDisplay);
  /*
   * Deposit items into your clan stash in bulk
   */
  
  var bulkPutStash = makeBulkFunction(external_kolmafia_namespaceObject.putStash);
  /*
   * Remove items from your closet in bulk
   * Note: each item transfer will still consume one request
   */
  
  var bulkTakeCloset = makeBulkFunction(external_kolmafia_namespaceObject.takeCloset);
  /*
   * Remove items from your display case in bulk
   */
  
  var bulkTakeDisplay = makeBulkFunction(external_kolmafia_namespaceObject.takeDisplay);
  /*
   * Remove items from your shop in bulk
   */
  
  var bulkTakeShop = makeBulkFunction(external_kolmafia_namespaceObject.takeShop);
  /*
   * Withdraw items from your clan stash in bulk
   * Note: each item transfer will still consume one request
   */
  
  var bulkTakeStash = makeBulkFunction(external_kolmafia_namespaceObject.takeStash);
  /*
   * Remove items from your Hagnk's in bulk
   */
  
  var bulkTakeStorage = makeBulkFunction(external_kolmafia_namespaceObject.takeStorage);
  /*
   * Mallsell items in bulk
   */
  
  var bulkPutShop = items => {
    batchOpen();
  
    var _iterator3 = lib_createForOfIteratorHelper(items.entries()),
        _step3;
  
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _step3$value = lib_slicedToArray(_step3.value, 2),
            item = _step3$value[0],
            _step3$value$ = _step3$value[1],
            quantity = _step3$value$.quantity,
            limit = _step3$value$.limit,
            price = _step3$value$.price;
  
        if (quantity) {
          putShop(price, limit !== null && limit !== void 0 ? limit : 0, quantity, item);
        } else {
          putShop(price, limit !== null && limit !== void 0 ? limit : 0, item);
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  
    return batchClose();
  };
  /*
   * Coinmaster-sell items to the same coinmaster in bulk
   */
  
  var bulkSell = (coinmaster, items) => {
    batchOpen();
  
    var _iterator4 = lib_createForOfIteratorHelper(items.entries()),
        _step4;
  
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var _step4$value = lib_slicedToArray(_step4.value, 2),
            item = _step4$value[0],
            quantity = _step4$value[1];
  
        sell(coinmaster, quantity, item);
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
  
    return batchClose();
  };
  /*
   * Reprice items in your mallstore in bulk
   */
  
  var bulkRepriceShop = items => {
    batchOpen();
  
    var _iterator5 = lib_createForOfIteratorHelper(items.entries()),
        _step5;
  
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var _step5$value = lib_slicedToArray(_step5.value, 2),
            item = _step5$value[0],
            _step5$value$ = _step5$value[1],
            limit = _step5$value$.limit,
            price = _step5$value$.price;
  
        if (limit) {
          repriceShop(price, limit, item);
        } else {
          repriceShop(price, item);
        }
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
  
    return batchClose();
  };
  /**
   * Calculate the total weight of a given familiar, including soup & modifiers
   * @param familiar The familiar to use--defaults to your current one
   * @param considerAdjustment Whether to include your `weightAdjustment` in the calculation
   * @returns The total weight of the given familiar
   */
  
  function totalFamiliarWeight() {
    var familiar = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : myFamiliar();
    var considerAdjustment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    return clamp(familiarWeight(familiar), lib_have($effect(_templateObject48 || (_templateObject48 = _taggedTemplateLiteral(["Fidoxene"])))) ? 20 : 0, Infinity) + familiar.soupWeight + (considerAdjustment ? weightAdjustment() : 0) + (familiar.feasted ? 10 : 0);
  }
  var familiarTags = Object.freeze(["animal", "insect", "haseyes", "haswings", "fast", "bite", "flies", "hashands", "wearsclothes", "organic", "vegetable", "hovers", "edible", "food", "sentient", "cute", "mineral", "polygonal", "object", "undead", "cantalk", "evil", "orb", "spooky", "sleaze", "aquatic", "swims", "isclothes", "phallic", "stench", "hot", "hasbeak", "haslegs", "robot", "technological", "hard", "cold", "hasbones", "hasclaws", "reallyevil", "good", "person", "humanoid", "animatedart", "software", "pokefam", "hasshell", "hasstinger"]);
  /**
   * Find the tags (used in mumming trunk, stillsuit, etc) for a given familiar
   * @param familiar The familiar in question
   * @returns An array of the familiar's tags
   */
  
  function getFamiliarTags(familiar) {
    return familiar.attributes.split("; ").filter(Boolean);
  }
  /**
   * Determines the cost of acquiring an item taking into account your valueOfInventory preference
   *
   * @param item The item to check the price of
   * @param quantity the number of items to acquire
   * @returns The total value of the items
   */
  
  function getAcquirePrice(item) {
    var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    if (quantity <= 0) return 0;
    var currentAmount = availableAmount(item);
    var amountNeeded = Math.max(0, quantity - currentAmount);
    var retrieveCost = retrievePrice(item, currentAmount + quantity) - retrievePrice(item, currentAmount);
    var mallMinPrice = Math.max(100, 2 * autosellPrice(item));
  
    if (craftType(item) === "Meatpasting" && retrieveCost > 0) {
      return retrieveCost;
    }
  
    if (isNpcItem(item) && npcPrice(item) > 0 && npcPrice(item) < mallPrice(item)) {
      return quantity * npcPrice(item);
    }
  
    if (item.tradeable && mallPrice(item) === mallMinPrice) {
      return currentAmount * autosellPrice(item) + amountNeeded * mallPrice(item);
    }
  
    if (item.tradeable && mallPrice(item) > mallMinPrice) {
      return quantity * mallPrice(item);
    }
  
    if (item.tradeable) return quantity * autosellPrice(item);
  
    if (item.discardable) {
      return lib_have(item, quantity) ? quantity * autosellPrice(item) : Infinity;
    }
  
    return 0;
  }
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/modifierTypes.js
  // THIS FILE IS AUTOMATICALLY GENERATED. See tools/parseModifiers.ts for more information
  var stringModifiers = ["Class", "Intrinsic Effect", "Equalize", "Wiki Name", "Modifiers", "Outfit", "Stat Tuning", "Effect", "Equips On", "Familiar Effect", "Jiggle", "Equalize Muscle", "Equalize Mysticality", "Equalize Moxie", "Avatar", "Rollover Effect", "Skill", "Floor Buffed Muscle", "Floor Buffed Mysticality", "Floor Buffed Moxie", "Plumber Stat", "Recipe", "Evaluated Modifiers"];
  var stringModifiersSet = new Set(stringModifiers);
  var booleanModifiers = ["Softcore Only", "Single Equip", "Always Fumble", "Never Fumble", "Weakens Monster", "Free Pull", "Variable", "Nonstackable Watch", "Cold Immunity", "Hot Immunity", "Sleaze Immunity", "Spooky Immunity", "Stench Immunity", "Cold Vulnerability", "Hot Vulnerability", "Sleaze Vulnerability", "Spooky Vulnerability", "Stench Vulnerability", "Moxie Controls MP", "Moxie May Control MP", "Four Songs", "Adventure Randomly", "Adventure Underwater", "Underwater Familiar", "Generic", "Unarmed", "No Pull", "Lasts Until Rollover", "Alters Page Text", "Attacks Can't Miss", "Pirate", "Blind", "Breakable", "Drops Items", "Drops Meat", "Volleyball or Sombrero", "Extra Pickpocket", "Negative Status Resist"];
  var booleanModifiersSet = new Set(booleanModifiers);
  var numericModifiers = ["Familiar Weight", "Monster Level", "Combat Rate", "Initiative", "Experience", "Item Drop", "Meat Drop", "Damage Absorption", "Damage Reduction", "Cold Resistance", "Hot Resistance", "Sleaze Resistance", "Spooky Resistance", "Stench Resistance", "Mana Cost", "Moxie", "Moxie Percent", "Muscle", "Muscle Percent", "Mysticality", "Mysticality Percent", "Maximum HP", "Maximum HP Percent", "Maximum MP", "Maximum MP Percent", "Weapon Damage", "Ranged Damage", "Spell Damage", "Spell Damage Percent", "Cold Damage", "Hot Damage", "Sleaze Damage", "Spooky Damage", "Stench Damage", "Cold Spell Damage", "Hot Spell Damage", "Sleaze Spell Damage", "Spooky Spell Damage", "Stench Spell Damage", "Underwater Combat Rate", "Fumble", "HP Regen Min", "HP Regen Max", "MP Regen Min", "MP Regen Max", "Adventures", "Familiar Weight Percent", "Weapon Damage Percent", "Ranged Damage Percent", "Stackable Mana Cost", "Hobo Power", "Base Resting HP", "Resting HP Percent", "Bonus Resting HP", "Base Resting MP", "Resting MP Percent", "Bonus Resting MP", "Critical Hit Percent", "PvP Fights", "Volleyball", "Sombrero", "Leprechaun", "Fairy", "Meat Drop Penalty", "Hidden Familiar Weight", "Item Drop Penalty", "Initiative Penalty", "Food Drop", "Booze Drop", "Hat Drop", "Weapon Drop", "Offhand Drop", "Shirt Drop", "Pants Drop", "Accessory Drop", "Volleyball Effectiveness", "Sombrero Effectiveness", "Leprechaun Effectiveness", "Fairy Effectiveness", "Familiar Weight Cap", "Slime Resistance", "Slime Hates It", "Spell Critical Percent", "Muscle Experience", "Mysticality Experience", "Moxie Experience", "Effect Duration", "Candy Drop", "DB Combat Damage", "Sombrero Bonus", "Familiar Experience", "Sporadic Meat Drop", "Sporadic Item Drop", "Meat Bonus", "Pickpocket Chance", "Combat Mana Cost", "Muscle Experience Percent", "Mysticality Experience Percent", "Moxie Experience Percent", "Minstrel Level", "Muscle Limit", "Mysticality Limit", "Moxie Limit", "Song Duration", "Prismatic Damage", "Smithsness", "Supercold Resistance", "Reduce Enemy Defense", "Pool Skill", "Familiar Damage", "Gear Drop", "Maximum Hooch", "Water Level", "Crimbot Outfit Power", "Familiar Tuning Muscle", "Familiar Tuning Mysticality", "Familiar Tuning Moxie", "Random Monster Modifiers", "Luck", "Othello Skill", "Disco Style", "Rollover Effect Duration", "Sixgun Damage", "Fishing Skill", "Additional Song", "Sprinkle Drop", "Absorb Adventures", "Absorb Stats", "Rubee Drop", "Kruegerand Drop", "WarBear Armor Penetration", "Maximum PP", "Plumber Power", "Drippy Damage", "Drippy Resistance", "Energy", "Scrap", "Familiar Action Bonus", "Water", "Spleen Drop", "Potion Drop", "Sauce Spell Damage", "Monster Level Percent", "Food Fairy", "Booze Fairy", "Candy Fairy", "Food Fairy Effectiveness", "Booze Fairy Effectiveness", "Candy Fairy Effectiveness", "Damage Aura", "Sporadic Damage Aura", "Thorns", "Sporadic Thorns", "Stomach Capacity", "Liver Capacity", "Spleen Capacity", "Free Rests", "Leaves", "Elf Warfare Effectiveness", "Pirate Warfare Effectiveness", "MPC Drop", "Piece of Twelve Drop", "Combat Item Damage Percent", "Avoid Attack", "Damage vs. Bugbears", "Damage vs. Werewolves", "Damage vs. Zombies", "Damage vs. Ghosts", "Damage vs. Vampires", "Damage vs. Skeletons", "Damage vs. Undead"];
  var numericModifiersSet = new Set(numericModifiers);
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/modifier.js
  var modifier_templateObject;
  
  function modifier_slicedToArray(arr, i) { return modifier_arrayWithHoles(arr) || modifier_iterableToArrayLimit(arr, i) || modifier_unsupportedIterableToArray(arr, i) || modifier_nonIterableRest(); }
  
  function modifier_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function modifier_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return modifier_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return modifier_arrayLikeToArray(o, minLen); }
  
  function modifier_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function modifier_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
  
  function modifier_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
  
  function modifier_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  function modifier_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  
  function modifier_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? modifier_ownKeys(Object(source), !0).forEach(function (key) { modifier_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : modifier_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  
  function modifier_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  
  
  
  
  
  /**
   * Type guard that determines if a given string is a boolean modifier
   * @param modifier The modifier in question
   * @returns Whether the string in question is a valid boolean modifier
   */
  
  function isBooleanModifier(modifier) {
    return booleanModifiersSet.has(modifier);
  }
  /**
   * Type guard that determines if a given string is a numeric modifier
   * @param modifier The modifier in question
   * @returns Whether the string in question is a valid numeric modifier
   */
  
  function isNumericModifier(modifier) {
    return numericModifiersSet.has(modifier);
  }
  /**
   * Type guard that determines if a given string is a string modifier
   * @param modifier The modifier in question
   * @returns Whether the string in question is a valid string modifier
   */
  
  function isStringModifier(modifier) {
    return stringModifiersSet.has(modifier);
  }
  /**
   * Type guard that determines if a given string is a valid modifier
   * @param modifier The modifier in question
   * @returns Whether the string in question is a valid modifier
   */
  
  function isValidModifier(modifier) {
    return isNumericModifier(modifier) || isBooleanModifier(modifier) || isStringModifier(modifier);
  }
  /**
   * Get the value of a modifier
   *
   * @param name Modifier name
   * @param subject Subject of modifier
   * @returns Value of modifier
   */
  
  function modifier_get(name, subject) {
    if (isBooleanModifier(name)) {
      return subject === undefined ? (0,external_kolmafia_namespaceObject.booleanModifier)(name) : (0,external_kolmafia_namespaceObject.booleanModifier)(subject, name);
    }
  
    if (isNumericModifier(name)) {
      return subject === undefined ? (0,external_kolmafia_namespaceObject.numericModifier)(name) : (0,external_kolmafia_namespaceObject.numericModifier)(subject, name);
    }
  
    if (isStringModifier(name)) {
      return subject === undefined ? (0,external_kolmafia_namespaceObject.stringModifier)(name) : (0,external_kolmafia_namespaceObject.stringModifier)(subject, name);
    }
  }
  /**
   * Merge two Modifiers objects into one, summing all numeric modifiers, ||ing all boolean modifiers, and otherwise letting the second object overwrite the first.
   *
   * @param modifiers1 Modifiers objects to be merged onto.
   * @param modifiers2 Modifiers object to merge.
   * @returns A single Modifiers object obtained by merging.
   */
  
  function pairwiseMerge(modifiers1, modifiers2) {
    var returnValue = modifier_objectSpread(modifier_objectSpread({}, modifiers1), modifiers2);
  
    for (var modifier in modifiers1) {
      if (Array.from(Object.values(modifiers2)).includes(modifier)) {
        if (isNumericModifier(modifier)) {
          var _modifiers1$modifier, _modifiers2$modifier;
  
          returnValue[modifier] = ((_modifiers1$modifier = modifiers1[modifier]) !== null && _modifiers1$modifier !== void 0 ? _modifiers1$modifier : 0) + ((_modifiers2$modifier = modifiers2[modifier]) !== null && _modifiers2$modifier !== void 0 ? _modifiers2$modifier : 0);
        }
  
        if (isBooleanModifier(modifier)) {
          var _modifiers1$modifier2, _modifiers2$modifier2;
  
          returnValue[modifier] = ((_modifiers1$modifier2 = modifiers1[modifier]) !== null && _modifiers1$modifier2 !== void 0 ? _modifiers1$modifier2 : false) || ((_modifiers2$modifier2 = modifiers2[modifier]) !== null && _modifiers2$modifier2 !== void 0 ? _modifiers2$modifier2 : false);
        }
      }
    }
  
    return returnValue;
  }
  /**
   * Merge arbitrarily many Modifiers objects into one, summing all numeric modifiers, and ||ing all boolean modifiers.
   *
   * @param modifierss Modifiers objects to be merged together.
   * @returns A single Modifiers object obtained by merging.
   */
  
  
  function mergeModifiers() {
    for (var _len = arguments.length, modifierss = new Array(_len), _key = 0; _key < _len; _key++) {
      modifierss[_key] = arguments[_key];
    }
  
    return modifierss.reduce((a, b) => pairwiseMerge(a, b), {});
  }
  /**
   * Prints the modtrace to the log.
   * Example: printModtrace("Meat Drop") or printModtrace(["Item Drop", "Booze Drop"])
   *
   * @param inputModifiers A string (or string[]) containing the modtrace lookup term(s).
   * @param baseModifier A string where all the info about modifiers in the string[] array can be grabbed with this one lookup term. (Automatically generated in most cases)
   * @param componentColor The print color for the sum returned for each input modifier
   * @param totalColor The print color for the total sum over every input modifier
   * @returns void
   */
  
  function printModtrace(inputModifiers, // the user's list of modifiers to look up
  baseModifier) {
    var _htmlOutput$match, _htmlOutput$match2;
  
    var componentColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "purple";
    var totalColor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "blue";
    if (typeof inputModifiers === "string") return printModtrace([inputModifiers], inputModifiers);else if (inputModifiers.length === 0) return;else if (!baseModifier) {
      return inputModifiers.filter(mod1 => !inputModifiers.some(mod2 => mod2 !== mod1 && mod1.includes(mod2))).forEach(baseMod => printModtrace(inputModifiers.filter(mod => mod.includes(baseMod)), baseMod));
    }
    var htmlOutput = cliExecuteOutput("modtrace ".concat(baseModifier)); // The list of matched modifiers that mafia returns
  
    var modtraceModifiers = Array.from((_htmlOutput$match = htmlOutput.match(RegExp(/(>)(.*?)(<\/td>)/g))) !== null && _htmlOutput$match !== void 0 ? _htmlOutput$match : []).map(s => s.slice(1, -5)).slice(2);
  
    if (!modtraceModifiers.some(modifier => modifier.toLowerCase() === baseModifier.toLowerCase())) {
      return print("Could not find exact string match of ".concat(baseModifier, " in ").concat(inputModifiers.toString()), "red");
    }
  
    var initialVal = baseModifier.toLowerCase() === "familiar weight" ? (() => {
      var wt = familiarWeight(myFamiliar());
      print("[Familiar Weight] Base weight (".concat(wt, ")"));
      return wt;
    })() : 0;
    var modifierVals = new Map(modtraceModifiers.map(modifier => [modifier, initialVal])); // Maps modifier name to its value
  
    var lowerCaseModifiers = inputModifiers.map(modifier => modifier.toLowerCase());
    Array.from((_htmlOutput$match2 = htmlOutput.match(RegExp(/<tr>(.*?)<\/tr>/g))) !== null && _htmlOutput$match2 !== void 0 ? _htmlOutput$match2 : []).slice(1).map(s => s.slice(4, -5)).forEach(s => {
      var _s$replace$match;
  
      var rowArr = Array.from((_s$replace$match = s.replace(RegExp(/><\/td>/g), ">0</td>").match(RegExp(/(>)(.*?)(<\/td>)/g))) !== null && _s$replace$match !== void 0 ? _s$replace$match : []).map(s => s.slice(1, -5));
      var rowName = rowArr[1];
      rowArr.slice(2).filter((e, idx) => idx % 2 === 0).forEach((e, idx) => {
        var _modifierVals$get;
  
        var val = parseFloat(e);
        modifierVals.set(modtraceModifiers[idx], ((_modifierVals$get = modifierVals.get(modtraceModifiers[idx])) !== null && _modifierVals$get !== void 0 ? _modifierVals$get : 0) + val);
  
        if (val !== 0 && lowerCaseModifiers.includes(modtraceModifiers[idx].toLowerCase())) {
          print("[".concat(modtraceModifiers[idx], "] ").concat(rowName, " (").concat(val.toFixed(1), ")"));
        }
      });
    });
    var total = sum(modtraceModifiers, modifier => {
      if (lowerCaseModifiers.includes(modifier.toLowerCase())) {
        var _modifierVals$get2;
  
        var modVal = (_modifierVals$get2 = modifierVals.get(modifier)) !== null && _modifierVals$get2 !== void 0 ? _modifierVals$get2 : 0;
  
        if (have($effect(modifier_templateObject || (modifier_templateObject = modifier_taggedTemplateLiteral(["Bow-Legged Swagger"])))) && modifier.includes("Weapon Damage")) {
          print("[".concat(modifier, "] Bow-Legged Swagger (").concat(modVal.toFixed(1), ")"));
          modVal *= 2;
        }
  
        print("".concat(modifier, " => ").concat(modVal.toFixed(1)), componentColor);
        return modVal;
      } else return 0;
    });
    print("Total ".concat(baseModifier, ": ").concat(total.toFixed(1)), totalColor);
  }
  /**
   * Take the sum of a modifier over an array of Skills, Effects, and Items
   *
   * @param modifier A NumericModifier that we want to find the total value of
   * @param subjects A rested array of Skills, Effects, and Items that we want to find the total value of
   * @returns The sum of the appropriate modifier for all of the subjects
   */
  
  function getTotalModifier(modifier) {
    for (var _len2 = arguments.length, subjects = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      subjects[_key2 - 1] = arguments[_key2];
    }
  
    return sum(subjects, subject => modifier_get(modifier, subject));
  }
  /**
   * Translate a pref into a `Modifiers` object by wrapping mafia's `splitModifiers`
   * @param pref The name of the mafia preference in question
   * @param translator Optional object to help translate fields into their appropriate values
   * @param translator.numeric How to translate the values from `splitModifiers` into numbers for numeric modifiers; defaults to Number
   * @param translator.str How to translate the values from `splitModifiers` into strings for string modifiers; defaults to String
   * @param translator.bool How to translate the values from `splitModifiers` into booleans for boolean modifiers; defaults to comparing to the string `"true"`
   * @returns A `Modifiers` object corresponding to the given preference.
   */
  
  function parseModifiers(pref) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$numeric = _ref.numeric,
        numeric = _ref$numeric === void 0 ? Number : _ref$numeric,
        _ref$str = _ref.str,
        str = _ref$str === void 0 ? String : _ref$str,
        _ref$bool = _ref.bool,
        bool = _ref$bool === void 0 ? val => val === "true" : _ref$bool;
  
    return Object.entries(splitModifiers(getProperty(pref))).reduce((acc, _ref2) => {
      var _ref3 = modifier_slicedToArray(_ref2, 2),
          key = _ref3[0],
          value = _ref3[1];
  
      return modifier_objectSpread(modifier_objectSpread({}, acc), {}, modifier_defineProperty({}, key, isBooleanModifier(key) ? bool(value) : isNumericModifier(key) ? numeric(value) : str(value)));
    }, {});
  }
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2015/MayoClinic.js
  var MayoClinic_templateObject, MayoClinic_templateObject2, MayoClinic_templateObject3, MayoClinic_templateObject4, MayoClinic_templateObject5, MayoClinic_templateObject6, MayoClinic_templateObject7, MayoClinic_templateObject8, MayoClinic_templateObject9, MayoClinic_templateObject10;
  
  function MayoClinic_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  
  var Mayo = {
    nex: template_string_$item(MayoClinic_templateObject || (MayoClinic_templateObject = MayoClinic_taggedTemplateLiteral(["Mayonex"]))),
    diol: template_string_$item(MayoClinic_templateObject2 || (MayoClinic_templateObject2 = MayoClinic_taggedTemplateLiteral(["Mayodiol"]))),
    zapine: template_string_$item(MayoClinic_templateObject3 || (MayoClinic_templateObject3 = MayoClinic_taggedTemplateLiteral(["Mayozapine"]))),
    flex: template_string_$item(MayoClinic_templateObject4 || (MayoClinic_templateObject4 = MayoClinic_taggedTemplateLiteral(["Mayoflex"])))
  };
  /**
   * @returns Whether the Mayo Clinic is our current active workshed
   */
  
  function installed() {
    return (0,external_kolmafia_namespaceObject.getWorkshed)() === template_string_$item(MayoClinic_templateObject5 || (MayoClinic_templateObject5 = MayoClinic_taggedTemplateLiteral(["portable Mayo Clinic"])));
  }
  /**
   * @returns Whether we `have` the Mayo Clinic, or it's installed
   */
  
  function MayoClinic_have() {
    return haveItem($item(MayoClinic_templateObject6 || (MayoClinic_templateObject6 = MayoClinic_taggedTemplateLiteral(["portable Mayo Clinic"])))) || installed();
  }
  /**
   * Sets mayo minder to a particular mayo, and ensures you have enough of it.
   *
   * @param mayo Mayo to use
   * @param quantity Quantity to ensure
   * @returns Whether we succeeded in this endeavor; a trivial `false` for people without the clinic `installed`
   */
  
  function setMayoMinder(mayo) {
    var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    if (getWorkshed() !== $item(MayoClinic_templateObject7 || (MayoClinic_templateObject7 = MayoClinic_taggedTemplateLiteral(["portable Mayo Clinic"])))) return false;
  
    if (!Object.values(Mayo).includes(mayo)) {
      logger.error("Invalid mayo selected");
      return false;
    }
  
    if (get("mayoInMouth") && get("mayoInMouth") !== mayo.name) {
      logger.error("Currently have incorrect mayo in mouth");
      return false;
    }
  
    retrieveItem(quantity, mayo);
    if (!haveItem($item(MayoClinic_templateObject8 || (MayoClinic_templateObject8 = MayoClinic_taggedTemplateLiteral(["Mayo Minder\u2122"]))))) buy($item(MayoClinic_templateObject9 || (MayoClinic_templateObject9 = MayoClinic_taggedTemplateLiteral(["Mayo Minder\u2122"]))));
  
    if (get("mayoMinderSetting") !== mayo.name) {
      withChoice(1076, mayo.id - 8260, () => use($item(MayoClinic_templateObject10 || (MayoClinic_templateObject10 = MayoClinic_taggedTemplateLiteral(["Mayo Minder\u2122"])))));
    }
  
    return get("mayoMinderSetting") === mayo.name;
  }
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/diet/knapsack.js
  function knapsack_toConsumableArray(arr) { return knapsack_arrayWithoutHoles(arr) || knapsack_iterableToArray(arr) || knapsack_unsupportedIterableToArray(arr) || knapsack_nonIterableSpread(); }
  
  function knapsack_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function knapsack_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  
  function knapsack_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return knapsack_arrayLikeToArray(arr); }
  
  function knapsack_slicedToArray(arr, i) { return knapsack_arrayWithHoles(arr) || knapsack_iterableToArrayLimit(arr, i) || knapsack_unsupportedIterableToArray(arr, i) || knapsack_nonIterableRest(); }
  
  function knapsack_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function knapsack_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
  
  function knapsack_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
  
  function knapsack_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = knapsack_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  
  function knapsack_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return knapsack_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return knapsack_arrayLikeToArray(o, minLen); }
  
  function knapsack_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function knapsack_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function knapsack_createClass(Constructor, protoProps, staticProps) { if (protoProps) knapsack_defineProperties(Constructor.prototype, protoProps); if (staticProps) knapsack_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function knapsack_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function knapsack_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  
  
  var Not = /*#__PURE__*/knapsack_createClass(function Not(thing) {
    knapsack_classCallCheck(this, Not);
  
    knapsack_defineProperty(this, "thing", void 0);
  
    this.thing = thing;
  });
  /**
   * Assuming list is already sorted, count adjacent items.
   * Effectively run-length encoding.
   *
   * @param list List to count
   * @param isEqual Function that determines item equality
   * @returns List of 2-tuples relating item to count
   */
  
  
  function aggregate(list, isEqual) {
    var aggregatedList = [];
  
    var _iterator = knapsack_createForOfIteratorHelper(list),
        _step;
  
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var item = _step.value;
  
        if (aggregatedList.length === 0) {
          aggregatedList.push([item, 1]);
        } else {
          var last = aggregatedList[aggregatedList.length - 1];
  
          var _last = knapsack_slicedToArray(last, 1),
              lastItem = _last[0];
  
          if (isEqual ? isEqual(item, lastItem) : item === lastItem) {
            last[1]++;
          } else {
            aggregatedList.push([item, 1]);
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  
    return aggregatedList;
  }
  /**
   * Solve the knapsack problem.
   *
   * @param values Array of {[item, value, weight, maximum]} tuples for knapsack parameter.
   * @param capacity Capacity of knapsack.
   * @returns Tuple {[totalValue, items]} of selected items and total value of those items.
   */
  
  
  function knapsack(values, capacity) {
    var _ref5;
  
    if (!Number.isFinite(capacity)) {
      throw new Error("Invalid capacity.");
    } // Invert negative values into a fake value for not using it.
  
  
    var valuesInverted = values.map(_ref => {
      var _ref2 = knapsack_slicedToArray(_ref, 4),
          thing = _ref2[0],
          value = _ref2[1],
          weight = _ref2[2],
          maximum = _ref2[3];
  
      return weight < 0 && maximum !== undefined ? [new Not(thing), -value, -weight, maximum] : [thing, value, weight, maximum];
    });
    var capacityAdjustment = utils_sum(values, _ref3 => {
      var _ref4 = knapsack_slicedToArray(_ref3, 4),
          weight = _ref4[2],
          maximum = _ref4[3];
  
      return weight < 0 && maximum !== undefined ? -weight * maximum : 0;
    });
    var adjustedCapacity = capacity + capacityAdjustment;
  
    if (adjustedCapacity < 0) {
      // We don't have enough cleaners to create any space, so can't fit anything.
      return [-Infinity, []];
    } // Sort values by weight.
  
  
    var valuesSorted = knapsack_toConsumableArray(valuesInverted).sort((x, y) => x[2] - y[2]); // Convert the problem into 0/1 knapsack - just include as many copies as possible of each item.
  
  
    var values01 = (_ref5 = []).concat.apply(_ref5, knapsack_toConsumableArray(valuesSorted.map(_ref6 => {
      var _ref7 = knapsack_slicedToArray(_ref6, 4),
          thing = _ref7[0],
          value = _ref7[1],
          weight = _ref7[2],
          maximum = _ref7[3];
  
      if (!Number.isFinite(weight) || weight < 0) {
        throw new Error("Invalid weight ".concat(weight, " for ").concat(thing instanceof Not ? "not ".concat(thing.thing) : thing));
      }
  
      var maxQuantity = Math.floor(maximum !== null && maximum !== void 0 ? maximum : adjustedCapacity / weight);
  
      if (maxQuantity < 0) {
        throw new Error("Invalid max quantity ".concat(maxQuantity, " for ").concat(thing instanceof Not ? "not ".concat(thing.thing) : thing));
      }
  
      return new Array(maxQuantity).fill([thing, value, weight]);
    })));
  
    var memoizationTable = new Array(values01.length);
  
    for (var i = 0; i < values01.length; i++) {
      memoizationTable[i] = new Array(adjustedCapacity).fill(null);
    }
  
    var _bestSolution = bestSolution(memoizationTable, values01, values01.length - 1, adjustedCapacity),
        _bestSolution2 = knapsack_slicedToArray(_bestSolution, 2),
        value = _bestSolution2[0],
        invertedSolution = _bestSolution2[1]; // Still need to replace Not<T>s with right quantity of T's.
  
  
    var aggregatedSolution = aggregate(invertedSolution);
    var countMap = new Map(aggregatedSolution);
    var valueAdjustment = 0;
    var solution = aggregatedSolution.filter(_ref8 => {
      var _ref9 = knapsack_slicedToArray(_ref8, 1),
          thingOrNot = _ref9[0];
  
      return !(thingOrNot instanceof Not);
    });
  
    var _iterator2 = knapsack_createForOfIteratorHelper(valuesSorted),
        _step2;
  
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _step2$value = knapsack_slicedToArray(_step2.value, 4),
            thingOrNot = _step2$value[0],
            _value = _step2$value[1],
            maximum = _step2$value[3];
  
        if (thingOrNot instanceof Not) {
          var _countMap$get;
  
          var notCount = (_countMap$get = countMap.get(thingOrNot)) !== null && _countMap$get !== void 0 ? _countMap$get : 0;
  
          if (maximum === undefined) {
            throw new Error("Cannot find maximum for item ".concat(thingOrNot.thing, "."));
          }
  
          if (notCount > maximum) {
            throw new Error("Somehow picked ".concat(notCount, " more than the maximum ").concat(notCount, " for item ").concat(thingOrNot.thing, "."));
          }
  
          if (notCount < maximum) {
            solution.push([thingOrNot.thing, maximum - notCount]);
          }
  
          valueAdjustment -= maximum * _value;
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  
    return [value + valueAdjustment, solution];
  }
  /**
   * Find the best solution to a knapsack subproblem.
   *
   * @param memoizationTable Memoization table for dynamic programming approach.
   * @param values Array of {[item, value, weight, maximum]} tuples for knapsack parameter.
   * @param currentIndex Current index into values array - only add items before this index.
   * @param remainingCapacity Remaining capacity of knapsack.
   * @returns Tuple of value to item
   */
  
  function bestSolution(memoizationTable, values, currentIndex, remainingCapacity) {
    // If we've used all our capacity, this solution is no good.
    if (remainingCapacity < 0) return [-Infinity, []];
    if (remainingCapacity === 0 || currentIndex < 0) return [0, []];
    var memoized = memoizationTable[currentIndex][remainingCapacity - 1];
    if (memoized !== null) return memoized;
  
    var _values$currentIndex = knapsack_slicedToArray(values[currentIndex], 3),
        item = _values$currentIndex[0],
        value = _values$currentIndex[1],
        weight = _values$currentIndex[2];
  
    var _bestSolution3 = bestSolution(memoizationTable, values, currentIndex - 1, remainingCapacity - weight),
        _bestSolution4 = knapsack_slicedToArray(_bestSolution3, 2),
        valueIncludeRest = _bestSolution4[0],
        itemsInclude = _bestSolution4[1];
  
    var valueInclude = valueIncludeRest + value;
  
    var _bestSolution5 = bestSolution(memoizationTable, values, currentIndex - 1, remainingCapacity),
        _bestSolution6 = knapsack_slicedToArray(_bestSolution5, 2),
        valueExclude = _bestSolution6[0],
        itemsExclude = _bestSolution6[1]; // Pick the better of the two options between including/excluding.
  
  
    var result = valueInclude > valueExclude ? [valueInclude, [].concat(knapsack_toConsumableArray(itemsInclude), [item])] : [valueExclude, itemsExclude];
    memoizationTable[currentIndex][remainingCapacity - 1] = result;
    return result;
  }
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/diet/index.js
  var diet_templateObject, diet_templateObject2, diet_templateObject3, diet_templateObject4, diet_templateObject5, diet_templateObject6, diet_templateObject7, diet_templateObject8, diet_templateObject9, diet_templateObject10, diet_templateObject11, diet_templateObject12, diet_templateObject13, diet_templateObject14, diet_templateObject15, diet_templateObject16, diet_templateObject17, diet_templateObject18, diet_templateObject19, diet_templateObject20, diet_templateObject21, diet_templateObject22, diet_templateObject23, diet_templateObject24, diet_templateObject25, diet_templateObject26, diet_templateObject27, diet_templateObject28, diet_templateObject29, diet_templateObject30, diet_templateObject31, diet_templateObject32, diet_templateObject33, diet_templateObject34, diet_templateObject35, diet_templateObject36, diet_templateObject37, diet_templateObject38, diet_templateObject39, diet_templateObject40, diet_templateObject41, diet_templateObject42, diet_templateObject43, diet_templateObject44, diet_templateObject45, diet_templateObject46, diet_templateObject47, diet_templateObject48, _templateObject49, _templateObject50, _templateObject51, _templateObject52, _templateObject53, _templateObject54, _templateObject55, _templateObject56, _templateObject57, _templateObject58, _templateObject59, _templateObject60, _templateObject61, _templateObject62, _templateObject63, _templateObject64, _templateObject65, _templateObject66, _templateObject67, _templateObject68, _templateObject69, _templateObject70, _templateObject71, _templateObject72;
  
  function diet_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = diet_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  
  function diet_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  
  function diet_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? diet_ownKeys(Object(source), !0).forEach(function (key) { diet_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : diet_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  
  function diet_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function diet_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function diet_createClass(Constructor, protoProps, staticProps) { if (protoProps) diet_defineProperties(Constructor.prototype, protoProps); if (staticProps) diet_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function diet_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function diet_toConsumableArray(arr) { return diet_arrayWithoutHoles(arr) || diet_iterableToArray(arr) || diet_unsupportedIterableToArray(arr) || diet_nonIterableSpread(); }
  
  function diet_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function diet_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  
  function diet_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return diet_arrayLikeToArray(arr); }
  
  function diet_slicedToArray(arr, i) { return diet_arrayWithHoles(arr) || diet_iterableToArrayLimit(arr, i) || diet_unsupportedIterableToArray(arr, i) || diet_nonIterableRest(); }
  
  function diet_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function diet_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return diet_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return diet_arrayLikeToArray(o, minLen); }
  
  function diet_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function diet_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
  
  function diet_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
  
  function diet_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  
  
  
  
  
  function isMonday() {
    // Checking Tuesday's ruby is a hack to see if it's Monday in Arizona.
    return modifier_get("Muscle Percent", template_string_$item(diet_templateObject || (diet_templateObject = diet_taggedTemplateLiteral(["Tuesday's ruby"])))) > 0;
  }
  
  function seasoningAdventures(item) {
    var _getRange = getRange(item.adventures),
        _getRange2 = diet_slicedToArray(_getRange, 2),
        min = _getRange2[0],
        max = _getRange2[1];
  
    return max - min <= 1 ? 1 : 0.5;
  }
  /**
  /**
   * Expected adventures from an item given a specified state
   *
   * @todo Include Salty Mouth and potentially other modifiers.
   * @param menuItem Menu item to consider
   * @param modifiers Consumption modifiers to consider
   * @returns Adventures expected
   */
  
  
  function _expectedAdventures(menuItem, modifiers) {
    var _item$notes, _item$notes2, _item$notes3, _item$notes4, _item$notes5;
  
    var item = menuItem.item;
    if (item.adventures === "") return 0;
  
    var _getRange3 = getRange(item.adventures),
        _getRange4 = diet_slicedToArray(_getRange3, 2),
        min = _getRange4[0],
        max = _getRange4[1];
  
    var interpolated = diet_toConsumableArray(new Array(max - min + 1).keys()).map(n => n + min);
  
    var forkMugMultiplier = menuItem.itemType() === "food" && (_item$notes = item.notes) !== null && _item$notes !== void 0 && _item$notes.includes("SALAD") || menuItem.itemType() === "booze" && (_item$notes2 = item.notes) !== null && _item$notes2 !== void 0 && _item$notes2.includes("BEER") ? 1.5 : 1.3;
    var aioliAdventures = item.fullness;
    var garish = modifiers.garish && ((_item$notes3 = item.notes) === null || _item$notes3 === void 0 ? void 0 : _item$notes3.includes("LASAGNA")) && !isMonday();
    var refinedPalate = modifiers.refinedPalate && ((_item$notes4 = item.notes) === null || _item$notes4 === void 0 ? void 0 : _item$notes4.includes("WINE"));
    var pinkyRing = modifiers.pinkyRing && ((_item$notes5 = item.notes) === null || _item$notes5 === void 0 ? void 0 : _item$notes5.includes("WINE"));
    return utils_sum(interpolated, baseAdventures => {
      var _item$notes6, _item$notes7;
  
      var adventures = baseAdventures;
  
      if (modifiers.forkMug) {
        adventures = Math.floor(adventures * forkMugMultiplier);
      }
  
      if ((_item$notes6 = item.notes) !== null && _item$notes6 !== void 0 && _item$notes6.includes("SAUCY") && modifiers.saucemaven) {
        adventures += (0,external_kolmafia_namespaceObject.myPrimestat)() === $stat(diet_templateObject2 || (diet_templateObject2 = diet_taggedTemplateLiteral(["Mysticality"]))) ? 5 : 3;
      }
  
      if (garish) adventures += 5;
      if (refinedPalate) adventures = Math.floor(adventures * 1.25);
      if (pinkyRing) adventures = Math.round(adventures * 1.125);
  
      if ((_item$notes7 = item.notes) !== null && _item$notes7 !== void 0 && _item$notes7.includes("MARTINI") && modifiers.tuxedoShirt) {
        adventures += 2;
      }
  
      if (menuItem.itemType() === "food" && modifiers.mayoflex) adventures++;
  
      if (menuItem.itemType() === "food" && modifiers.seasoning) {
        adventures += seasoningAdventures(item);
      }
  
      if (menuItem.itemType() === "food" && modifiers.aioli) {
        adventures += aioliAdventures;
      }
  
      if (menuItem.itemType() === "food" && modifiers.whetStone) adventures++;
      return adventures;
    }) / interpolated.length;
  }
  
  var MenuItem = /*#__PURE__*/function () {
    /**
     * Construct a new menu item, possibly with extra properties. Items in MenuItem.defaultOptions have intelligent defaults.
     *
     * @param item Item to add to menu.
     * @param options Options for this menu item
     * @param options.organ Designate item as belonging to a specific organ.
     * @param options.size Override item organ size. Necessary for any non-food/booze/spleen item.
     * @param options.maximum Maximum uses remaining today, or "auto" to check dailyusesleft Mafia property.
     * @param options.additionalValue Additional value (positive) or cost (negative) to consider with item, e.g. from buffs.
     * @param options.effect Effect associated with this menu item (pocket wish effect, sweet synthesis effect, pill keeper potion extension)
     * @param options.mayo Which mayo to use before item (ignored if mayo clinic is not installed or item is not a food)
     * @param options.note Any note to track information about item, to be used later
     */
    function MenuItem(item) {
      var _MenuItem$defaultOpti;
  
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  
      diet_classCallCheck(this, MenuItem);
  
      diet_defineProperty(this, "item", void 0);
  
      diet_defineProperty(this, "organ", void 0);
  
      diet_defineProperty(this, "size", void 0);
  
      diet_defineProperty(this, "maximum", void 0);
  
      diet_defineProperty(this, "additionalValue", void 0);
  
      diet_defineProperty(this, "effect", void 0);
  
      diet_defineProperty(this, "priceOverride", void 0);
  
      diet_defineProperty(this, "mayo", void 0);
  
      diet_defineProperty(this, "data", void 0);
  
      diet_defineProperty(this, "priceCached", void 0);
  
      diet_defineProperty(this, "itemTypeCached", void 0);
  
      var _options = diet_objectSpread(diet_objectSpread({}, options), (_MenuItem$defaultOpti = MenuItem.defaultOptions().get(item)) !== null && _MenuItem$defaultOpti !== void 0 ? _MenuItem$defaultOpti : {}),
          size = _options.size,
          organ = _options.organ,
          maximum = _options.maximum,
          additionalValue = _options.additionalValue,
          effect = _options.effect,
          priceOverride = _options.priceOverride,
          mayo = _options.mayo,
          data = _options.data;
  
      this.item = item;
      if (notNullish(maximum)) this.maximum = maximum === "auto" ? item.dailyusesleft : maximum;
      if (notNullish(additionalValue)) this.additionalValue = additionalValue;
      if (notNullish(effect)) this.effect = effect;
      if (notNullish(priceOverride)) this.priceOverride = priceOverride;
      if (notNullish(mayo)) this.mayo = mayo;
      if (notNullish(data)) this.data = data;
  
      if (notNullish(organ)) {
        this.organ = organ;
      } else {
        var typ = (0,external_kolmafia_namespaceObject.itemType)(this.item);
  
        if (isOrgan(typ)) this.organ = typ;
      }
  
      this.size = size !== null && size !== void 0 ? size : this.organ === "food" ? this.item.fullness : this.organ === "booze" ? this.item.inebriety : this.organ === "spleen item" ? this.item.spleen : 0;
    }
  
    diet_createClass(MenuItem, [{
      key: "equals",
      value: function equals(other) {
        return this.item === other.item && this.effect === other.effect;
      }
    }, {
      key: "toString",
      value: function toString() {
        if (this.effect) {
          return "".concat(this.item, ":").concat(this.effect);
        }
  
        return this.item.toString();
      }
    }, {
      key: "price",
      value: function price() {
        if (!this.priceCached) {
          var _this$priceOverride;
  
          this.priceCached = (_this$priceOverride = this.priceOverride) !== null && _this$priceOverride !== void 0 ? _this$priceOverride : MenuItem.defaultPriceFunction(this.item);
        }
  
        return this.priceCached;
      }
    }, {
      key: "itemType",
      value: function itemType() {
        if (!this.itemTypeCached) {
          this.itemTypeCached = (0,external_kolmafia_namespaceObject.itemType)(this.item);
        }
  
        return this.itemTypeCached;
      }
    }], [{
      key: "defaultOptions",
      value: function defaultOptions() {
        return new Map([[template_string_$item(diet_templateObject3 || (diet_templateObject3 = diet_taggedTemplateLiteral(["distention pill"]))), {
          organ: "food",
          maximum: !lib_have(template_string_$item(diet_templateObject4 || (diet_templateObject4 = diet_taggedTemplateLiteral(["distention pill"])))) || property_get("_distentionPillUsed") ? 0 : 1,
          size: -1
        }], [template_string_$item(diet_templateObject5 || (diet_templateObject5 = diet_taggedTemplateLiteral(["synthetic dog hair pill"]))), {
          organ: "booze",
          maximum: !lib_have(template_string_$item(diet_templateObject6 || (diet_templateObject6 = diet_taggedTemplateLiteral(["synthetic dog hair pill"])))) || property_get("_syntheticDogHairPillUsed") ? 0 : 1,
          size: -1
        }], [template_string_$item(diet_templateObject7 || (diet_templateObject7 = diet_taggedTemplateLiteral(["cuppa Voraci tea"]))), {
          organ: "food",
          maximum: property_get("_voraciTeaUsed") ? 0 : 1,
          size: -1
        }], [template_string_$item(diet_templateObject8 || (diet_templateObject8 = diet_taggedTemplateLiteral(["cuppa Sobrie tea"]))), {
          organ: "booze",
          maximum: property_get("_sobrieTeaUsed") ? 0 : 1,
          size: -1
        }], [template_string_$item(diet_templateObject9 || (diet_templateObject9 = diet_taggedTemplateLiteral(["mojo filter"]))), {
          organ: "spleen item",
          maximum: 3 - property_get("currentMojoFilters"),
          size: -1
        }], [template_string_$item(diet_templateObject10 || (diet_templateObject10 = diet_taggedTemplateLiteral(["spice melange"]))), {
          maximum: property_get("spiceMelangeUsed") ? 0 : 1
        }], [template_string_$item(diet_templateObject11 || (diet_templateObject11 = diet_taggedTemplateLiteral(["Ultra Mega Sour Ball"]))), {
          maximum: property_get("_ultraMegaSourBallUsed") ? 0 : 1
        }], [template_string_$item(diet_templateObject12 || (diet_templateObject12 = diet_taggedTemplateLiteral(["The Plumber's mushroom stew"]))), {
          maximum: property_get("_plumbersMushroomStewEaten") ? 0 : 1
        }], [template_string_$item(diet_templateObject13 || (diet_templateObject13 = diet_taggedTemplateLiteral(["The Mad Liquor"]))), {
          maximum: property_get("_madLiquorDrunk") ? 0 : 1
        }], [template_string_$item(diet_templateObject14 || (diet_templateObject14 = diet_taggedTemplateLiteral(["Doc Clock's thyme cocktail"]))), {
          maximum: property_get("_docClocksThymeCocktailDrunk") ? 0 : 1
        }], [template_string_$item(diet_templateObject15 || (diet_templateObject15 = diet_taggedTemplateLiteral(["Mr. Burnsger"]))), {
          maximum: property_get("_mrBurnsgerEaten") ? 0 : 1
        }], [template_string_$item(diet_templateObject16 || (diet_templateObject16 = diet_taggedTemplateLiteral(["Calzone of Legend"]))), {
          maximum: property_get("calzoneOfLegendEaten") ? 0 : 1
        }], [template_string_$item(diet_templateObject17 || (diet_templateObject17 = diet_taggedTemplateLiteral(["Deep Dish of Legend"]))), {
          maximum: property_get("deepDishOfLegendEaten") ? 0 : 1
        }], [template_string_$item(diet_templateObject18 || (diet_templateObject18 = diet_taggedTemplateLiteral(["Pizza of Legend"]))), {
          maximum: property_get("pizzaOfLegendEaten") ? 0 : 1
        }], [template_string_$item(diet_templateObject19 || (diet_templateObject19 = diet_taggedTemplateLiteral(["jar of fermented pickle juice"]))), {
          maximum: property_get("_pickleJuiceDrunk") ? 0 : 1
        }], [template_string_$item(diet_templateObject20 || (diet_templateObject20 = diet_taggedTemplateLiteral(["extra-greasy slider"]))), {
          maximum: property_get("_extraGreasySliderEaten") ? 0 : 1
        }], [template_string_$item(diet_templateObject21 || (diet_templateObject21 = diet_taggedTemplateLiteral(["voodoo snuff"]))), {
          maximum: property_get("_voodooSnuffUsed") ? 0 : 1
        }], [template_string_$item(diet_templateObject22 || (diet_templateObject22 = diet_taggedTemplateLiteral(["Ol' Scratch's salad fork"]))), {
          maximum: property_get("_saladForkUsed") ? 0 : 1
        }], [template_string_$item(diet_templateObject23 || (diet_templateObject23 = diet_taggedTemplateLiteral(["Frosty's frosty mug"]))), {
          maximum: property_get("_frostyMugUsed") ? 0 : 1
        }], [template_string_$item(diet_templateObject24 || (diet_templateObject24 = diet_taggedTemplateLiteral(["tin cup of mulligan stew"]))), {
          maximum: property_get("_mulliganStewEaten") ? 0 : 1
        }], [template_string_$item(diet_templateObject25 || (diet_templateObject25 = diet_taggedTemplateLiteral(["Hodgman's blanket"]))), {
          maximum: property_get("_hodgmansBlanketDrunk") ? 0 : 1
        }]]);
      }
    }]);
  
    return MenuItem;
  }();
  
  diet_defineProperty(MenuItem, "defaultPriceFunction", item => (0,external_kolmafia_namespaceObject.npcPrice)(item) > 0 ? (0,external_kolmafia_namespaceObject.npcPrice)(item) : (0,external_kolmafia_namespaceObject.mallPrice)(item));
  
  var organs = ["food", "booze", "spleen item"];
  /**
   * @param x Name of thing that might be an organ
   * @returns Whether the string supplied is the name of an organ
   */
  
  function isOrgan(x) {
    return organs.includes(x);
  }
  
  var DietPlanner = /*#__PURE__*/function () {
    function DietPlanner(mpa, menu) {
      var _this = this;
  
      diet_classCallCheck(this, DietPlanner);
  
      diet_defineProperty(this, "mpa", void 0);
  
      diet_defineProperty(this, "menu", void 0);
  
      diet_defineProperty(this, "mayoLookup", void 0);
  
      diet_defineProperty(this, "fork", void 0);
  
      diet_defineProperty(this, "mug", void 0);
  
      diet_defineProperty(this, "seasoning", void 0);
  
      diet_defineProperty(this, "whetStone", void 0);
  
      diet_defineProperty(this, "aioli", void 0);
  
      diet_defineProperty(this, "spleenValue", 0);
  
      diet_defineProperty(this, "baseDefaultModifiers", {
        forkMug: false,
        seasoning: false,
        whetStone: false,
        aioli: false,
        mayoflex: false,
        refinedPalate: lib_have(template_string_$effect(diet_templateObject26 || (diet_templateObject26 = diet_taggedTemplateLiteral(["Refined Palate"])))),
        garish: lib_have(template_string_$effect(diet_templateObject27 || (diet_templateObject27 = diet_taggedTemplateLiteral(["Gar-ish"])))),
        saucemaven: lib_have(template_string_$skill(diet_templateObject28 || (diet_templateObject28 = diet_taggedTemplateLiteral(["Saucemaven"])))),
        pinkyRing: lib_have(template_string_$item(diet_templateObject29 || (diet_templateObject29 = diet_taggedTemplateLiteral(["mafia pinky ring"])))) && (0,external_kolmafia_namespaceObject.canEquip)(template_string_$item(diet_templateObject30 || (diet_templateObject30 = diet_taggedTemplateLiteral(["mafia pinky ring"])))),
        tuxedoShirt: lib_have(template_string_$item(diet_templateObject31 || (diet_templateObject31 = diet_taggedTemplateLiteral(["tuxedo shirt"])))) && (0,external_kolmafia_namespaceObject.canEquip)(template_string_$item(diet_templateObject32 || (diet_templateObject32 = diet_taggedTemplateLiteral(["tuxedo shirt"]))))
      });
  
      this.mpa = mpa;
      var fork = menu.find(item => item.item === template_string_$item(diet_templateObject33 || (diet_templateObject33 = diet_taggedTemplateLiteral(["Ol' Scratch's salad fork"]))));
      if (fork) this.fork = fork;
      var mug = menu.find(item => item.item === template_string_$item(diet_templateObject34 || (diet_templateObject34 = diet_taggedTemplateLiteral(["Frosty's frosty mug"]))));
      if (mug) this.mug = mug;
      var seasoning = menu.find(item => item.item === template_string_$item(diet_templateObject35 || (diet_templateObject35 = diet_taggedTemplateLiteral(["Special Seasoning"]))));
      if (seasoning) this.seasoning = seasoning;
      var whetStone = menu.find(item => item.item === template_string_$item(diet_templateObject36 || (diet_templateObject36 = diet_taggedTemplateLiteral(["whet stone"]))));
      if (whetStone) this.whetStone = whetStone;
      var aioli = menu.find(item => item.item === template_string_$item(diet_templateObject37 || (diet_templateObject37 = diet_taggedTemplateLiteral(["mini kiwi aioli"]))));
      if (aioli) this.aioli = aioli;
      this.mayoLookup = new Map();
  
      if (installed()) {
        var _loop = function _loop() {
          var mayo = _arr2[_i2];
          var menuItem = menu.find(item => item.item === mayo);
          if (menuItem) _this.mayoLookup.set(mayo, menuItem);
        };
  
        for (var _i2 = 0, _arr2 = [Mayo.flex, Mayo.zapine]; _i2 < _arr2.length; _i2++) {
          _loop();
        }
      }
  
      this.menu = menu.filter(item => item.organ);
  
      if (menu.filter(item => (0,external_kolmafia_namespaceObject.historicalPrice)(item.item) === 0 || (0,external_kolmafia_namespaceObject.historicalAge)(item.item) >= 1).length > 100) {
        (0,external_kolmafia_namespaceObject.mallPrices)("food");
        (0,external_kolmafia_namespaceObject.mallPrices)("booze");
      }
  
      var spleenItems = menu.filter(item => (0,external_kolmafia_namespaceObject.itemType)(item.item) === "spleen item");
      spleenItems.sort((x, y) => -(this.consumptionValue(x) / x.item.spleen - this.consumptionValue(y) / y.item.spleen));
  
      if (spleenItems.length > 0) {
        // Marginal value for sliders and jars depends on our best unlimited spleen item.
        // TODO: spleenLimit() - mySpleenUse() is a poor estimate.
        var bestMarginalSpleenItem = spleenItems.find(spleenItem => spleenItem.maximum === undefined || spleenItem.maximum * spleenItem.size >= (0,external_kolmafia_namespaceObject.spleenLimit)() - (0,external_kolmafia_namespaceObject.mySpleenUse)());
  
        if (bestMarginalSpleenItem) {
          this.spleenValue = Math.max(0, this.consumptionValue(bestMarginalSpleenItem) / bestMarginalSpleenItem.size);
        }
      }
    }
    /**
     * Determine the value of consuming a menu item with any profitable helpers.
     *
     * @param menuItem Menu item to check.
     * @returns Value for consuming that menu item.
     */
  
  
    diet_createClass(DietPlanner, [{
      key: "consumptionValue",
      value: function consumptionValue(menuItem) {
        return this.consumptionHelpersAndValue(menuItem, {})[1];
      }
      /**
       * Determine which helpers will be used with a menu item and its resulting value.
       *
       * @param menuItem Menu item to check.
       * @param overrideModifiers Overrides for consumption modifiers, if any.
       * @returns Pair [array of helpers and base menu item, value].
       */
  
    }, {
      key: "consumptionHelpersAndValue",
      value: function consumptionHelpersAndValue(menuItem, overrideModifiers) {
        var _menuItem$additionalV, _menuItem$additionalV2;
  
        var helpers = [];
  
        if (menuItem.itemType() === "food" && this.mayoLookup.size) {
          var mayo = menuItem.mayo ? this.mayoLookup.get(menuItem.mayo) : this.mayoLookup.get(Mayo.flex);
          if (mayo) helpers.push(mayo);
        }
  
        var defaultModifiers = diet_objectSpread(diet_objectSpread({}, this.baseDefaultModifiers), {}, {
          mayoflex: this.mayoLookup.size ? helpers.some(item => item.item === Mayo.flex) : false
        }, overrideModifiers);
  
        if (this.seasoning && menuItem.itemType() === "food" && this.mpa * seasoningAdventures(menuItem.item) > this.seasoning.price()) {
          helpers.push(this.seasoning);
        }
  
        if (this.whetStone && menuItem.itemType() === "food" && this.mpa > this.whetStone.price()) {
          helpers.push(this.whetStone);
        }
  
        if (this.aioli && menuItem.itemType() === "food" && this.mpa * menuItem.item.fullness > this.aioli.price()) {
          helpers.push(this.aioli);
        }
  
        var forkMug = menuItem.itemType() === "food" ? this.fork : menuItem.itemType() === "booze" ? this.mug : null;
        var forkMugPrice = forkMug ? forkMug.price() : Infinity;
        var baseCost = menuItem.price() + utils_sum(helpers, item => item.price());
        var valueRaw = _expectedAdventures(menuItem, defaultModifiers) * this.mpa - baseCost + ((_menuItem$additionalV = menuItem.additionalValue) !== null && _menuItem$additionalV !== void 0 ? _menuItem$additionalV : 0);
        var valueForkMug = _expectedAdventures(menuItem, diet_objectSpread(diet_objectSpread({}, defaultModifiers), {}, {
          forkMug: true
        })) * this.mpa - baseCost - forkMugPrice + ((_menuItem$additionalV2 = menuItem.additionalValue) !== null && _menuItem$additionalV2 !== void 0 ? _menuItem$additionalV2 : 0);
        var valueSpleen = template_string_$items(diet_templateObject38 || (diet_templateObject38 = diet_taggedTemplateLiteral(["jar of fermented pickle juice, extra-greasy slider"]))).includes(menuItem.item) ? 5 * this.spleenValue : 0;
        return forkMug && valueForkMug > valueRaw ? [[].concat(helpers, [forkMug, menuItem]), valueForkMug + valueSpleen] : [[].concat(helpers, [menuItem]), valueRaw + valueSpleen];
      }
      /**
       * Plan an individual organ.
       *
       * @param organ Organ to plan
       * @param capacity Organ capacity.
       * @param overrideModifiers Overrides for consumption modifiers, if any.
       * @returns Pair of [value, menu items and quantities].
       */
  
    }, {
      key: "planOrgan",
      value: function planOrgan(organ, capacity) {
        var overrideModifiers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var submenu = this.menu.filter(menuItem => menuItem.organ === organ && (0,external_kolmafia_namespaceObject.myLevel)() >= menuItem.item.levelreq);
        var knapsackValues = submenu.map(menuItem => [].concat(diet_toConsumableArray(this.consumptionHelpersAndValue(menuItem, overrideModifiers)), [menuItem.size, menuItem.maximum]));
        return knapsack(knapsackValues, capacity);
      }
      /**
       * Plan organs.
       *
       * @param organCapacities Organ capacities.
       * @param overrideModifiers Overrides for consumption modifiers, if any.
       * @returns Pair of [value, menu items and quantities].
       */
  
    }, {
      key: "planOrgans",
      value: function planOrgans(organCapacities) {
        var _ref5;
  
        var overrideModifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var valuePlans = organCapacities.map(_ref => {
          var _ref2 = diet_slicedToArray(_ref, 2),
              organ = _ref2[0],
              capacity = _ref2[1];
  
          return this.planOrgan(organ, capacity, overrideModifiers);
        });
        return [utils_sum(valuePlans, _ref3 => {
          var _ref4 = diet_slicedToArray(_ref3, 1),
              value = _ref4[0];
  
          return value;
        }), (_ref5 = []).concat.apply(_ref5, diet_toConsumableArray(valuePlans.map(_ref6 => {
          var _ref7 = diet_slicedToArray(_ref6, 2),
              plan = _ref7[1];
  
          return plan;
        })))];
      }
      /**
       * Plan organs, retrying with and without each trial item. Runtime is
       * proportional to 2 ^ trialItems.length.
       *
       * @param organCapacities Organ capacities.
       * @param trialItems Items to rerun solver with and without.
       * @param overrideModifiers Overrides for consumption modifiers, if any.
       * @returns Pair of [value, menu items and quantities].
       */
  
    }, {
      key: "planOrgansWithTrials",
      value: function planOrgansWithTrials(organCapacities, trialItems, overrideModifiers) {
        if (trialItems.length === 0) {
          return this.planOrgans(organCapacities, overrideModifiers);
        }
  
        var _trialItems$ = diet_slicedToArray(trialItems[0], 2),
            trialItem = _trialItems$[0],
            organSizes = _trialItems$[1];
  
        if (trialItem.maximum !== undefined && trialItem.maximum <= 0) {
          return this.planOrgansWithTrials(organCapacities, trialItems.slice(1), overrideModifiers);
        }
  
        var organCapacitiesWithMap = new Map(organCapacities);
  
        var _iterator = diet_createForOfIteratorHelper(organSizes),
            _step;
  
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = diet_slicedToArray(_step.value, 2),
                organ = _step$value[0],
                size = _step$value[1];
  
            var current = organCapacitiesWithMap.get(organ);
  
            if (current === undefined) {
              // Organs with no capacity are excluded from the organCapacities map, so this item excluded from the trial.
              // Solves the problem with the diet offering to eat toasted brie after exiting Shrunken Adventurer with 20/15 fullness.
              return this.planOrgansWithTrials(organCapacities, trialItems.slice(1), overrideModifiers);
            }
  
            organCapacitiesWithMap.set(organ, current - size);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
  
        var organCapacitiesWith = diet_toConsumableArray(organCapacitiesWithMap);
  
        var isRefinedPalate = trialItem.item === template_string_$item(diet_templateObject39 || (diet_templateObject39 = diet_taggedTemplateLiteral(["pocket wish"]))) && trialItem.effect === template_string_$effect(diet_templateObject40 || (diet_templateObject40 = diet_taggedTemplateLiteral(["Refined Palate"]))) || trialItem.item === template_string_$item(diet_templateObject41 || (diet_templateObject41 = diet_taggedTemplateLiteral(["toasted brie"])));
        var isGarish = trialItem.item === template_string_$item(diet_templateObject42 || (diet_templateObject42 = diet_taggedTemplateLiteral(["pocket wish"]))) && trialItem.effect === template_string_$effect(diet_templateObject43 || (diet_templateObject43 = diet_taggedTemplateLiteral(["Gar-ish"]))) || trialItem.item === template_string_$item(diet_templateObject44 || (diet_templateObject44 = diet_taggedTemplateLiteral(["potion of the field gar"])));
  
        var _this$planOrgansWithT = this.planOrgansWithTrials(organCapacities, trialItems.slice(1), overrideModifiers),
            _this$planOrgansWithT2 = diet_slicedToArray(_this$planOrgansWithT, 2),
            valueWithout = _this$planOrgansWithT2[0],
            planWithout = _this$planOrgansWithT2[1];
  
        var _this$planOrgansWithT3 = this.planOrgansWithTrials(organCapacitiesWith, trialItems.slice(1), diet_objectSpread(diet_objectSpread(diet_objectSpread({}, overrideModifiers), isRefinedPalate ? {
          refinedPalate: true
        } : {}), isGarish ? {
          garish: true
        } : {})),
            _this$planOrgansWithT4 = diet_slicedToArray(_this$planOrgansWithT3, 2),
            valueWith = _this$planOrgansWithT4[0],
            planWith = _this$planOrgansWithT4[1];
  
        var _this$consumptionHelp = this.consumptionHelpersAndValue(trialItem, {}),
            _this$consumptionHelp2 = diet_slicedToArray(_this$consumptionHelp, 2),
            helpersAndItem = _this$consumptionHelp2[0],
            value = _this$consumptionHelp2[1];
  
        return valueWithout > valueWith + value ? [valueWithout, planWithout] : [valueWith + value, [].concat(diet_toConsumableArray(planWith), [[helpersAndItem, 1]])];
      }
    }]);
  
    return DietPlanner;
  }();
  /**
   * Because the knapsack solver is one-dimensional only, any items that touch
   * multiple organs have to be treated specially. What we do is run the knapsack
   * solver multiple times, trying with + without each interacting item.
   */
  
  
  var interactingItems = [[template_string_$item(diet_templateObject45 || (diet_templateObject45 = diet_taggedTemplateLiteral(["spice melange"]))), [["food", -3], ["booze", -3]]], [template_string_$item(diet_templateObject46 || (diet_templateObject46 = diet_taggedTemplateLiteral(["Ultra Mega Sour Ball"]))), [["food", -3], ["booze", -3]]], [template_string_$item(diet_templateObject47 || (diet_templateObject47 = diet_taggedTemplateLiteral(["The Plumber's mushroom stew"]))), [["food", 3], ["booze", -1]]], [template_string_$item(diet_templateObject48 || (diet_templateObject48 = diet_taggedTemplateLiteral(["The Mad Liquor"]))), [["food", -1], ["booze", 3]]], [template_string_$item(_templateObject49 || (_templateObject49 = diet_taggedTemplateLiteral(["Doc Clock's thyme cocktail"]))), [["food", -2], ["booze", 4]]], [template_string_$item(_templateObject50 || (_templateObject50 = diet_taggedTemplateLiteral(["Mr. Burnsger"]))), [["food", 4], ["booze", -2]]], [template_string_$effect(_templateObject51 || (_templateObject51 = diet_taggedTemplateLiteral(["Refined Palate"]))), []], [template_string_$item(_templateObject52 || (_templateObject52 = diet_taggedTemplateLiteral(["toasted brie"]))), [["food", 2]]], [template_string_$effect(_templateObject53 || (_templateObject53 = diet_taggedTemplateLiteral(["Gar-ish"]))), []], [template_string_$item(_templateObject54 || (_templateObject54 = diet_taggedTemplateLiteral(["potion of the field gar"]))), []]];
  /**
   * Plan out an optimal diet using a knapsack algorithm.
   *
   * @param mpa Meat per adventure value.
   * @param menu Array of MenuItems to consider for diet purposes.
   * @param organCapacities Optional override of each organ's capacity.
   * @returns Array of [menu item and helpers, count].
   */
  
  function planDiet(mpa, menu) {
    var organCapacities = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [["food", null], ["booze", null], ["spleen item", null]];
    // FIXME: Figure out a better way to handle overfull organs (e.g. coming out of Ed).
    var resolvedOrganCapacities = organCapacities.map(_ref8 => {
      var _ref9 = diet_slicedToArray(_ref8, 2),
          organ = _ref9[0],
          size = _ref9[1];
  
      return [organ, size !== null && size !== void 0 ? size : organ === "food" ? (0,external_kolmafia_namespaceObject.fullnessLimit)() - (0,external_kolmafia_namespaceObject.myFullness)() : organ === "booze" ? (0,external_kolmafia_namespaceObject.inebrietyLimit)() - (0,external_kolmafia_namespaceObject.myInebriety)() : organ === "spleen item" ? (0,external_kolmafia_namespaceObject.spleenLimit)() - (0,external_kolmafia_namespaceObject.mySpleenUse)() : 0];
    });
    /**
     * Per above description, separate out items with cross-organ interaction
     * ("interacting items") for special treatment. These will be checked by
     * running the solver several times.
     */
  
    var includedInteractingItems = menu.map(menuItem => {
      var interacting = interactingItems.find(_ref10 => {
        var _ref11 = diet_slicedToArray(_ref10, 1),
            itemOrEffect = _ref11[0];
  
        return menuItem.item === itemOrEffect || menuItem.item === template_string_$item(_templateObject55 || (_templateObject55 = diet_taggedTemplateLiteral(["pocket wish"]))) && menuItem.effect === itemOrEffect;
      });
  
      if (interacting) {
        var _interacting = diet_slicedToArray(interacting, 2),
            organSizes = _interacting[1];
  
        return [menuItem, organSizes];
      } else {
        return null;
      }
    }).filter(value => value !== null); // Filter out interacting items from natural consideration.
  
    var dietPlanner = new DietPlanner(mpa, menu.filter(menuItem => !includedInteractingItems.some(_ref12 => {
      var _ref13 = diet_slicedToArray(_ref12, 1),
          interacting = _ref13[0];
  
      return interacting === menuItem;
    })));
    /**
     * Because our knapsack solver is one-dimensional, we have to consider
     * each organ separately. Since there are no spleen items that affect
     * stomach/liver, we consider those two first, with an approximation of the
     * value of spleen-cleaning. Afterwards, we see how much spleen we have and
     * plan that.
     */
  
    var _dietPlanner$planOrga = dietPlanner.planOrgansWithTrials(resolvedOrganCapacities.filter(_ref14 => {
      var _ref15 = diet_slicedToArray(_ref14, 2),
          organ = _ref15[0],
          capacity = _ref15[1];
  
      return ["food", "booze"].includes(organ) && capacity >= 0;
    }), includedInteractingItems, {}),
        _dietPlanner$planOrga2 = diet_slicedToArray(_dietPlanner$planOrga, 2),
        planFoodBooze = _dietPlanner$planOrga2[1];
  
    var spleenCapacity = resolvedOrganCapacities.find(_ref16 => {
      var _ref17 = diet_slicedToArray(_ref16, 1),
          organ = _ref17[0];
  
      return organ === "spleen item";
    });
  
    if (spleenCapacity) {
      // Count sliders and pickle juice, figure out how much extra spleen we got.
      var additionalSpleen = utils_sum(planFoodBooze, _ref18 => {
        var _ref19 = diet_slicedToArray(_ref18, 2),
            items = _ref19[0],
            number = _ref19[1];
  
        return items.some(menuItem => template_string_$items(_templateObject56 || (_templateObject56 = diet_taggedTemplateLiteral(["jar of fermented pickle juice, extra-greasy slider"]))).includes(menuItem.item)) ? 5 * number : 0;
      });
  
      var _spleenCapacity = diet_slicedToArray(spleenCapacity, 2),
          availableSpleen = _spleenCapacity[1];
  
      var _dietPlanner$planOrga3 = dietPlanner.planOrgan("spleen item", availableSpleen + additionalSpleen),
          _dietPlanner$planOrga4 = diet_slicedToArray(_dietPlanner$planOrga3, 2),
          planSpleen = _dietPlanner$planOrga4[1];
  
      return [].concat(diet_toConsumableArray(planFoodBooze), diet_toConsumableArray(planSpleen));
    } else {
      return planFoodBooze;
    }
  }
  
  var DietEntry = /*#__PURE__*/function () {
    function DietEntry(menuItems, quantity) {
      diet_classCallCheck(this, DietEntry);
  
      diet_defineProperty(this, "quantity", void 0);
  
      diet_defineProperty(this, "menuItems", void 0);
  
      this.menuItems = Object.freeze(menuItems);
      this.quantity = quantity;
    }
  
    diet_createClass(DietEntry, [{
      key: "target",
      value: function target() {
        return this.menuItems[this.menuItems.length - 1];
      }
    }, {
      key: "helpers",
      value: function helpers() {
        if (this.menuItems.length > 1) {
          return this.menuItems.slice(0, -1);
        }
  
        return [];
      }
    }, {
      key: "expectedAdventures",
      value: function expectedAdventures(diet) {
        {
          if (this.menuItems.length === 0 || this.quantity === 0) {
            return 0;
          } else {
            var items = this.menuItems.map(m => m.item);
            var targetItem = this.menuItems[this.menuItems.length - 1].item;
            var fork = (0,external_kolmafia_namespaceObject.itemType)(targetItem) === "food" && items.includes(template_string_$item(_templateObject57 || (_templateObject57 = diet_taggedTemplateLiteral(["Ol' Scratch's salad fork"]))));
            var mug = (0,external_kolmafia_namespaceObject.itemType)(targetItem) === "booze" && items.includes(template_string_$item(_templateObject58 || (_templateObject58 = diet_taggedTemplateLiteral(["Frosty's frosty mug"]))));
            return this.quantity * _expectedAdventures(this.menuItems[this.menuItems.length - 1], {
              forkMug: fork || mug,
              seasoning: items.includes(template_string_$item(_templateObject59 || (_templateObject59 = diet_taggedTemplateLiteral(["Special Seasoning"])))),
              whetStone: items.includes(template_string_$item(_templateObject60 || (_templateObject60 = diet_taggedTemplateLiteral(["whet stone"])))),
              aioli: items.includes(template_string_$item(_templateObject61 || (_templateObject61 = diet_taggedTemplateLiteral(["mini kiwi aioli"])))),
              mayoflex: items.includes(Mayo.flex),
              refinedPalate: diet.refinedPalate,
              garish: diet.garish,
              saucemaven: diet.saucemaven,
              pinkyRing: diet.pinkyRing,
              tuxedoShirt: diet.tuxedoShirt
            });
          }
        }
      }
    }, {
      key: "expectedValue",
      value: function expectedValue(mpa, diet) {
        var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "gross";
        var gross = mpa * this.expectedAdventures(diet) + this.quantity * utils_sum(this.menuItems, menuItem => {
          var _menuItem$additionalV3;
  
          return (_menuItem$additionalV3 = menuItem.additionalValue) !== null && _menuItem$additionalV3 !== void 0 ? _menuItem$additionalV3 : 0;
        });
  
        if (method === "gross") {
          return gross;
        } else {
          return gross - this.expectedPrice();
        }
      }
    }, {
      key: "expectedPrice",
      value: function expectedPrice() {
        return this.quantity * utils_sum(this.menuItems, menuItem => menuItem.price());
      }
    }]);
  
    return DietEntry;
  }();
  /**
   * A representation of a potential diet
   */
  
  
  var Diet = /*#__PURE__*/function () {
    function Diet() {
      var entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  
      diet_classCallCheck(this, Diet);
  
      diet_defineProperty(this, "entries", void 0);
  
      this.entries = entries;
    }
  
    diet_createClass(Diet, [{
      key: "refinedPalate",
      get: function get() {
        return this.entries.some(dietEntry => dietEntry.menuItems.some(trialItem => trialItem.item === template_string_$item(_templateObject62 || (_templateObject62 = diet_taggedTemplateLiteral(["pocket wish"]))) && trialItem.effect === template_string_$effect(_templateObject63 || (_templateObject63 = diet_taggedTemplateLiteral(["Refined Palate"]))) || trialItem.item === template_string_$item(_templateObject64 || (_templateObject64 = diet_taggedTemplateLiteral(["toasted brie"])))));
      }
    }, {
      key: "garish",
      get: function get() {
        return this.entries.some(dietEntry => dietEntry.menuItems.some(trialItem => trialItem.item === template_string_$item(_templateObject65 || (_templateObject65 = diet_taggedTemplateLiteral(["pocket wish"]))) && trialItem.effect === template_string_$effect(_templateObject66 || (_templateObject66 = diet_taggedTemplateLiteral(["Gar-ish"]))) || trialItem.item === template_string_$item(_templateObject67 || (_templateObject67 = diet_taggedTemplateLiteral(["potion of the field gar"])))));
      }
    }, {
      key: "saucemaven",
      get: function get() {
        return lib_have(template_string_$skill(_templateObject68 || (_templateObject68 = diet_taggedTemplateLiteral(["Saucemaven"]))));
      }
    }, {
      key: "tuxedoShirt",
      get: function get() {
        return lib_have(template_string_$item(_templateObject69 || (_templateObject69 = diet_taggedTemplateLiteral(["tuxedo shirt"])))) && (0,external_kolmafia_namespaceObject.canEquip)(template_string_$item(_templateObject70 || (_templateObject70 = diet_taggedTemplateLiteral(["tuxedo shirt"]))));
      }
    }, {
      key: "pinkyRing",
      get: function get() {
        return lib_have(template_string_$item(_templateObject71 || (_templateObject71 = diet_taggedTemplateLiteral(["mafia pinky ring"])))) && (0,external_kolmafia_namespaceObject.canEquip)(template_string_$item(_templateObject72 || (_templateObject72 = diet_taggedTemplateLiteral(["mafia pinky ring"]))));
      }
    }, {
      key: "expectedAdventures",
      value: function expectedAdventures() {
        return utils_sum(this.entries, dietEntry => dietEntry.expectedAdventures(this));
      }
    }, {
      key: "expectedValue",
      value: function expectedValue(mpa) {
        var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "gross";
        return utils_sum(this.entries, dietEntry => dietEntry.expectedValue(mpa, this, method));
      }
    }, {
      key: "expectedPrice",
      value: function expectedPrice() {
        return utils_sum(this.entries, dietEntry => dietEntry.expectedPrice());
      }
    }, {
      key: "copy",
      value: function copy() {
        return new Diet(diet_toConsumableArray(this.entries));
      }
    }], [{
      key: "from",
      value: function from(rawDiet) {
        var diet = rawDiet.map(item => {
          var _item = diet_slicedToArray(item, 2),
              menuItems = _item[0],
              quantity = _item[1];
  
          return new DietEntry(menuItems, quantity);
        });
        return new Diet(diet);
      }
    }, {
      key: "plan",
      value: function plan(mpa, menu) {
        var organCapacities = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
          food: "auto",
          booze: "auto",
          spleen: "auto"
        };
        var food = organCapacities.food,
            booze = organCapacities.booze,
            spleen = organCapacities.spleen;
        var plannerCapacity = [];
  
        if (food) {
          plannerCapacity.push(["food", food === "auto" ? null : food]);
        }
  
        if (booze) {
          plannerCapacity.push(["booze", booze === "auto" ? null : booze]);
        }
  
        if (spleen) {
          plannerCapacity.push(["spleen item", spleen === "auto" ? null : spleen]);
        }
  
        return Diet.from(planDiet(mpa, menu, plannerCapacity));
      }
    }]);
  
    return Diet;
  }();
  ;// CONCATENATED MODULE: ./src/tasks/diet.ts
  var tasks_diet_templateObject, tasks_diet_templateObject2, tasks_diet_templateObject3, tasks_diet_templateObject4, tasks_diet_templateObject5, tasks_diet_templateObject6, tasks_diet_templateObject7, tasks_diet_templateObject8, tasks_diet_templateObject9, tasks_diet_templateObject10, tasks_diet_templateObject11, tasks_diet_templateObject12, tasks_diet_templateObject13, tasks_diet_templateObject14, tasks_diet_templateObject15, tasks_diet_templateObject16, tasks_diet_templateObject17, tasks_diet_templateObject18, tasks_diet_templateObject19, tasks_diet_templateObject20, tasks_diet_templateObject21, tasks_diet_templateObject22, tasks_diet_templateObject23, tasks_diet_templateObject24, tasks_diet_templateObject25, tasks_diet_templateObject26, tasks_diet_templateObject27, tasks_diet_templateObject28, tasks_diet_templateObject29, tasks_diet_templateObject30, tasks_diet_templateObject31, tasks_diet_templateObject32, tasks_diet_templateObject33, tasks_diet_templateObject34, tasks_diet_templateObject35, tasks_diet_templateObject36, tasks_diet_templateObject37, tasks_diet_templateObject38, tasks_diet_templateObject39, tasks_diet_templateObject40, tasks_diet_templateObject41, tasks_diet_templateObject42, tasks_diet_templateObject43, tasks_diet_templateObject44, tasks_diet_templateObject45, tasks_diet_templateObject46, tasks_diet_templateObject47, tasks_diet_templateObject48, diet_templateObject49, diet_templateObject50, diet_templateObject51, diet_templateObject52, diet_templateObject53, diet_templateObject54, diet_templateObject55, diet_templateObject56, diet_templateObject57, diet_templateObject58, diet_templateObject59, diet_templateObject60, diet_templateObject61, diet_templateObject62, diet_templateObject63, diet_templateObject64, diet_templateObject65, diet_templateObject66, diet_templateObject67, diet_templateObject68, diet_templateObject69, diet_templateObject70, diet_templateObject71;
  
  function tasks_diet_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = tasks_diet_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  
  function tasks_diet_slicedToArray(arr, i) { return tasks_diet_arrayWithHoles(arr) || tasks_diet_iterableToArrayLimit(arr, i) || tasks_diet_unsupportedIterableToArray(arr, i) || tasks_diet_nonIterableRest(); }
  
  function tasks_diet_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function tasks_diet_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return tasks_diet_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return tasks_diet_arrayLikeToArray(o, minLen); }
  
  function tasks_diet_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function tasks_diet_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
  
  function tasks_diet_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
  
  function tasks_diet_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  var DietQuest = {
    name: "Diet",
    tasks: [{
      name: "Consume",
      after: [],
      completed: () => (0,external_kolmafia_namespaceObject.myDaycount)() > 1 || (0,external_kolmafia_namespaceObject.myFullness)() >= args.stomach && (0,external_kolmafia_namespaceObject.myInebriety)() >= args.liver,
      ready: () => (0,external_kolmafia_namespaceObject.myBasestat)((0,external_kolmafia_namespaceObject.myPrimestat)()) >= 149 || (0,external_kolmafia_namespaceObject.myAdventures)() <= 1,
      do: () => {
        if (lib_have(template_string_$item(tasks_diet_templateObject || (tasks_diet_templateObject = tasks_diet_taggedTemplateLiteral(["astral six-pack"]))))) {
          (0,external_kolmafia_namespaceObject.use)(template_string_$item(tasks_diet_templateObject2 || (tasks_diet_templateObject2 = tasks_diet_taggedTemplateLiteral(["astral six-pack"]))));
        }
  
        var MPA = args.voa; // Use the mime shotglass if available
  
        if (!property_get("_mimeArmyShotglassUsed") && lib_have(template_string_$item(tasks_diet_templateObject3 || (tasks_diet_templateObject3 = tasks_diet_taggedTemplateLiteral(["mime army shotglass"]))))) {
          var shotglassDiet = Diet.plan(MPA, shotglassMenu(), {
            food: 0,
            booze: 1,
            spleen: 0
          });
          consumeDiet(shotglassDiet, MPA);
        } // Compute a diet to bring us up to the desired usage
  
  
        var food = Math.max(args.stomach - (0,external_kolmafia_namespaceObject.myFullness)(), 0);
        var booze = Math.max(args.liver - (0,external_kolmafia_namespaceObject.myInebriety)(), 0);
        var spleen = Math.max(args.spleen - (0,external_kolmafia_namespaceObject.mySpleenUse)(), 0);
        var plannedDiet = Diet.plan(MPA, menu(), {
          food: food,
          booze: booze,
          spleen: spleen
        }); // Eat the diet
  
        consumeDiet(plannedDiet, MPA);
      },
      limit: {
        tries: 1
      },
      freeaction: true,
      noadventures: true
    }, {
      name: "Numberology",
      after: [],
      completed: () => property_get("_universeCalculated") >= property_get("skillLevel144"),
      ready: () => (0,external_kolmafia_namespaceObject.myAdventures)() > 0 && Object.keys((0,external_kolmafia_namespaceObject.reverseNumberology)()).includes("69"),
      do: () => {
        (0,external_kolmafia_namespaceObject.restoreMp)(1);
        (0,external_kolmafia_namespaceObject.cliExecute)("numberology 69");
      },
      limit: {
        tries: 5
      },
      freeaction: true,
      noadventures: true
    }, {
      name: "Sausage",
      after: ["Consume"],
      completed: () => !lib_have(template_string_$item(tasks_diet_templateObject4 || (tasks_diet_templateObject4 = tasks_diet_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"])))) || property_get("_sausagesEaten") >= 23,
      // Cap at 23 sausages to avoid burning through an entire supply
      ready: () => lib_have(template_string_$item(tasks_diet_templateObject5 || (tasks_diet_templateObject5 = tasks_diet_taggedTemplateLiteral(["magical sausage casing"])))),
      do: () => {
        // Pump-and-grind cannot be used from Left-Hand Man
        if (lib_have(template_string_$familiar(tasks_diet_templateObject6 || (tasks_diet_templateObject6 = tasks_diet_taggedTemplateLiteral(["Left-Hand Man"])))) && (0,external_kolmafia_namespaceObject.familiarEquippedEquipment)(template_string_$familiar(tasks_diet_templateObject7 || (tasks_diet_templateObject7 = tasks_diet_taggedTemplateLiteral(["Left-Hand Man"])))) === template_string_$item(tasks_diet_templateObject8 || (tasks_diet_templateObject8 = tasks_diet_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"])))) {
          (0,external_kolmafia_namespaceObject.useFamiliar)(template_string_$familiar(tasks_diet_templateObject9 || (tasks_diet_templateObject9 = tasks_diet_taggedTemplateLiteral(["Left-Hand Man"]))));
          (0,external_kolmafia_namespaceObject.equip)($slot(tasks_diet_templateObject10 || (tasks_diet_templateObject10 = tasks_diet_taggedTemplateLiteral(["familiar"]))), template_string_$item(tasks_diet_templateObject11 || (tasks_diet_templateObject11 = tasks_diet_taggedTemplateLiteral(["none"]))));
        }
  
        (0,external_kolmafia_namespaceObject.eat)(1, template_string_$item(tasks_diet_templateObject12 || (tasks_diet_templateObject12 = tasks_diet_taggedTemplateLiteral(["magical sausage"]))));
      },
      limit: {
        tries: 23
      },
      freeaction: true,
      noadventures: true
    }, {
      name: "Hourglass",
      after: [],
      completed: () => !lib_have(template_string_$item(tasks_diet_templateObject13 || (tasks_diet_templateObject13 = tasks_diet_taggedTemplateLiteral(["etched hourglass"])))) || property_get("_etchedHourglassUsed"),
      do: () => {
        (0,external_kolmafia_namespaceObject.use)(template_string_$item(tasks_diet_templateObject14 || (tasks_diet_templateObject14 = tasks_diet_taggedTemplateLiteral(["etched hourglass"]))));
      },
      limit: {
        tries: 1
      },
      freeaction: true,
      noadventures: true
    }]
  };
  var spleenCleaners = new Map([[template_string_$item(tasks_diet_templateObject15 || (tasks_diet_templateObject15 = tasks_diet_taggedTemplateLiteral(["extra-greasy slider"]))), 5], [template_string_$item(tasks_diet_templateObject16 || (tasks_diet_templateObject16 = tasks_diet_taggedTemplateLiteral(["jar of fermented pickle juice"]))), 5], [template_string_$item(tasks_diet_templateObject17 || (tasks_diet_templateObject17 = tasks_diet_taggedTemplateLiteral(["mojo filter"]))), 1]]);
  
  function priceToCraft(item) {
    if (item.tradeable) {
      return (0,external_kolmafia_namespaceObject.mallPrice)(item);
    }
  
    var total = 0;
    var ingredients = (0,external_kolmafia_namespaceObject.getIngredients)(item);
  
    for (var i in ingredients) {
      total += priceToCraft(template_string_$item(tasks_diet_templateObject18 || (tasks_diet_templateObject18 = tasks_diet_taggedTemplateLiteral(["", ""])), i)) * ingredients[i];
    }
  
    return total;
  }
  
  function acquire(qty, item, maxPrice) {
    var throwOnFail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    var startAmount = (0,external_kolmafia_namespaceObject.itemAmount)(item);
    var remaining = qty - startAmount;
    if (maxPrice === undefined) throw "No price cap for ".concat(item.name, ".");
  
    if (template_string_$items(tasks_diet_templateObject19 || (tasks_diet_templateObject19 = tasks_diet_taggedTemplateLiteral(["Boris's bread, roasted vegetable of Jarlsberg, Pete's rich ricotta, roasted vegetable focaccia, baked veggie ricotta casserole, plain calzone, Deep Dish of Legend, Calzone of Legend, Pizza of Legend"]))).includes(item)) {
      (0,external_kolmafia_namespaceObject.print)("Trying to acquire ".concat(qty, " ").concat(item.plural, "; max price ").concat(maxPrice.toFixed(0), "."), "green");
  
      if (priceToCraft(item) <= maxPrice) {
        (0,external_kolmafia_namespaceObject.retrieveItem)(remaining, item);
      }
  
      return (0,external_kolmafia_namespaceObject.itemAmount)(item) - startAmount;
    }
  
    if (!item.tradeable || maxPrice !== undefined && maxPrice <= 0) return 0;
    (0,external_kolmafia_namespaceObject.print)("Trying to acquire ".concat(qty, " ").concat(item.plural, "; max price ").concat(maxPrice.toFixed(0), "."), "green");
    if (qty * (0,external_kolmafia_namespaceObject.mallPrice)(item) > 1000000) throw "Aggregate cost too high! Probably a bug.";
    if (remaining <= 0) return qty;
    if (maxPrice <= 0) throw "buying disabled for ".concat(item.name, ".");
    (0,external_kolmafia_namespaceObject.buy)(remaining, item, maxPrice);
    if ((0,external_kolmafia_namespaceObject.itemAmount)(item) < qty && throwOnFail) throw "Mall price too high for ".concat(item.name, ".");
    return (0,external_kolmafia_namespaceObject.itemAmount)(item) - startAmount;
  }
  
  function argmax(values) {
    return values.reduce((_ref, _ref2) => {
      var _ref3 = tasks_diet_slicedToArray(_ref, 2),
          minValue = _ref3[0],
          minScore = _ref3[1];
  
      var _ref4 = tasks_diet_slicedToArray(_ref2, 2),
          value = _ref4[0],
          score = _ref4[1];
  
      return score > minScore ? [value, score] : [minValue, minScore];
    })[0];
  }
  
  function eatSafe(qty, item, mpa) {
    if (!property_get("_milkOfMagnesiumUsed")) {
      acquire(1, template_string_$item(tasks_diet_templateObject20 || (tasks_diet_templateObject20 = tasks_diet_taggedTemplateLiteral(["milk of magnesium"]))), 5 * mpa);
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(tasks_diet_templateObject21 || (tasks_diet_templateObject21 = tasks_diet_taggedTemplateLiteral(["milk of magnesium"]))));
    }
  
    if (!(0,external_kolmafia_namespaceObject.eat)(qty, item)) throw "Failed to eat safely";
  }
  
  function drinkSafe(qty, item) {
    var prevDrunk = (0,external_kolmafia_namespaceObject.myInebriety)();
  
    if (lib_have(template_string_$skill(tasks_diet_templateObject22 || (tasks_diet_templateObject22 = tasks_diet_taggedTemplateLiteral(["The Ode to Booze"]))))) {
      var odeTurns = qty * item.inebriety;
      var castTurns = odeTurns - (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(tasks_diet_templateObject23 || (tasks_diet_templateObject23 = tasks_diet_taggedTemplateLiteral(["Ode to Booze"]))));
  
      if (castTurns > 0) {
        (0,external_kolmafia_namespaceObject.useSkill)(template_string_$skill(tasks_diet_templateObject24 || (tasks_diet_templateObject24 = tasks_diet_taggedTemplateLiteral(["The Ode to Booze"]))), Math.ceil(castTurns / (0,external_kolmafia_namespaceObject.turnsPerCast)(template_string_$skill(tasks_diet_templateObject25 || (tasks_diet_templateObject25 = tasks_diet_taggedTemplateLiteral(["The Ode to Booze"]))))));
      }
    }
  
    if (!(0,external_kolmafia_namespaceObject.drink)(qty, item)) throw "Failed to drink safely";
  
    if (item.inebriety === 1 && prevDrunk === qty + (0,external_kolmafia_namespaceObject.myInebriety)() - 1) {
      // sometimes mafia does not track the mime army shotglass property
      (0,external_kolmafia_namespaceObject.setProperty)("_mimeArmyShotglassUsed", "true");
    }
  }
  
  function chewSafe(qty, item) {
    if (!(0,external_kolmafia_namespaceObject.chew)(qty, item)) throw "Failed to chew safely";
  }
  
  function consumeSafe(qty, item, mpa, data, additionalValue, skipAcquire) {
    var _data$turns;
  
    var spleenCleaned = spleenCleaners.get(item);
  
    if (spleenCleaned && (0,external_kolmafia_namespaceObject.mySpleenUse)() < spleenCleaned) {
      throw "No spleen to clear with this.";
    }
  
    var averageAdventures = (_data$turns = data === null || data === void 0 ? void 0 : data.turns) !== null && _data$turns !== void 0 ? _data$turns : getAverageAdventures(item);
  
    if (!skipAcquire && (averageAdventures > 0 || additionalValue)) {
      var cap = Math.max(0, averageAdventures * mpa) + (additionalValue !== null && additionalValue !== void 0 ? additionalValue : 0);
      acquire(qty, item, cap);
    } else if (!skipAcquire) {
      acquire(qty, item);
    }
  
    if ((0,external_kolmafia_namespaceObject.itemType)(item) === "food") eatSafe(qty, item, mpa);else if ((0,external_kolmafia_namespaceObject.itemType)(item) === "booze") drinkSafe(qty, item);else if ((0,external_kolmafia_namespaceObject.itemType)(item) === "spleen item") chewSafe(qty, item);else if (item !== template_string_$item(tasks_diet_templateObject26 || (tasks_diet_templateObject26 = tasks_diet_taggedTemplateLiteral(["Special Seasoning"])))) (0,external_kolmafia_namespaceObject.use)(qty, item);
  } // Item priority - higher means we eat it first.
  // Anything that gives a consumption buff should go first (e.g. Refined Palate).
  
  
  function itemPriority(menuItems) {
    // Last menu item is the food itself.
    var menuItem = menuItems[menuItems.length - 1];
  
    if (menuItem === undefined) {
      throw "Shouldn't have an empty menu item.";
    }
  
    if (menuItem.item === template_string_$item(tasks_diet_templateObject27 || (tasks_diet_templateObject27 = tasks_diet_taggedTemplateLiteral(["spaghetti breakfast"])))) return 200;
  
    if (template_string_$items(tasks_diet_templateObject28 || (tasks_diet_templateObject28 = tasks_diet_taggedTemplateLiteral(["pocket wish, toasted brie"]))).includes(menuItem.item) || spleenCleaners.get(menuItem.item)) {
      return 100;
    } else {
      return 0;
    }
  }
  
  function recipeKnown(item) {
    if (template_string_$items(tasks_diet_templateObject29 || (tasks_diet_templateObject29 = tasks_diet_taggedTemplateLiteral(["Boris's bread, roasted vegetable of Jarlsberg, Pete's rich ricotta"]))).includes(item)) {
      return !property_get("unknownRecipe".concat((0,external_kolmafia_namespaceObject.toInt)(item)));
    }
  
    var allComponentsKnown = !property_get("unknownRecipe".concat((0,external_kolmafia_namespaceObject.toInt)(item)));
    var ingredients = (0,external_kolmafia_namespaceObject.getIngredients)(item);
  
    for (var i in ingredients) {
      allComponentsKnown = allComponentsKnown && recipeKnown(template_string_$item(tasks_diet_templateObject30 || (tasks_diet_templateObject30 = tasks_diet_taggedTemplateLiteral(["", ""])), i));
    }
  
    return allComponentsKnown;
  }
  
  function cookBookBatMenu() {
    /* Excluding
        - plain calzone, because the +ML buff may not be desirable
        - Deep Dish of Legend, because the +familiar weight buff is best saved for garbo
    */
    var cookBookBatFoods = template_string_$items(tasks_diet_templateObject31 || (tasks_diet_templateObject31 = tasks_diet_taggedTemplateLiteral(["Boris's bread, roasted vegetable of Jarlsberg, Pete's rich ricotta, roasted vegetable focaccia, baked veggie ricotta casserole, Calzone of Legend, Pizza of Legend"])));
    var legendaryPizzasEaten = [];
    if (property_get("calzoneOfLegendEaten")) legendaryPizzasEaten.push(template_string_$item(tasks_diet_templateObject32 || (tasks_diet_templateObject32 = tasks_diet_taggedTemplateLiteral(["Calzone of Legend"]))));
    if (property_get("pizzaOfLegendEaten")) legendaryPizzasEaten.push(template_string_$item(tasks_diet_templateObject33 || (tasks_diet_templateObject33 = tasks_diet_taggedTemplateLiteral(["Pizza of Legend"]))));
    if (property_get("deepDishOfLegendEaten")) legendaryPizzasEaten.push(template_string_$item(tasks_diet_templateObject34 || (tasks_diet_templateObject34 = tasks_diet_taggedTemplateLiteral(["Deep Dish of Legend"]))));
    var cookBookBatFoodAvailable = cookBookBatFoods.filter(food => recipeKnown(food) && !legendaryPizzasEaten.includes(food));
    return cookBookBatFoodAvailable.map(food => new MenuItem(food, {
      priceOverride: priceToCraft(food),
      maximum: template_string_$items(tasks_diet_templateObject35 || (tasks_diet_templateObject35 = tasks_diet_taggedTemplateLiteral(["Calzone of Legend, Pizza of Legend, Deep Dish of Legend"]))).includes(food) ? 1 : 99
    }));
  }
  
  function menu() {
    var spaghettiBreakfast = lib_have(template_string_$item(tasks_diet_templateObject36 || (tasks_diet_templateObject36 = tasks_diet_taggedTemplateLiteral(["spaghetti breakfast"])))) && (0,external_kolmafia_namespaceObject.myFullness)() === 0 && property_get("_timeSpinnerFoodAvailable") === "" && !property_get("_spaghettiBreakfastEaten") ? 1 : 0;
    var complexMushroomWines = template_string_$items(tasks_diet_templateObject37 || (tasks_diet_templateObject37 = tasks_diet_taggedTemplateLiteral(["overpowering mushroom wine, complex mushroom wine, smooth mushroom wine, blood-red mushroom wine, buzzing mushroom wine, swirling mushroom wine"])));
    var perfectDrinks = template_string_$items(tasks_diet_templateObject38 || (tasks_diet_templateObject38 = tasks_diet_taggedTemplateLiteral(["perfect cosmopolitan, perfect negroni, perfect dark and stormy, perfect mimosa, perfect old-fashioned, perfect paloma"])));
    var lasagnas = template_string_$items(tasks_diet_templateObject39 || (tasks_diet_templateObject39 = tasks_diet_taggedTemplateLiteral(["fishy fish lasagna, gnat lasagna, long pork lasagna"])));
    var smallEpics = template_string_$items(tasks_diet_templateObject40 || (tasks_diet_templateObject40 = tasks_diet_taggedTemplateLiteral(["meteoreo, ice rice"]))).concat([template_string_$item(tasks_diet_templateObject41 || (tasks_diet_templateObject41 = tasks_diet_taggedTemplateLiteral(["Tea, Earl Grey, Hot"])))]);
  
    var mallMin = items => argmax(items.map(i => [i, -(0,external_kolmafia_namespaceObject.mallPrice)(i)]));
  
    var menu = [// FOOD
    new MenuItem(template_string_$item(tasks_diet_templateObject42 || (tasks_diet_templateObject42 = tasks_diet_taggedTemplateLiteral(["Dreadsylvanian spooky pocket"])))), new MenuItem(template_string_$item(tasks_diet_templateObject43 || (tasks_diet_templateObject43 = tasks_diet_taggedTemplateLiteral(["tin cup of mulligan stew"])))), new MenuItem(template_string_$item(tasks_diet_templateObject44 || (tasks_diet_templateObject44 = tasks_diet_taggedTemplateLiteral(["frozen banquet"])))), new MenuItem(template_string_$item(tasks_diet_templateObject45 || (tasks_diet_templateObject45 = tasks_diet_taggedTemplateLiteral(["deviled egg"])))), new MenuItem(template_string_$item(tasks_diet_templateObject46 || (tasks_diet_templateObject46 = tasks_diet_taggedTemplateLiteral(["spaghetti breakfast"]))), {
      maximum: spaghettiBreakfast
    }), new MenuItem(template_string_$item(tasks_diet_templateObject47 || (tasks_diet_templateObject47 = tasks_diet_taggedTemplateLiteral(["extra-greasy slider"])))), new MenuItem(mallMin(lasagnas)), new MenuItem(mallMin(smallEpics)), // BOOZE
    new MenuItem(template_string_$item(tasks_diet_templateObject48 || (tasks_diet_templateObject48 = tasks_diet_taggedTemplateLiteral(["astral pilsner"]))), {
      maximum: (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(diet_templateObject49 || (diet_templateObject49 = tasks_diet_taggedTemplateLiteral(["astral pilsner"]))))
    }), new MenuItem(template_string_$item(diet_templateObject50 || (diet_templateObject50 = tasks_diet_taggedTemplateLiteral(["elemental caipiroska"])))), new MenuItem(template_string_$item(diet_templateObject51 || (diet_templateObject51 = tasks_diet_taggedTemplateLiteral(["moreltini"])))), new MenuItem(template_string_$item(diet_templateObject52 || (diet_templateObject52 = tasks_diet_taggedTemplateLiteral(["Dreadsylvanian grimlet"])))), new MenuItem(template_string_$item(diet_templateObject53 || (diet_templateObject53 = tasks_diet_taggedTemplateLiteral(["Hodgman's blanket"])))), new MenuItem(template_string_$item(diet_templateObject54 || (diet_templateObject54 = tasks_diet_taggedTemplateLiteral(["Sacramento wine"])))), new MenuItem(template_string_$item(diet_templateObject55 || (diet_templateObject55 = tasks_diet_taggedTemplateLiteral(["iced plum wine"])))), new MenuItem(template_string_$item(diet_templateObject56 || (diet_templateObject56 = tasks_diet_taggedTemplateLiteral(["splendid martini"])))), new MenuItem(template_string_$item(diet_templateObject57 || (diet_templateObject57 = tasks_diet_taggedTemplateLiteral(["Eye and a Twist"])))), new MenuItem(template_string_$item(diet_templateObject58 || (diet_templateObject58 = tasks_diet_taggedTemplateLiteral(["jar of fermented pickle juice"])))), new MenuItem(mallMin(complexMushroomWines)), new MenuItem(mallMin(perfectDrinks)), // SPLEEN
    new MenuItem(template_string_$item(diet_templateObject59 || (diet_templateObject59 = tasks_diet_taggedTemplateLiteral(["octolus oculus"])))), new MenuItem(template_string_$item(diet_templateObject60 || (diet_templateObject60 = tasks_diet_taggedTemplateLiteral(["prismatic wad"])))), new MenuItem(template_string_$item(diet_templateObject61 || (diet_templateObject61 = tasks_diet_taggedTemplateLiteral(["transdermal smoke patch"])))), new MenuItem(template_string_$item(diet_templateObject62 || (diet_templateObject62 = tasks_diet_taggedTemplateLiteral(["antimatter wad"])))), new MenuItem(template_string_$item(diet_templateObject63 || (diet_templateObject63 = tasks_diet_taggedTemplateLiteral(["voodoo snuff"])))), new MenuItem(template_string_$item(diet_templateObject64 || (diet_templateObject64 = tasks_diet_taggedTemplateLiteral(["blood-drive sticker"])))), // HELPERS
    new MenuItem(template_string_$item(diet_templateObject65 || (diet_templateObject65 = tasks_diet_taggedTemplateLiteral(["Special Seasoning"]))), {
      data: {
        turns: 1
      }
    }), new MenuItem(template_string_$item(diet_templateObject66 || (diet_templateObject66 = tasks_diet_taggedTemplateLiteral(["pocket wish"]))), {
      maximum: 1,
      effect: template_string_$effect(diet_templateObject67 || (diet_templateObject67 = tasks_diet_taggedTemplateLiteral(["Refined Palate"]))),
      data: {
        turns: 10
      }
    }), new MenuItem(template_string_$item(diet_templateObject68 || (diet_templateObject68 = tasks_diet_taggedTemplateLiteral(["toasted brie"]))), {
      maximum: 1,
      data: {
        turns: 10
      }
    }), new MenuItem(template_string_$item(diet_templateObject69 || (diet_templateObject69 = tasks_diet_taggedTemplateLiteral(["potion of the field gar"]))), {
      maximum: 1,
      data: {
        turns: 5
      }
    })];
    return menu.concat(cookBookBatMenu());
  }
  
  function shotglassMenu() {
    return menu().filter(menuItem => menuItem.size === 1 && menuItem.organ === "booze");
  }
  
  function consumeDiet(diet, mpa) {
    var plannedDietEntries = diet.entries.sort((a, b) => itemPriority(b.menuItems) - itemPriority(a.menuItems));
    (0,external_kolmafia_namespaceObject.print)("Diet Plan:");
  
    var _iterator = tasks_diet_createForOfIteratorHelper(plannedDietEntries),
        _step;
  
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _dietEntry = _step.value;
        (0,external_kolmafia_namespaceObject.print)("".concat(_dietEntry.target(), " ").concat(_dietEntry.helpers().join(",")));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  
    while (sumNumbers(plannedDietEntries.map(e => e.quantity)) > 0) {
      var progressed = false;
  
      var _iterator2 = tasks_diet_createForOfIteratorHelper(plannedDietEntries),
          _step2;
  
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _dietEntry$target$org;
  
          var dietEntry = _step2.value;
          var quantity = dietEntry.quantity; // Compute the usable quantity of the diet entry
  
          var organ = (_dietEntry$target$org = dietEntry.target().organ) !== null && _dietEntry$target$org !== void 0 ? _dietEntry$target$org : (0,external_kolmafia_namespaceObject.itemType)(dietEntry.target().item);
  
          if (organ === "food") {
            quantity = utils_clamp(Math.floor(getRemainingStomach() / dietEntry.target().size), 0, quantity);
          } else if (organ === "booze") {
            quantity = utils_clamp(Math.floor(getRemainingLiver() / dietEntry.target().size), 0, quantity);
  
            if (dietEntry.target().size === 1 && !property_get("_mimeArmyShotglassUsed") && lib_have(template_string_$item(diet_templateObject70 || (diet_templateObject70 = tasks_diet_taggedTemplateLiteral(["mime army shotglass"])))) && quantity === 0) {
              quantity = 1;
            }
          } else if (organ === "spleen item") {
            quantity = utils_clamp(Math.floor(getRemainingSpleen() / dietEntry.target().size), 0, quantity);
          }
  
          var clean = spleenCleaners.get(dietEntry.target().item);
  
          if (clean) {
            quantity = utils_clamp(Math.floor((0,external_kolmafia_namespaceObject.mySpleenUse)() / clean), 0, quantity);
          }
  
          if (quantity > 0) {
            progressed = true;
  
            var _iterator3 = tasks_diet_createForOfIteratorHelper(dietEntry.menuItems),
                _step3;
  
            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var menuItem = _step3.value;
  
                if (menuItem.effect === template_string_$effect(diet_templateObject71 || (diet_templateObject71 = tasks_diet_taggedTemplateLiteral(["Refined Palate"])))) {
                  (0,external_kolmafia_namespaceObject.cliExecute)("genie effect ".concat(menuItem.effect));
                } else {
                  consumeSafe(quantity, menuItem.item, mpa, menuItem.data);
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
  
            dietEntry.quantity -= quantity;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
  
      if (!progressed) throw "Unable to determine what to consume next";
    }
  }
  ;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/args.js
  function args_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = args_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  
  function args_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return args_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return args_arrayLikeToArray(o, minLen); }
  
  function args_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function args_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  
  function args_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? args_ownKeys(Object(source), !0).forEach(function (key) { args_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : args_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  
  function args_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function args_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function args_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function args_createClass(Constructor, protoProps, staticProps) { if (protoProps) args_defineProperties(Constructor.prototype, protoProps); if (staticProps) args_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  /* eslint-disable @typescript-eslint/no-explicit-any */
  
  var Args = /*#__PURE__*/function () {
    function Args() {
      args_classCallCheck(this, Args);
    }
  
    args_createClass(Args, null, [{
      key: "custom",
      value: function custom(spec, _parser, valueHelpName) {
        var _a, _b;
  
        var raw_options = (_a = spec.options) === null || _a === void 0 ? void 0 : _a.map(option => option[0]); // Check that the default value actually appears in the options.
  
        if ("default" in spec && raw_options) {
          if (!raw_options.includes(spec.default)) {
            throw "Invalid default value ".concat(spec.default);
          }
        }
  
        return args_objectSpread(args_objectSpread({}, spec), {}, {
          valueHelpName: valueHelpName,
          parser: value => {
            var parsed_value = _parser(value);
  
            if (parsed_value === undefined || parsed_value instanceof ParseError) return parsed_value;
  
            if (raw_options) {
              if (!raw_options.includes(parsed_value)) {
                return new ParseError("received ".concat(value, " which was not in the allowed options"));
              }
            }
  
            return parsed_value;
          },
          options: (_b = spec.options) === null || _b === void 0 ? void 0 : _b.map(a => ["".concat(a[0]), a[1]])
        });
      }
    }, {
      key: "arrayFromArg",
      value: function arrayFromArg(spec, argFromSpec) {
        var _a, _b, _c; // First, construct a non-array version of this argument.
        // We do this by calling argFromSpec in order to extract the parser and
        // valueHelpName (to make it easier to define the functions below).
        //
        // The default argument of an ArraySpec is of type T[], which causes
        // problems, so we must remove it.
  
  
        var spec_without_default = args_objectSpread({}, spec); // Avoid "the operand of a 'delete' operator must be optional"
  
  
        if ("default" in spec_without_default) delete spec_without_default["default"];
        var arg = argFromSpec.call(this, spec_without_default); // Next, check that all default values actually appear in the options.
  
        var raw_options = (_a = spec.options) === null || _a === void 0 ? void 0 : _a.map(option => option[0]);
  
        if ("default" in spec && raw_options) {
          var _iterator = args_createForOfIteratorHelper(spec.default),
              _step;
  
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var default_entry = _step.value;
              if (!raw_options.includes(default_entry)) throw "Invalid default value ".concat(spec.default);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
  
        var separator = (_b = spec.separator) !== null && _b !== void 0 ? _b : ",";
  
        var arrayParser = value => {
          // Split the array
          var values = value.split(separator);
          if (!spec.noTrim) values = values.map(v => v.trim()); // Parse all values, return the first error found if any
  
          var result = values.map(v => arg.parser(v));
          var error = result.find(v => v instanceof ParseError);
          if (error) return error;
          var failure_index = result.indexOf(undefined);
          if (failure_index !== -1) return new ParseError("components expected ".concat(arg.valueHelpName, " but could not parse ").concat(values[failure_index])); // Otherwise, all values are good
  
          return result;
        };
  
        return args_objectSpread(args_objectSpread({}, spec), {}, {
          valueHelpName: "".concat(arg.valueHelpName).concat(separator, " ").concat(arg.valueHelpName).concat(separator, " ..."),
          parser: arrayParser,
          options: (_c = spec.options) === null || _c === void 0 ? void 0 : _c.map(a => ["".concat(a[0]), a[1]])
        });
      }
    }, {
      key: "string",
      value: function string(spec) {
        return this.custom(spec, value => value, "TEXT");
      }
    }, {
      key: "strings",
      value: function strings(spec) {
        return this.arrayFromArg(spec, this.string);
      }
    }, {
      key: "number",
      value: function number(spec) {
        return this.custom(spec, value => isNaN(Number(value)) ? undefined : Number(value), "NUMBER");
      }
    }, {
      key: "numbers",
      value: function numbers(spec) {
        return this.arrayFromArg(spec, this.number);
      }
    }, {
      key: "boolean",
      value: function boolean(spec) {
        return this.custom(spec, value => {
          if (value.toLowerCase() === "true") return true;
          if (value.toLowerCase() === "false") return false;
          return undefined;
        }, "BOOLEAN");
      }
    }, {
      key: "booleans",
      value: function booleans(spec) {
        return this.arrayFromArg(spec, this.boolean);
      }
    }, {
      key: "flag",
      value: function flag(spec) {
        return this.custom(spec, value => {
          if (value.toLowerCase() === "true") return true;
          if (value.toLowerCase() === "false") return false;
          return undefined;
        }, "FLAG");
      }
    }, {
      key: "class",
      value: function _class(spec) {
        return this.custom(spec, value => {
          var match = external_kolmafia_namespaceObject.Class.get(value); // Class.get does fuzzy matching:
          //  e.g. Class.get("sc") returns disco bandit.
          // To avoid this foot-gun, only return exact matches or id lookups.
  
          if (match.toString().toUpperCase() === value.toString().toUpperCase()) return match;
          if (!isNaN(Number(value))) return match;
          return undefined;
        }, "CLASS");
      }
    }, {
      key: "classes",
      value: function classes(spec) {
        return this.arrayFromArg(spec, this.class);
      }
    }, {
      key: "effect",
      value: function effect(spec) {
        return this.custom(spec, external_kolmafia_namespaceObject.Effect.get, "EFFECT");
      }
    }, {
      key: "effects",
      value: function effects(spec) {
        return this.arrayFromArg(spec, this.effect);
      }
    }, {
      key: "familiar",
      value: function familiar(spec) {
        return this.custom(spec, external_kolmafia_namespaceObject.Familiar.get, "FAMILIAR");
      }
    }, {
      key: "familiars",
      value: function familiars(spec) {
        return this.arrayFromArg(spec, this.familiar);
      }
    }, {
      key: "item",
      value: function item(spec) {
        return this.custom(spec, external_kolmafia_namespaceObject.Item.get, "ITEM");
      }
    }, {
      key: "items",
      value: function items(spec) {
        return this.arrayFromArg(spec, this.item);
      }
    }, {
      key: "location",
      value: function location(spec) {
        return this.custom(spec, external_kolmafia_namespaceObject.Location.get, "LOCATION");
      }
    }, {
      key: "locations",
      value: function locations(spec) {
        return this.arrayFromArg(spec, this.location);
      }
    }, {
      key: "monster",
      value: function monster(spec) {
        return this.custom(spec, external_kolmafia_namespaceObject.Monster.get, "MONSTER");
      }
    }, {
      key: "monsters",
      value: function monsters(spec) {
        return this.arrayFromArg(spec, this.monster);
      }
    }, {
      key: "path",
      value: function path(spec) {
        return this.custom(spec, external_kolmafia_namespaceObject.Path.get, "PATH");
      }
    }, {
      key: "paths",
      value: function paths(spec) {
        return this.arrayFromArg(spec, this.path);
      }
    }, {
      key: "skill",
      value: function skill(spec) {
        return this.custom(spec, external_kolmafia_namespaceObject.Skill.get, "SKILL");
      }
    }, {
      key: "skills",
      value: function skills(spec) {
        return this.arrayFromArg(spec, this.skill);
      }
      /**
       * Create a group of arguments that will be printed separately in the help.
       *
       * Note that keys in the group must still be globally distinct.
       *
       * @param groupName The display name for the group in help.
       * @param args A JS object specifying the script arguments. Its values should
       *    be {@link Arg} objects (created by Args.string, Args.number, or others)
       *    or groups of arguments (created by Args.group).
       */
  
    }, {
      key: "group",
      value: function group(groupName, args) {
        return {
          name: groupName,
          args: args
        };
      }
      /**
       * Create a set of input arguments for a script.
       * @param scriptName Prefix for property names; often the name of the script.
       * @param scriptHelp Brief description of this script, for the help message.
       * @param args A JS object specifying the script arguments. Its values should
       *    be {@link Arg} objects (created by Args.string, Args.number, or others)
       *    or groups of arguments (created by Args.group).
       * @param options Config options for the args and arg parser.
       * @returns An object which can hold parsed argument values. The keys of this
       *    object are identical to the keys in 'args'.
       */
  
    }, {
      key: "create",
      value: function create(scriptName, scriptHelp, args, options) {
        var _objectSpread2;
  
        _traverse(args, (keySpec, key) => {
          if (key === "help" || keySpec.key === "help") throw "help is a reserved argument name";
        });
  
        var argsWithHelp = args_objectSpread(args_objectSpread({}, args), {}, {
          help: this.flag({
            help: "Show this message and exit.",
            setting: ""
          })
        }); // Create an object to hold argument results, with a default value for
        // each argument.
  
  
        var res = args_objectSpread(args_objectSpread({}, _loadDefaultValues(argsWithHelp)), {}, (_objectSpread2 = {}, args_defineProperty(_objectSpread2, specSymbol, argsWithHelp), args_defineProperty(_objectSpread2, scriptSymbol, scriptName), args_defineProperty(_objectSpread2, scriptHelpSymbol, scriptHelp), args_defineProperty(_objectSpread2, optionsSymbol, options !== null && options !== void 0 ? options : {}), _objectSpread2));
  
        if (options === null || options === void 0 ? void 0 : options.positionalArgs) {
          var keys = [];
          var metadata = Args.getMetadata(res);
          metadata.traverse((keySpec, key) => {
            var _a;
  
            keys.push((_a = keySpec.key) !== null && _a !== void 0 ? _a : key);
          });
  
          var _iterator2 = args_createForOfIteratorHelper(options.positionalArgs),
              _step2;
  
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var arg = _step2.value;
              if (!keys.includes(arg)) throw "Unknown key for positional arg: ".concat(arg);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
  
        return res;
      }
      /**
       * Parse the command line input into the provided script arguments.
       * @param args An object to hold the parsed argument values, from Args.create(*).
       * @param command The command line input.
       * @param includeSettings If true, parse values from settings as well.
       */
  
    }, {
      key: "fill",
      value: function fill(args, command) {
        var includeSettings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  
        var _a;
  
        var metadata = Args.getMetadata(args); // Load the list of keys and flags from the arg spec
  
        var keys = new Set();
        var flags = new Set();
        metadata.traverse((keySpec, key) => {
          var _a;
  
          var name = (_a = keySpec.key) !== null && _a !== void 0 ? _a : key;
          if (flags.has(name) || keys.has(name)) throw "Duplicate arg key ".concat(name, " is not allowed");
          if (keySpec.valueHelpName === "FLAG") flags.add(name);else keys.add(name);
        }); // Parse values from settings.
  
        if (includeSettings) {
          metadata.traverseAndMaybeSet(args, (keySpec, key) => {
            var _a, _b;
  
            var setting = (_a = keySpec.setting) !== null && _a !== void 0 ? _a : "".concat(metadata.scriptName, "_").concat((_b = keySpec.key) !== null && _b !== void 0 ? _b : key);
            if (setting === "") return undefined; // no setting
  
            var value_str = (0,external_kolmafia_namespaceObject.getProperty)(setting);
            if (value_str === "") return undefined; // no setting
  
            return parseAndValidate(keySpec, "Setting ".concat(setting), value_str);
          });
        } // Parse new argments from the command line
  
  
        if (command === undefined || command === "") return;
        var parsed = new CommandParser(command, keys, flags, (_a = metadata.options.positionalArgs) !== null && _a !== void 0 ? _a : []).parse();
        metadata.traverseAndMaybeSet(args, (keySpec, key) => {
          var _a;
  
          var argKey = (_a = keySpec.key) !== null && _a !== void 0 ? _a : key;
          var value_str = parsed.get(argKey);
          if (value_str === undefined) return undefined; // no setting
  
          return parseAndValidate(keySpec, "Argument ".concat(argKey), value_str);
        });
      }
      /**
       * Parse command line input into a new set of script arguments.
       * @param scriptName Prefix to use in property names; typically the name of the script.
       * @param scriptHelp Brief description of this script, for the help message.
       * @param spec An object specifying the script arguments.
       * @param command The command line input.
       * @param options Config options for the args and arg parser.
       */
  
    }, {
      key: "parse",
      value: function parse(scriptName, scriptHelp, spec, command, options) {
        var args = this.create(scriptName, scriptHelp, spec, options);
        this.fill(args, command);
        return args;
      }
      /**
       * Print a description of the script arguments to the CLI.
       *
       * First, all top-level argument descriptions are printed in the order they
       * were defined. Afterwards, descriptions for groups of arguments are printed
       * in the order they were defined.
       *
       * @param args An object of parsed arguments, from Args.create(*).
       * @param maxOptionsToDisplay If given, do not list more than this many options for each arg.
       */
  
    }, {
      key: "showHelp",
      value: function showHelp(args, maxOptionsToDisplay) {
        var _a;
  
        var metadata = Args.getMetadata(args);
        (0,external_kolmafia_namespaceObject.printHtml)("".concat(metadata.scriptHelp));
        (0,external_kolmafia_namespaceObject.printHtml)("");
        (0,external_kolmafia_namespaceObject.printHtml)("<b>".concat((_a = metadata.options.defaultGroupName) !== null && _a !== void 0 ? _a : "Options", ":</b>"));
        metadata.traverse((arg, key) => {
          var _a, _b, _c, _d, _e;
  
          if (arg.hidden) return;
          var nameText = "<font color='".concat((0,external_kolmafia_namespaceObject.isDarkMode)() ? "yellow" : "blue", "'>").concat((_a = arg.key) !== null && _a !== void 0 ? _a : key, "</font>");
          var valueText = arg.valueHelpName === "FLAG" ? "" : "<font color='purple'>".concat(arg.valueHelpName, "</font>");
          var helpText = (_b = arg.help) !== null && _b !== void 0 ? _b : "";
          var defaultText = "default" in arg ? "<font color='#888888'>[default: ".concat(arg.default, "]</font>") : "";
          var settingText = arg.setting === "" ? "" : "<font color='#888888'>[setting: ".concat((_c = arg.setting) !== null && _c !== void 0 ? _c : "".concat(metadata.scriptName, "_").concat((_d = arg.key) !== null && _d !== void 0 ? _d : key), "]</font>");
          (0,external_kolmafia_namespaceObject.printHtml)("&nbsp;&nbsp;".concat([nameText, valueText, "-", helpText, defaultText, settingText].join(" ")));
          var valueOptions = (_e = arg.options) !== null && _e !== void 0 ? _e : [];
  
          if (valueOptions.length < (maxOptionsToDisplay !== null && maxOptionsToDisplay !== void 0 ? maxOptionsToDisplay : Number.MAX_VALUE)) {
            var _iterator3 = args_createForOfIteratorHelper(valueOptions),
                _step3;
  
            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var option = _step3.value;
  
                if (option.length === 1 || option[1] === undefined) {
                  (0,external_kolmafia_namespaceObject.printHtml)("&nbsp;&nbsp;&nbsp;&nbsp;<font color='blue'>".concat(nameText, "</font> ").concat(option[0]));
                } else {
                  (0,external_kolmafia_namespaceObject.printHtml)("&nbsp;&nbsp;&nbsp;&nbsp;<font color='blue'>".concat(nameText, "</font> ").concat(option[0], " - ").concat(option[1]));
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          }
        }, group => {
          (0,external_kolmafia_namespaceObject.printHtml)("");
          (0,external_kolmafia_namespaceObject.printHtml)("<b>".concat(group.name, ":</b>"));
        });
      }
      /**
       * Load the metadata information for a set of arguments. Only for advanced usage.
       *
       * @param args A JS object specifying the script arguments. Its values should
       *    be {@link Arg} objects (created by Args.string, Args.number, or others)
       *    or groups of arguments (created by Args.group).
       * @returns A class containing metadata information.
       */
  
    }, {
      key: "getMetadata",
      value: function getMetadata(args) {
        return new WrappedArgMetadata(args);
      }
    }]);
  
    return Args;
  }();
  var ParseError = /*#__PURE__*/args_createClass(function ParseError(message) {
    args_classCallCheck(this, ParseError);
  
    this.message = message;
  });
  /**
   * Metadata for the parsed arguments.
   *
   * This information is hidden within the parsed argument object so that it
   * is invisible to the user but available to fill(*) and showHelp(*).
   */
  
  var specSymbol = Symbol("spec");
  var scriptSymbol = Symbol("script");
  var scriptHelpSymbol = Symbol("scriptHelp");
  var optionsSymbol = Symbol("options");
  /**
   * Parse a string into a value for a given argument, throwing if the parsing fails.
   * @param arg An argument that takes values in T.
   * @param source A description of where this value came from, for the error message.
   * @param value The value to parse.
   * @returns the parsed value.
   */
  
  function parseAndValidate(arg, source, value) {
    var parsed_value;
  
    try {
      parsed_value = arg.parser(value);
    } catch (_a) {
      parsed_value = undefined;
    }
  
    if (parsed_value === undefined) throw "".concat(source, " expected ").concat(arg.valueHelpName, " but could not parse ").concat(value);
    if (parsed_value instanceof ParseError) throw "".concat(source, " ").concat(parsed_value.message);
    return parsed_value;
  }
  /**
   * A class that reveals the hidden metadata and specs for arguments.
   *
   * Only for advanced usage.
   */
  
  
  var WrappedArgMetadata = /*#__PURE__*/function () {
    function WrappedArgMetadata(args) {
      args_classCallCheck(this, WrappedArgMetadata);
  
      this.spec = args[specSymbol];
      this.scriptName = args[scriptSymbol];
      this.scriptHelp = args[scriptHelpSymbol];
      this.options = args[optionsSymbol];
    }
    /**
     * Create a parsed args object from this spec using all default values.
     */
  
  
    args_createClass(WrappedArgMetadata, [{
      key: "loadDefaultValues",
      value: function loadDefaultValues() {
        return _loadDefaultValues(this.spec);
      }
      /**
       * Traverse the spec and possibly generate a value for each argument.
       *
       * @param result The object to hold the resulting argument values, typically
       *    the result of loadDefaultValues().
       * @param setTo A function to generate an argument value from each arg spec.
       *    If this function returns undefined, then the argument value is unchanged.
       */
  
    }, {
      key: "traverseAndMaybeSet",
      value: function traverseAndMaybeSet(result, setTo) {
        return _traverseAndMaybeSet(this.spec, result, setTo);
      }
      /**
       * Traverse the spec and call a method for each argument.
       *
       * @param process A function to call at each arg spec.
       */
  
    }, {
      key: "traverse",
      value: function traverse(process, onGroup) {
        return _traverse(this.spec, process, onGroup);
      }
    }]);
  
    return WrappedArgMetadata;
  }();
  /**
   * Create a parsed args object from a spec using all default values.
   *
   * @param spec The spec for all arguments.
   */
  
  
  function _loadDefaultValues(spec) {
    var result = {};
  
    for (var k in spec) {
      var argSpec = spec[k];
  
      if ("args" in argSpec) {
        result[k] = _loadDefaultValues(argSpec.args);
      } else {
        if ("default" in argSpec) result[k] = argSpec.default;else result[k] = undefined;
      }
    }
  
    return result;
  }
  /**
   * Traverse the spec and possibly generate a value for each argument.
   *
   * @param spec The spec for all arguments.
   * @param result The object to hold the resulting argument values.
   * @param setTo A function to generate an argument value from each arg spec.
   *    If this function returns undefined, then the argument value is unchanged.
   */
  
  
  function _traverseAndMaybeSet(spec, result, setTo) {
    var groups = [];
  
    for (var k in spec) {
      var argSpec = spec[k];
  
      if ("args" in argSpec) {
        groups.push([argSpec, k]);
      } else {
        var value = setTo(argSpec, k);
        if (value === undefined) continue;
        result[k] = value;
      }
    }
  
    for (var _i = 0, _groups = groups; _i < _groups.length; _i++) {
      var group_and_key = _groups[_i];
  
      _traverseAndMaybeSet(group_and_key[0].args, result[group_and_key[1]], setTo);
    }
  }
  /**
   * Traverse the spec and possibly generate a value for each argument.
   *
   * @param spec The spec for all arguments.
   * @param process A function to call at each arg spec.
   */
  
  
  function _traverse(spec, process, onGroup) {
    var groups = [];
  
    for (var k in spec) {
      var argSpec = spec[k];
  
      if ("args" in argSpec) {
        groups.push([argSpec, k]);
      } else {
        process(argSpec, k);
      }
    }
  
    for (var _i2 = 0, _groups2 = groups; _i2 < _groups2.length; _i2++) {
      var group_and_key = _groups2[_i2];
      onGroup === null || onGroup === void 0 ? void 0 : onGroup(group_and_key[0], group_and_key[1]);
  
      _traverse(group_and_key[0].args, process, onGroup);
    }
  }
  /**
   * A parser to extract key/value pairs from a command line input.
   * @member command The command line input.
   * @member keys The set of valid keys that can appear.
   * @member flags The set of valid flags that can appear.
   * @member index An internal marker for the progress of the parser over the input.
   */
  
  
  var CommandParser = /*#__PURE__*/function () {
    function CommandParser(command, keys, flags, positionalArgs) {
      args_classCallCheck(this, CommandParser);
  
      this.command = command;
      this.index = 0;
      this.keys = keys;
      this.flags = flags;
      this.positionalArgs = positionalArgs;
      this.positionalArgsParsed = 0;
    }
    /**
     * Perform the parsing of (key, value) pairs.
     * @returns The set of extracted (key, value) pairs.
     */
  
  
    args_createClass(CommandParser, [{
      key: "parse",
      value: function parse() {
        var _a, _b, _c, _d;
  
        this.index = 0; // reset the parser
  
        var result = new Map();
  
        while (!this.finished()) {
          // A flag F may appear as !F to be parsed as false.
          var parsing_negative_flag = false;
  
          if (this.peek() === "!") {
            parsing_negative_flag = true;
            this.consume(["!"]);
          }
  
          var startIndex = this.index;
          var key = this.parseKey();
  
          if (result.has(key)) {
            throw "Duplicate key ".concat(key, " (first set to ").concat((_a = result.get(key)) !== null && _a !== void 0 ? _a : "", ")");
          }
  
          if (this.flags.has(key)) {
            // The key corresponds to a flag.
            // Parse [key] as true and ![key] as false.
            result.set(key, parsing_negative_flag ? "false" : "true");
            if (this.peek() === "=") throw "Flag ".concat(key, " cannot be assigned a value");
            if (!this.finished()) this.consume([" "]);
            this.prevUnquotedKey = undefined;
          } else if (this.keys.has(key)) {
            // Parse [key]=[value] or [key] [value]
            this.consume(["=", " "]);
            var value = this.parseValue();
            if (["'", '"'].includes((_b = this.prev()) !== null && _b !== void 0 ? _b : "")) this.prevUnquotedKey = undefined;else this.prevUnquotedKey = key;
            if (!this.finished()) this.consume([" "]);
            result.set(key, value);
          } else if (this.positionalArgsParsed < this.positionalArgs.length && this.peek() !== "=") {
            // Parse [value] as the next positional arg
            var positionalKey = this.positionalArgs[this.positionalArgsParsed];
            this.positionalArgsParsed++;
            this.index = startIndex; // back up to reparse the key as a value
  
            var _value = this.parseValue();
  
            if (["'", '"'].includes((_c = this.prev()) !== null && _c !== void 0 ? _c : "")) this.prevUnquotedKey = undefined;else this.prevUnquotedKey = key;
            if (!this.finished()) this.consume([" "]);
            if (result.has(positionalKey)) throw "Cannot assign ".concat(_value, " to ").concat(positionalKey, " (positionally) since ").concat(positionalKey, " was already set to ").concat((_d = result.get(positionalKey)) !== null && _d !== void 0 ? _d : "");
            result.set(positionalKey, _value);
          } else {
            // Key not found; include a better error message if it is possible for quotes to have been missed
            if (this.prevUnquotedKey && this.peek() !== "=") throw "Unknown argument: ".concat(key, " (if this should have been parsed as part of ").concat(this.prevUnquotedKey, ", you should surround the entire value in quotes)");else throw "Unknown argument: ".concat(key);
          }
        }
  
        return result;
      }
      /**
       * @returns True if the entire command has been parsed.
       */
  
    }, {
      key: "finished",
      value: function finished() {
        return this.index >= this.command.length;
      }
      /**
       * @returns The next character to parse, if it exists.
       */
  
    }, {
      key: "peek",
      value: function peek() {
        if (this.index >= this.command.length) return undefined;
        return this.command.charAt(this.index);
      }
      /**
       * @returns The character just parsed, if it exists.
       */
  
    }, {
      key: "prev",
      value: function prev() {
        if (this.index <= 0) return undefined;
        if (this.index >= this.command.length + 1) return undefined;
        return this.command.charAt(this.index - 1);
      }
      /**
       * Advance the internal marker over the next expected character.
       * Throws an error on unexpected characters.
       *
       * @param allowed Characters that are expected.
       */
  
    }, {
      key: "consume",
      value: function consume(allowed) {
        var _a;
  
        if (this.finished()) throw "Expected ".concat(allowed);
  
        if (allowed.includes((_a = this.peek()) !== null && _a !== void 0 ? _a : "")) {
          this.index += 1;
        }
      }
      /**
       * Find the next occurance of one of the provided characters, or the end of
       * the string if the characters never appear again.
       *
       * @param searchValue The characters to locate.
       */
  
    }, {
      key: "findNext",
      value: function findNext(searchValue) {
        var result = this.command.length;
  
        var _iterator4 = args_createForOfIteratorHelper(searchValue),
            _step4;
  
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var value = _step4.value;
            var index = this.command.indexOf(value, this.index);
            if (index !== -1 && index < result) result = index;
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
  
        return result;
      }
      /**
       * Starting from the internal marker, parse a single key.
       * This also advances the internal marker.
       *
       * @returns The next key.
       */
  
    }, {
      key: "parseKey",
      value: function parseKey() {
        var keyEnd = this.findNext(["=", " "]);
        var key = this.command.substring(this.index, keyEnd);
        this.index = keyEnd;
        return key;
      }
      /**
       * Starting from the internal marker, parse a single value.
       * This also advances the internal marker.
       *
       * Values are a single word or enclosed in matching quotes, i.e. one of:
       *    "[^"]*"
       *    '[^']*"
       *    [^'"][^ ]*
       *
       * @returns The next value.
       */
  
    }, {
      key: "parseValue",
      value: function parseValue() {
        var _a, _b;
  
        var valueEnder = " ";
        var quotes = ["'", '"'];
  
        if (quotes.includes((_a = this.peek()) !== null && _a !== void 0 ? _a : "")) {
          valueEnder = (_b = this.peek()) !== null && _b !== void 0 ? _b : ""; // The value is everything until the next quote
  
          this.consume([valueEnder]); // Consume opening quote
        }
  
        var valueEnd = this.findNext([valueEnder]);
        var value = this.command.substring(this.index, valueEnd);
  
        if (valueEnder !== " " && valueEnd === this.command.length) {
          throw "No closing ".concat(valueEnder, " found for ").concat(valueEnder).concat(value);
        } // Consume the value (and closing quote)
  
  
        this.index = valueEnd;
        if (valueEnder !== " ") this.consume([valueEnder]);
        return value;
      }
    }]);
  
    return CommandParser;
  }();
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/overlappingNames.js
  /** THIS FILE IS AUTOMATICALLY GENERATED. See tools/parseItemSkillNames.ts for more information */
  var overlappingItemNames = ["spider web", "really sticky spider web", "dictionary", "NG", "Cloaca-Cola", "yo-yo", "top", "ball", "kite", "yo", "red potion", "blue potion", "bowling ball", "adder", "red button", "pile of sand", "mushroom", "deluxe mushroom"];
  var overlappingSkillNames = ["Shoot", "Thrust-Smack", "Headbutt", "Toss", "Knife in the Dark", "Sing", "Disarm", "LIGHT", "BURN", "Extract", "Meteor Shower", "Snipe", "Bite", "Kick", "Howl", "Cleave", "Boil", "Slice", "Rainbow"];
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/combat.js
  function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
  
  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = combat_getPrototypeOf(object); if (object === null) break; } return object; }
  
  function combat_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = combat_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  
  function combat_toConsumableArray(arr) { return combat_arrayWithoutHoles(arr) || combat_iterableToArray(arr) || combat_unsupportedIterableToArray(arr) || combat_nonIterableSpread(); }
  
  function combat_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function combat_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return combat_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return combat_arrayLikeToArray(o, minLen); }
  
  function combat_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  
  function combat_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return combat_arrayLikeToArray(arr); }
  
  function combat_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function combat_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function combat_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function combat_createClass(Constructor, protoProps, staticProps) { if (protoProps) combat_defineProperties(Constructor.prototype, protoProps); if (staticProps) combat_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function combat_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function combat_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) combat_setPrototypeOf(subClass, superClass); }
  
  function combat_createSuper(Derived) { var hasNativeReflectConstruct = combat_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = combat_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = combat_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return combat_possibleConstructorReturn(this, result); }; }
  
  function combat_possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return combat_assertThisInitialized(self); }
  
  function combat_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function combat_wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; combat_wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !combat_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return combat_construct(Class, arguments, combat_getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return combat_setPrototypeOf(Wrapper, Class); }; return combat_wrapNativeSuper(Class); }
  
  function combat_construct(Parent, args, Class) { if (combat_isNativeReflectConstruct()) { combat_construct = Reflect.construct; } else { combat_construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) combat_setPrototypeOf(instance, Class.prototype); return instance; }; } return combat_construct.apply(null, arguments); }
  
  function combat_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function combat_isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }
  
  function combat_setPrototypeOf(o, p) { combat_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return combat_setPrototypeOf(o, p); }
  
  function combat_getPrototypeOf(o) { combat_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return combat_getPrototypeOf(o); }
  
  
  
  
  
  var MACRO_NAME = "Script Autoattack Macro";
  /**
   * Get the KoL native ID of the macro with name name.
   *
   * @param name Name of the macro
   * @category Combat
   * @returns {number} The macro ID.
   */
  
  function getMacroId() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MACRO_NAME;
    var query = "//select[@name=\"macroid\"]/option[text()=\"".concat(name, "\"]/@value");
    var macroText = (0,external_kolmafia_namespaceObject.visitUrl)("account_combatmacros.php");
    var macroMatches = (0,external_kolmafia_namespaceObject.xpath)(macroText, query);
  
    if (macroMatches.length === 0) {
      (0,external_kolmafia_namespaceObject.visitUrl)("account_combatmacros.php?action=new");
      var newMacroText = (0,external_kolmafia_namespaceObject.visitUrl)("account_combatmacros.php?macroid=0&name=".concat(name, "&macrotext=abort&action=save"));
      macroMatches = (0,external_kolmafia_namespaceObject.xpath)(newMacroText, query);
    }
  
    if (macroMatches.length === 0) {
      // We may have hit the macro cap
      if ((0,external_kolmafia_namespaceObject.xpath)(macroText, '//select[@name="macroid"]/option').length >= 100) {
        throw new InvalidMacroError("Please delete at least one existing macro to make some space for Libram");
      } // Otherwise who knows why it failed
  
  
      throw new InvalidMacroError("Could not find or create macro ".concat(name));
    }
  
    return parseInt(macroMatches[0], 10);
  }
  /**
   * Converts an item name to a Item, or passes through an existing instance of Item
   *
   * @param itemOrName Item name or Item instance
   * @returns KoLmafia Item instance
   */
  
  function itemOrNameToItem(itemOrName) {
    return typeof itemOrName === "string" ? external_kolmafia_namespaceObject.Item.get(itemOrName) : itemOrName;
  }
  /**
   * Create a string of the item or items provided that is compatible with BALLS syntax and is non-ambiguous
   *
   * @param itemOrItems Item name, item instance, or 2-tuple of item name or item instance
   * @returns BALLS macro-compatible value for item or items provided
   */
  
  
  function itemOrItemsBallsMacroName(itemOrItems) {
    if (Array.isArray(itemOrItems)) {
      return itemOrItems.map(itemOrItemsBallsMacroName).join(", ");
    } else {
      var item = itemOrNameToItem(itemOrItems);
      return !overlappingItemNames.includes(item.name) ? item.name : item.id.toFixed(0);
    }
  }
  /**
   * Generate a BALLS macro condition to check wither the player has either a single or a 2-tuple of combat items
   *
   * @param itemOrItems Single or 2-tuple of combat items
   * @returns BALLS macro condition
   */
  
  
  function itemOrItemsBallsMacroPredicate(itemOrItems) {
    if (Array.isArray(itemOrItems)) {
      if (itemOrItems[0] === itemOrItems[1]) return "hastwocombatitems ".concat(itemOrItemsBallsMacroName(itemOrItems[0]));
      return itemOrItems.map(itemOrItemsBallsMacroPredicate).join(" && ");
    } else {
      return "hascombatitem ".concat(itemOrItemsBallsMacroName(itemOrItems));
    }
  }
  /**
   * Converts a skill name to a Skill, or passes through an existing instance of Skill
   *
   * @param skillOrName Skill name or Skill instance
   * @returns KoLmafia Skill instance
   */
  
  
  function skillOrNameToSkill(skillOrName) {
    if (typeof skillOrName === "string") {
      return external_kolmafia_namespaceObject.Skill.get(skillOrName);
    } else {
      return skillOrName;
    }
  }
  /**
   * Get a skill name in a form that is appropriate for BALLS macros
   *
   * @param skillOrName Skill name or Skill instance
   * @returns BALLS macro-suitable skill name
   */
  
  
  function skillBallsMacroName(skillOrName) {
    var skill = skillOrNameToSkill(skillOrName);
    return skill.name.match(/^[A-Za-z ]+$/) && !overlappingSkillNames.includes(skill.name) ? skill.name : skill.id;
  }
  
  var InvalidMacroError = /*#__PURE__*/function (_Error) {
    combat_inherits(InvalidMacroError, _Error);
  
    var _super = combat_createSuper(InvalidMacroError);
  
    function InvalidMacroError() {
      combat_classCallCheck(this, InvalidMacroError);
  
      return _super.apply(this, arguments);
    }
  
    return combat_createClass(InvalidMacroError);
  }( /*#__PURE__*/combat_wrapNativeSuper(Error));
  /**
   * BALLS macro builder for direct submission to KoL.
   * Create a new macro with `new Macro()` and add steps using the instance methods.
   * Uses a fluent interface, so each step returns the object for easy chaining of steps.
   * Each method is also defined as a static method that creates a new Macro with only that step.
   * For example, you can do `Macro.skill('Saucestorm').attack()`.
   */
  
  var Macro = /*#__PURE__*/function () {
    function Macro() {
      combat_classCallCheck(this, Macro);
  
      combat_defineProperty(this, "components", []);
  
      combat_defineProperty(this, "name", MACRO_NAME);
    }
  
    combat_createClass(Macro, [{
      key: "toString",
      value:
      /**
       * Convert macro to string.
       *
       * @returns BALLS macro
       */
      function toString() {
        return (this.components.join(";") + ";").replace(/;;+/g, ";");
      }
      /**
       * Gives your macro a new name to be used when saving an autoattack.
       *
       * @param name The name to be used when saving as an autoattack.
       * @returns The macro in question
       */
  
    }, {
      key: "rename",
      value: function rename(name) {
        this.name = name;
        return this;
      }
      /**
       * Creates a new Macro with a name other than the default name.
       *
       * @param name The name to assign this macro.
       * @returns A new Macro with the assigned name.
       */
  
    }, {
      key: "save",
      value:
      /**
       * Save a macro to a Mafia property for use in a consult script.
       */
      function save() {
        _set(Macro.SAVED_MACRO_PROPERTY, this.toString());
      }
      /**
       * Load a saved macro from the Mafia property.
       *
       * @returns Loaded macro text
       */
  
    }, {
      key: "step",
      value:
      /**
       * Statefully add one or several steps to a macro.
       *
       * @param nextSteps The steps to add to the macro.
       * @returns {Macro} This object itself.
       */
      function step() {
        var _ref, _this$components;
  
        for (var _len = arguments.length, nextSteps = new Array(_len), _key = 0; _key < _len; _key++) {
          nextSteps[_key] = arguments[_key];
        }
  
        var nextStepsStrings = (_ref = []).concat.apply(_ref, combat_toConsumableArray(nextSteps.map(x => x instanceof Macro ? x.components : [x])));
  
        (_this$components = this.components).push.apply(_this$components, combat_toConsumableArray(nextStepsStrings.filter(Boolean)));
  
        return this;
      }
      /**
       * Statefully add one or several steps to a macro.
       *
       * @param nextSteps The steps to add to the macro.
       * @returns {Macro} This object itself.
       */
  
    }, {
      key: "submit",
      value:
      /**
       * Submit the built macro to KoL. Only works inside combat.
       *
       * @returns Contents of the fight page after macro submission
       */
      function submit() {
        var final = this.toString();
        return (0,external_kolmafia_namespaceObject.visitUrl)("fight.php?action=macro&macrotext=".concat((0,external_kolmafia_namespaceObject.urlEncode)(final)), true, true);
      }
      /**
       * Set this macro as a KoL native autoattack.
       */
  
    }, {
      key: "setAutoAttack",
      value: function setAutoAttack() {
        var id = Macro.cachedMacroIds.get(this.name);
  
        if (id === undefined) {
          id = getMacroId(this.name);
          Macro.cachedMacroIds.set(this.name, id);
        }
  
        if ((0,external_kolmafia_namespaceObject.getAutoAttack)() === 99000000 + id && this.toString() === Macro.cachedAutoAttacks.get(this.name)) {
          // This macro is already set. Don"t make the server request.
          return;
        }
  
        (0,external_kolmafia_namespaceObject.visitUrl)("account_combatmacros.php?macroid=".concat(id, "&name=").concat((0,external_kolmafia_namespaceObject.urlEncode)(this.name), "&macrotext=").concat((0,external_kolmafia_namespaceObject.urlEncode)(this.toString()), "&action=save"), true, true);
        (0,external_kolmafia_namespaceObject.visitUrl)("account.php?am=1&action=autoattack&value=".concat(99000000 + id, "&ajax=1"));
        Macro.cachedAutoAttacks.set(this.name, this.toString());
      }
      /**
       * Renames the macro, then sets it as an autoattack.
       *
       * @param name The name to save the macro under as an autoattack.
       */
  
    }, {
      key: "setAutoAttackAs",
      value: function setAutoAttackAs(name) {
        this.name = name;
        this.setAutoAttack();
      }
      /**
       * Clear all cached autoattacks, and delete all stored macros server-side.
       */
  
    }, {
      key: "abort",
      value:
      /**
       * Add an "abort" step to this macro.
       *
       * @returns {Macro} This object itself.
       */
      function abort() {
        return this.step("abort");
      }
      /**
       * Create a new macro with an "abort" step.
       *
       * @returns {Macro} This object itself.
       */
  
    }, {
      key: "abortWithWarning",
      value:
      /**
       * Adds an "abort" step to this macro, with a warning message to print
       *
       * @param warning The warning message to print
       * @returns  {Macro} This object itself.
       */
      function abortWithWarning(warning) {
        return this.step("abort \"".concat(warning, "\""));
      }
      /**
       * Create a new macro with an "abort" step to this macro, with a warning message to print
       *
       * @param warning The warning message to print
       * @returns {Macro} This object itself.
       */
  
    }, {
      key: "runaway",
      value:
      /**
       * Add a "runaway" step to this macro.
       *
       * @returns {Macro} This object itself.
       */
      function runaway() {
        return this.step("runaway");
      }
      /**
       * Create a new macro with an "runaway" step.
       *
       * @returns {Macro} This object itself.
       */
  
    }, {
      key: "if_",
      value:
      /**
       * Add an "if" statement to this macro.
       *
       * @param condition The BALLS condition for the if statement.
       * @param ifTrue Continuation if the condition is true.
       * @returns {Macro} This object itself.
       */
      function if_(condition, ifTrue) {
        return this.step("if ".concat(Macro.makeBALLSPredicate(condition))).step(ifTrue).step("endif");
      }
      /**
       * Create a new macro with an "if" statement.
       *
       * @param condition The BALLS condition for the if statement.
       * @param ifTrue Continuation if the condition is true.
       * @returns {Macro} This object itself.
       */
  
    }, {
      key: "ifNot",
      value:
      /**
       * Add an "if" statement to this macro, inverting the condition.
       *
       * @param condition The BALLS condition for the if statement.
       * @param ifTrue Continuation if the condition is true.
       * @returns {Macro} This object itself.
       */
      function ifNot(condition, ifTrue) {
        return this.if_("!".concat(Macro.makeBALLSPredicate(condition)), ifTrue);
      }
      /**
       * Create a new macro with an "if" statement, inverting the condition.
       *
       * @param condition The BALLS condition for the if statement.
       * @param ifTrue Continuation if the condition is true.
       * @returns {Macro} This object itself.
       */
  
    }, {
      key: "while_",
      value:
      /**
       * Add a "while" statement to this macro.
       *
       * @param condition The BALLS condition for the while statement.
       * @param contents Loop to repeat while the condition is true.
       * @returns {Macro} This object itself.
       */
      function while_(condition, contents) {
        return this.step("while ".concat(Macro.makeBALLSPredicate(condition))).step(contents).step("endwhile");
      }
      /**
       * Create a new macro with a "while" statement.
       *
       * @param condition The BALLS condition for the while statement.
       * @param contents Loop to repeat while the condition is true.
       * @returns {Macro} This object itself.
       */
  
    }, {
      key: "externalIf",
      value:
      /**
       * Conditionally add a step to a macro based on a condition evaluated at the time of building the macro.
       *
       * @param condition The JS condition.
       * @param ifTrue Continuation to add if the condition is true.
       * @param ifFalse Optional input to turn this into an if...else statement.
       * @returns {Macro} This object itself.
       */
      function externalIf(condition, ifTrue, ifFalse) {
        if (condition) return this.step(ifTrue);else if (ifFalse) return this.step(ifFalse);else return this;
      }
      /**
       * Create a new macro with a condition evaluated at the time of building the macro.
       *
       * @param condition The JS condition.
       * @param ifTrue Continuation to add if the condition is true.
       * @param ifFalse Optional input to turn this into an if...else statement.
       * @returns {Macro} This object itself.
       */
  
    }, {
      key: "repeat",
      value:
      /**
       * Add a repeat step to the macro.
       *
       * @param condition The BALLS condition for the repeat statement, optional.
       * @returns {Macro} This object itself.
       */
      function repeat(condition) {
        return condition === undefined ? this.step("repeat") : this.step("repeat ".concat(Macro.makeBALLSPredicate(condition)));
      }
      /**
       * Add one or more skill cast steps to the macro.
       *
       * @param skills Skills to cast.
       * @returns {Macro} This object itself.
       */
  
    }, {
      key: "skill",
      value: function skill() {
        for (var _len2 = arguments.length, skills = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          skills[_key2] = arguments[_key2];
        }
  
        return this.step.apply(this, combat_toConsumableArray(skills.map(skill => {
          return "skill ".concat(skillBallsMacroName(skill));
        })));
      }
      /**
       * Create a new macro with one or more skill cast steps.
       *
       * @param skills Skills to cast.
       * @returns {Macro} This object itself.
       */
  
    }, {
      key: "trySkill",
      value:
      /**
       * Add one or more skill cast steps to the macro, where each step checks if you have the skill first.
       *
       * @param skills Skills to try casting.
       * @returns {Macro} This object itself.
       */
      function trySkill() {
        for (var _len3 = arguments.length, skills = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          skills[_key3] = arguments[_key3];
        }
  
        return this.step.apply(this, combat_toConsumableArray(skills.map(skillOrName => skillOrNameToSkill(skillOrName)).map(skill => {
          return Macro.if_(Macro.makeBALLSPredicate(skill), Macro.skill(skill));
        })));
      }
      /**
       * Create a new macro with one or more skill cast steps, where each step checks if you have the skill first.
       *
       * @param skills Skills to try casting.
       * @returns {Macro} This object itself.
       */
  
    }, {
      key: "trySkillRepeat",
      value:
      /**
       * Add one or more skill-cast-and-repeat steps to the macro, where each step checks if you have the skill first.
       *
       * @param skills Skills to try repeatedly casting.
       * @returns {Macro} This object itself.
       */
      function trySkillRepeat() {
        for (var _len4 = arguments.length, skills = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          skills[_key4] = arguments[_key4];
        }
  
        return this.step.apply(this, combat_toConsumableArray(skills.map(skillOrName => skillOrNameToSkill(skillOrName)).map(skill => {
          return Macro.if_(Macro.makeBALLSPredicate(skill), Macro.skill(skill).repeat(skill));
        })));
      }
      /**
       * Create a new macro with one or more skill-cast-and-repeat steps, where each step checks if you have the skill first.
       *
       * @param skills Skills to try repeatedly casting.
       * @returns {Macro} This object itself.
       */
  
    }, {
      key: "item",
      value:
      /**
       * Add one or more item steps to the macro.
       *
       * @param items Items to use. Pass a tuple [item1, item2] to funksling.
       * @returns {Macro} This object itself.
       */
      function item() {
        for (var _len5 = arguments.length, items = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          items[_key5] = arguments[_key5];
        }
  
        return this.step.apply(this, combat_toConsumableArray(items.map(itemOrItems => {
          return "use ".concat(itemOrItemsBallsMacroName(itemOrItems));
        })));
      }
      /**
       * Create a new macro with one or more item steps.
       *
       * @param items Items to use. Pass a tuple [item1, item2] to funksling.
       * @returns {Macro} This object itself.
       */
  
    }, {
      key: "tryItem",
      value:
      /**
       * Add one or more item steps to the macro, where each step checks to see if you have the item first.
       *
       * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
       * @returns {Macro} This object itself.
       */
      function tryItem() {
        for (var _len6 = arguments.length, items = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          items[_key6] = arguments[_key6];
        }
  
        return this.step.apply(this, combat_toConsumableArray(items.map(item => {
          return Macro.if_(itemOrItemsBallsMacroPredicate(item), Macro.item(item));
        })));
      }
      /**
       * Create a new macro with one or more item steps, where each step checks to see if you have the item first.
       *
       * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
       * @returns {Macro} This object itself.
       */
  
    }, {
      key: "attack",
      value:
      /**
       * Add an attack step to the macro.
       *
       * @returns {Macro} This object itself.
       */
      function attack() {
        return this.step("attack");
      }
      /**
       * Create a new macro with an attack step.
       *
       * @returns {Macro} This object itself.
       */
  
    }, {
      key: "ifHolidayWanderer",
      value:
      /**
       * Create an if_ statement based on what holiday of loathing it currently is. On non-holidays, returns the original macro, unmutated.
       *
       * @param macro The macro to place in the if_ statement
       * @returns This macro with supplied macro wapped in if statement matching holiday wanderers
       */
      function ifHolidayWanderer(macro) {
        var todaysWanderers = getTodaysHolidayWanderers();
        if (todaysWanderers.length === 0) return this;
        return this.if_(todaysWanderers.map(monster => "monsterid ".concat(monster.id)).join(" || "), macro);
      }
      /**
       * Create a new macro starting with an ifHolidayWanderer step.
       *
       * @param macro The macro to place inside the if_ statement
       * @returns New macro with supplied macro wrapped in if statement matching holiday wanderers
       */
  
    }, {
      key: "ifNotHolidayWanderer",
      value:
      /**
       * Create an if_ statement based on what holiday of loathing it currently is. On non-holidays, returns the original macro, with the input macro appended.
       *
       * @param macro The macro to place in the if_ statement.
       * @returns This macro with supplied macro wrapped in if statement matching monsters that are not holiday wanderers
       */
      function ifNotHolidayWanderer(macro) {
        var todaysWanderers = getTodaysHolidayWanderers();
        if (todaysWanderers.length === 0) return this.step(macro);
        return this.if_(todaysWanderers.map(monster => "!monsterid ".concat(monster.id)).join(" && "), macro);
      }
      /**
       * Create a new macro starting with an ifNotHolidayWanderer step.
       *
       * @param macro The macro to place inside the if_ statement
       * @returns New macro with supplied macro wrapped in if statement matching monsters that are not holiday wanderers
       */
  
    }], [{
      key: "rename",
      value: function rename(name) {
        return new this().rename(name);
      }
    }, {
      key: "load",
      value: function load() {
        var _this;
  
        return (_this = new this()).step.apply(_this, combat_toConsumableArray(property_get(Macro.SAVED_MACRO_PROPERTY).split(";")));
      }
      /**
       * Clear the saved macro in the Mafia property.
       */
  
    }, {
      key: "clearSaved",
      value: function clearSaved() {
        (0,external_kolmafia_namespaceObject.removeProperty)(Macro.SAVED_MACRO_PROPERTY);
      }
    }, {
      key: "step",
      value: function step() {
        var _this2;
  
        return (_this2 = new this()).step.apply(_this2, arguments);
      }
    }, {
      key: "clearAutoAttackMacros",
      value: function clearAutoAttackMacros() {
        var _iterator = combat_createForOfIteratorHelper(Macro.cachedAutoAttacks.keys()),
            _step;
  
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _Macro$cachedMacroIds;
  
            var name = _step.value;
            var id = (_Macro$cachedMacroIds = Macro.cachedMacroIds.get(name)) !== null && _Macro$cachedMacroIds !== void 0 ? _Macro$cachedMacroIds : getMacroId(name);
            (0,external_kolmafia_namespaceObject.visitUrl)("account_combatmacros.php?macroid=".concat(id, "&action=edit&what=Delete&confirm=1"));
            Macro.cachedAutoAttacks.delete(name);
            Macro.cachedMacroIds.delete(name);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "abort",
      value: function abort() {
        return new this().abort();
      }
    }, {
      key: "abortWithWarning",
      value: function abortWithWarning(warning) {
        return new this().abortWithWarning(warning);
      }
    }, {
      key: "runaway",
      value: function runaway() {
        return new this().runaway();
      }
      /**
       *
       * @param condition The BALLS condition or a type to make a condition for (Monster, Item, Skill, etc.)
       * @returns {string} The BALLS condition string
       */
  
    }, {
      key: "makeBALLSPredicate",
      value: function makeBALLSPredicate(condition) {
        if (condition instanceof external_kolmafia_namespaceObject.Monster) {
          return "monsterid ".concat(condition.id);
        } else if (condition instanceof Array) {
          if (condition[0] instanceof external_kolmafia_namespaceObject.Item) return itemOrItemsBallsMacroPredicate(condition);
          return "(".concat(condition.map(entry => Macro.makeBALLSPredicate(entry)).join(" || "), ")");
        } else if (condition instanceof external_kolmafia_namespaceObject.Effect) {
          return "haseffect ".concat(condition.id);
        } else if (condition instanceof external_kolmafia_namespaceObject.Skill) {
          return condition.combat ? "hasskill ".concat(skillBallsMacroName(condition)) : "knowsskill ".concat(condition.id);
        } else if (condition instanceof external_kolmafia_namespaceObject.Item) {
          if (!condition.combat) {
            throw new InvalidMacroError("Item ".concat(condition, " cannot be made a valid BALLS predicate (it is not combat-usable)"));
          }
  
          return "hascombatitem ".concat(itemOrItemsBallsMacroName(condition));
        } else if (condition instanceof external_kolmafia_namespaceObject.Location) {
          var snarfblat = condition.id;
  
          if (snarfblat < 1) {
            throw new InvalidMacroError("Location ".concat(condition, " cannot be made a valid BALLS predicate (it has no location id)"));
          }
  
          return "snarfblat ".concat(snarfblat);
        } else if (condition instanceof external_kolmafia_namespaceObject.Class) {
          if (condition.id > 6) {
            throw new InvalidMacroError("Class ".concat(condition, " cannot be made a valid BALLS predicate (it is not a standard class)"));
          }
  
          return condition.toString().replaceAll(" ", "").toLowerCase();
        } else if (condition instanceof external_kolmafia_namespaceObject.Stat) {
          return "".concat(condition.toString().toLowerCase(), "class");
        } else if (condition instanceof external_kolmafia_namespaceObject.Phylum) {
          return "monsterphylum ".concat(condition);
        } else if (condition instanceof external_kolmafia_namespaceObject.Element) {
          return "monsterelement ".concat(condition);
        }
  
        return condition;
      }
    }, {
      key: "if_",
      value: function if_(condition, ifTrue) {
        return new this().if_(condition, ifTrue);
      }
    }, {
      key: "ifNot",
      value: function ifNot(condition, ifTrue) {
        return new this().ifNot(condition, ifTrue);
      }
    }, {
      key: "while_",
      value: function while_(condition, contents) {
        return new this().while_(condition, contents);
      }
    }, {
      key: "externalIf",
      value: function externalIf(condition, ifTrue, ifFalse) {
        return new this().externalIf(condition, ifTrue, ifFalse);
      }
    }, {
      key: "skill",
      value: function skill() {
        var _this3;
  
        return (_this3 = new this()).skill.apply(_this3, arguments);
      }
    }, {
      key: "trySkill",
      value: function trySkill() {
        var _this4;
  
        return (_this4 = new this()).trySkill.apply(_this4, arguments);
      }
    }, {
      key: "trySkillRepeat",
      value: function trySkillRepeat() {
        var _this5;
  
        return (_this5 = new this()).trySkillRepeat.apply(_this5, arguments);
      }
    }, {
      key: "item",
      value: function item() {
        var _this6;
  
        return (_this6 = new this()).item.apply(_this6, arguments);
      }
    }, {
      key: "tryItem",
      value: function tryItem() {
        var _this7;
  
        return (_this7 = new this()).tryItem.apply(_this7, arguments);
      }
    }, {
      key: "attack",
      value: function attack() {
        return new this().attack();
      }
    }, {
      key: "ifHolidayWanderer",
      value: function ifHolidayWanderer(macro) {
        return new this().ifHolidayWanderer(macro);
      }
    }, {
      key: "ifNotHolidayWanderer",
      value: function ifNotHolidayWanderer(macro) {
        return new this().ifNotHolidayWanderer(macro);
      }
    }]);
  
    return Macro;
  }();
  /**
   * Adventure in a location and handle all combats with a given macro.
   * To use this function you will need to create a consult script that runs Macro.load().submit() and a CCS that calls that consult script.
   * See examples/consult.ts for an example.
   *
   * @category Combat
   * @param loc Location to adventure in.
   * @param macro Macro to execute.
   */
  
  combat_defineProperty(Macro, "SAVED_MACRO_PROPERTY", "libram_savedMacro");
  
  combat_defineProperty(Macro, "cachedMacroIds", new Map());
  
  combat_defineProperty(Macro, "cachedAutoAttacks", new Map());
  
  function adventureMacro(loc, macro) {
    macro.save();
    setAutoAttack(0);
  
    try {
      adv1(loc, 0, "");
  
      while (inMultiFight()) {
        runCombat();
      }
  
      if (choiceFollowsFight()) visitUrl("choice.php");
    } finally {
      Macro.clearSaved();
    }
  }
  /**
   * Adventure in a location and handle all combats with a given autoattack and manual macro.
   * To use the nextMacro parameter you will need to create a consult script that runs Macro.load().submit() and a CCS that calls that consult script.
   * See examples/consult.ts for an example.
   *
   * @category Combat
   * @param loc Location to adventure in.
   * @param autoMacro Macro to execute via KoL autoattack.
   * @param nextMacro Macro to execute manually after autoattack completes.
   */
  
  function adventureMacroAuto(loc, autoMacro) {
    var _nextMacro;
  
    var nextMacro = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    nextMacro = (_nextMacro = nextMacro) !== null && _nextMacro !== void 0 ? _nextMacro : Macro.abort();
    autoMacro.setAutoAttack();
    nextMacro.save();
  
    try {
      adv1(loc, 0, "");
  
      while (inMultiFight()) {
        runCombat();
      }
  
      if (choiceFollowsFight()) visitUrl("choice.php");
    } finally {
      Macro.clearSaved();
    }
  }
  var StrictMacro = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Macro) {
    combat_inherits(StrictMacro, _Macro);
  
    var _super2 = combat_createSuper(StrictMacro);
  
    function StrictMacro() {
      combat_classCallCheck(this, StrictMacro);
  
      return _super2.apply(this, arguments);
    }
  
    combat_createClass(StrictMacro, [{
      key: "skill",
      value:
      /**
       * Add one or more skill cast steps to the macro.
       *
       * @param skills Skills to cast.
       * @returns {StrictMacro} This object itself.
       */
      function skill() {
        var _get2;
  
        for (var _len7 = arguments.length, skills = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          skills[_key7] = arguments[_key7];
        }
  
        return (_get2 = _get(combat_getPrototypeOf(StrictMacro.prototype), "skill", this)).call.apply(_get2, [this].concat(skills));
      }
      /**
       * Create a new macro with one or more skill cast steps.
       *
       * @param skills Skills to cast.
       * @returns {StrictMacro} This object itself.
       */
  
    }, {
      key: "item",
      value:
      /**
       * Add one or more item steps to the macro.
       *
       * @param items Items to use. Pass a tuple [item1, item2] to funksling.
       * @returns {StrictMacro} This object itself.
       */
      function item() {
        var _get3;
  
        for (var _len8 = arguments.length, items = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
          items[_key8] = arguments[_key8];
        }
  
        return (_get3 = _get(combat_getPrototypeOf(StrictMacro.prototype), "item", this)).call.apply(_get3, [this].concat(items));
      }
      /**
       * Create a new macro with one or more item steps.
       *
       * @param items Items to use. Pass a tuple [item1, item2] to funksling.
       * @returns {StrictMacro} This object itself.
       */
  
    }, {
      key: "trySkill",
      value:
      /**
       * Add one or more skill cast steps to the macro, where each step checks if you have the skill first.
       *
       * @param skills Skills to try casting.
       * @returns {StrictMacro} This object itself.
       */
      function trySkill() {
        var _get4;
  
        for (var _len9 = arguments.length, skills = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
          skills[_key9] = arguments[_key9];
        }
  
        return (_get4 = _get(combat_getPrototypeOf(StrictMacro.prototype), "trySkill", this)).call.apply(_get4, [this].concat(skills));
      }
      /**
       * Create a new macro with one or more skill cast steps, where each step checks if you have the skill first.
       *
       * @param skills Skills to try casting.
       * @returns {StrictMacro} This object itself.
       */
  
    }, {
      key: "tryItem",
      value:
      /**
       * Add one or more item steps to the macro, where each step checks to see if you have the item first.
       *
       * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
       * @returns {StrictMacro} This object itself.
       */
      function tryItem() {
        var _get5;
  
        for (var _len10 = arguments.length, items = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
          items[_key10] = arguments[_key10];
        }
  
        return (_get5 = _get(combat_getPrototypeOf(StrictMacro.prototype), "tryItem", this)).call.apply(_get5, [this].concat(items));
      }
      /**
       * Create a new macro with one or more item steps, where each step checks to see if you have the item first.
       *
       * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
       * @returns {StrictMacro} This object itself.
       */
  
    }, {
      key: "trySkillRepeat",
      value:
      /**
       * Add one or more skill-cast-and-repeat steps to the macro, where each step checks if you have the skill first.
       *
       * @param skills Skills to try repeatedly casting.
       * @returns {StrictMacro} This object itself.
       */
      function trySkillRepeat() {
        var _get6;
  
        for (var _len11 = arguments.length, skills = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
          skills[_key11] = arguments[_key11];
        }
  
        return (_get6 = _get(combat_getPrototypeOf(StrictMacro.prototype), "trySkillRepeat", this)).call.apply(_get6, [this].concat(skills));
      }
      /**
       * Create a new macro with one or more skill-cast-and-repeat steps, where each step checks if you have the skill first.
       *
       * @param skills Skills to try repeatedly casting.
       * @returns {StrictMacro} This object itself.
       */
  
    }], [{
      key: "skill",
      value: function skill() {
        var _this8;
  
        return (_this8 = new this()).skill.apply(_this8, arguments);
      }
    }, {
      key: "item",
      value: function item() {
        var _this9;
  
        return (_this9 = new this()).item.apply(_this9, arguments);
      }
    }, {
      key: "trySkill",
      value: function trySkill() {
        var _this10;
  
        return (_this10 = new this()).trySkill.apply(_this10, arguments);
      }
    }, {
      key: "tryItem",
      value: function tryItem() {
        var _this11;
  
        return (_this11 = new this()).tryItem.apply(_this11, arguments);
      }
    }, {
      key: "trySkillRepeat",
      value: function trySkillRepeat() {
        var _this12;
  
        return (_this12 = new this()).trySkillRepeat.apply(_this12, arguments);
      }
    }]);
  
    return StrictMacro;
  }(Macro)));
  ;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/combat.js
  function dist_combat_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) dist_combat_setPrototypeOf(subClass, superClass); }
  
  function dist_combat_setPrototypeOf(o, p) { dist_combat_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return dist_combat_setPrototypeOf(o, p); }
  
  function dist_combat_createSuper(Derived) { var hasNativeReflectConstruct = dist_combat_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = dist_combat_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = dist_combat_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return dist_combat_possibleConstructorReturn(this, result); }; }
  
  function dist_combat_possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return dist_combat_assertThisInitialized(self); }
  
  function dist_combat_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function dist_combat_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function dist_combat_getPrototypeOf(o) { dist_combat_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return dist_combat_getPrototypeOf(o); }
  
  function dist_combat_toConsumableArray(arr) { return dist_combat_arrayWithoutHoles(arr) || dist_combat_iterableToArray(arr) || dist_combat_unsupportedIterableToArray(arr) || dist_combat_nonIterableSpread(); }
  
  function dist_combat_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function dist_combat_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  
  function dist_combat_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return dist_combat_arrayLikeToArray(arr); }
  
  function dist_combat_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = dist_combat_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  
  function dist_combat_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return dist_combat_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return dist_combat_arrayLikeToArray(o, minLen); }
  
  function dist_combat_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function dist_combat_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function dist_combat_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function dist_combat_createClass(Constructor, protoProps, staticProps) { if (protoProps) dist_combat_defineProperties(Constructor.prototype, protoProps); if (staticProps) dist_combat_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  
  
  /**
   * The strategy to use for combat for a task, which indicates what to do
   * for each monster.
   *
   * There are two ways to specify in a task what to do for a given monster:
   *   1. Provide a macro directly through .macro(macro, ...monsters)
   *   2. Provide an action through .action(action, ...monsters)
   *
   * An action is a strategy for dealing with a monster that is not fully
   * defined in the task. The possible actions are set with the type parameter A.
   * Actions should typically end the fight.
   *
   * For example, a task may want to banish a monster but not necessarily know or
   * care which banisher is used. Instead, it is best for the engine to determine
   * which banisher to use on the monster. To facilitate this, "banish" can be
   * defined as an action, e.g. with CombatStrategy<"banish">;
   *
   * Each action can be resolved by the engine by:
   *   1. Providing a default macro for the action through ActionDefaults<A>,
   *      which can be done through combat_defaults in Engine options, or
   *   2. Providing a CombatResource for the action through CombatResources<A>.
   *      This is typically done in Engine.customize() by checking if a given
   *      action is requested by the task with combat.can(.), and then providing
   *      an appropriate resource with resources.provide(.).
   *
   * A monster may have both a macro and an action defined, and a macro or action
   * can be specified to be done on all monsters. The order of combat is then:
   * 1. The macro(s) given in .startingMacro().
   * 2. The monster-specific macro(s) from .macro().
   * 3. The general macro(s) from .macro().
   * 4. The monster-specific action from .action().
   * 5. The general action from .action().
   *
   * If an autoattack is set with .autoattack(), the order of the autoattack is:
   * 1. The monster-specific macro(s) from .autoattack().
   * 2. The general macro(s) from .autoattack().
   */
  
  var CombatStrategy = /*#__PURE__*/function () {
    function CombatStrategy() {
      dist_combat_classCallCheck(this, CombatStrategy);
  
      this.macros = new Map();
      this.autoattacks = new Map();
      this.actions = new Map();
      this.ccs_entries = new Map();
    }
    /**
     * Add a macro to perform for this monster. If multiple macros are given
     * for the same monster, they are concatinated.
     *
     * @param macro The macro to perform.
     * @param monsters Which monsters to use the macro on. If not given, add the
     *  macro as a general macro.
     * @param prepend If true, add the macro before all previous macros for
     *    the same monster. If false, add after all previous macros.
     * @returns this
     */
  
  
    dist_combat_createClass(CombatStrategy, [{
      key: "macro",
      value: function macro(_macro, monsters, prepend) {
        var _a, _b;
  
        if (monsters === undefined) {
          if (this.default_macro === undefined) this.default_macro = [];
          if (prepend) this.default_macro.unshift(_macro);else this.default_macro.push(_macro);
        } else {
          if (monsters instanceof external_kolmafia_namespaceObject.Monster) monsters = [monsters];
  
          var _iterator = dist_combat_createForOfIteratorHelper(monsters),
              _step;
  
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var monster = _step.value;
              if (!this.macros.has(monster)) this.macros.set(monster, []);
              if (prepend) (_a = this.macros.get(monster)) === null || _a === void 0 ? void 0 : _a.unshift(_macro);else (_b = this.macros.get(monster)) === null || _b === void 0 ? void 0 : _b.push(_macro);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
  
        return this;
      }
      /**
       * Add a macro to perform as an autoattack for this monster. If multiple
       * macros are given for the same monster, they are concatinated.
       *
       * @param macro The macro to perform as autoattack.
       * @param monsters Which monsters to use the macro on. If not given, add the
       *  macro as a general macro.
       * @param prepend If true, add the macro before all previous autoattack
       *    macros for the same monster. If false, add after all previous macros.
       * @returns this
       */
  
    }, {
      key: "autoattack",
      value: function autoattack(macro, monsters, prepend) {
        var _a, _b;
  
        if (monsters === undefined) {
          if (this.default_autoattack === undefined) this.default_autoattack = [];
          if (prepend) this.default_autoattack.unshift(macro);else this.default_autoattack.push(macro);
        } else {
          if (monsters instanceof external_kolmafia_namespaceObject.Monster) monsters = [monsters];
  
          var _iterator2 = dist_combat_createForOfIteratorHelper(monsters),
              _step2;
  
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var monster = _step2.value;
              if (!this.autoattacks.has(monster)) this.autoattacks.set(monster, []);
              if (prepend) (_a = this.autoattacks.get(monster)) === null || _a === void 0 ? void 0 : _a.unshift(macro);else (_b = this.autoattacks.get(monster)) === null || _b === void 0 ? void 0 : _b.push(macro);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
  
        return this;
      }
      /**
       * Add a macro to perform at the start of combat.
       * @param macro The macro to perform.
       * @param prepend If true, add the macro before all previous starting
       *    macros. If false, add after all previous starting macros.
       * @returns this
       */
  
    }, {
      key: "startingMacro",
      value: function startingMacro(macro, prepend) {
        if (this.starting_macro === undefined) this.starting_macro = [];
        if (prepend) this.starting_macro.unshift(macro);else this.starting_macro.push(macro);
        return this;
      }
      /**
       * Add an action to perform for this monster. Only one action can be set for
       * each monster; any previous actions are overwritten.
       *
       * @param action The action to perform.
       * @param monsters Which monsters to use the action on. If not given, set the
       *  action as the general action for all monsters.
       * @returns this
       */
  
    }, {
      key: "action",
      value: function action(_action, monsters) {
        if (monsters === undefined) {
          this.default_action = _action;
        } else if (monsters instanceof external_kolmafia_namespaceObject.Monster) {
          this.actions.set(monsters, _action);
        } else {
          var _iterator3 = dist_combat_createForOfIteratorHelper(monsters),
              _step3;
  
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var monster = _step3.value;
              this.actions.set(monster, _action);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
  
        return this;
      }
      /**
       * Add a separate entry in the grimoire-generated CCS file for the specified
       * monster. If multiple entries are given for the same monster, they are
       * concatinated.
       *
       * This should typically be only used rarely, on monsters for which KoL does
       * not support macros in combat (e.g. rampaging adding machine).
       *
       * @param entry The entry to add for the given monster.
       * @param monsters Which monsters to add the entry to.
       * @param prepend If true, add the entry before all previous entries. If
       *   false, add after all previous entries.
       */
  
    }, {
      key: "ccs",
      value: function ccs(entry, monsters, prepend) {
        var _a, _b;
  
        if (monsters instanceof external_kolmafia_namespaceObject.Monster) monsters = [monsters];
  
        var _iterator4 = dist_combat_createForOfIteratorHelper(monsters),
            _step4;
  
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var monster = _step4.value;
            if (!this.ccs_entries.has(monster)) this.ccs_entries.set(monster, []);
            if (prepend) (_a = this.ccs_entries.get(monster)) === null || _a === void 0 ? void 0 : _a.unshift(entry);else (_b = this.ccs_entries.get(monster)) === null || _b === void 0 ? void 0 : _b.push(entry);
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
  
        return this;
      }
      /**
       * Check if the provided action was requested for any monsters, or for the
       * general action.
       */
  
    }, {
      key: "can",
      value: function can(action) {
        if (action === this.default_action) return true;
        return Array.from(this.actions.values()).includes(action);
      }
      /**
       * Return the general action (if it exists).
       */
  
    }, {
      key: "getDefaultAction",
      value: function getDefaultAction() {
        return this.default_action;
      }
      /**
       * Return all monsters where the provided action was requested.
       */
  
    }, {
      key: "where",
      value: function where(action) {
        return Array.from(this.actions.keys()).filter(key => this.actions.get(key) === action);
      }
      /**
       * Return the requested action (if it exists) for the provided monster.
       */
  
    }, {
      key: "currentStrategy",
      value: function currentStrategy(monster) {
        var _a;
  
        return (_a = this.actions.get(monster)) !== null && _a !== void 0 ? _a : this.default_action;
      }
      /**
       * Perform a deep copy of this combat strategy.
       */
  
    }, {
      key: "clone",
      value: function clone() {
        var result = new CombatStrategy();
        if (this.starting_macro) result.starting_macro = dist_combat_toConsumableArray(this.starting_macro);
        if (this.default_macro) result.default_macro = dist_combat_toConsumableArray(this.default_macro);
  
        var _iterator5 = dist_combat_createForOfIteratorHelper(this.macros),
            _step5;
  
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var pair = _step5.value;
            result.macros.set(pair[0], dist_combat_toConsumableArray(pair[1]));
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
  
        if (this.default_autoattack) result.default_autoattack = dist_combat_toConsumableArray(this.default_autoattack);
  
        var _iterator6 = dist_combat_createForOfIteratorHelper(this.autoattacks),
            _step6;
  
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var _pair = _step6.value;
            result.autoattacks.set(_pair[0], dist_combat_toConsumableArray(_pair[1]));
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
  
        result.default_action = this.default_action;
  
        var _iterator7 = dist_combat_createForOfIteratorHelper(this.actions),
            _step7;
  
        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var _pair2 = _step7.value;
            result.actions.set(_pair2[0], _pair2[1]);
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
  
        var _iterator8 = dist_combat_createForOfIteratorHelper(this.ccs_entries),
            _step8;
  
        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var _pair3 = _step8.value;
            result.ccs_entries.set(_pair3[0], dist_combat_toConsumableArray(_pair3[1]));
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
  
        return result;
      }
      /**
       * Compile this combat strategy into a complete macro.
       *
       * @param resources The resources to use to fulfil actions.
       * @param defaults Macros to perform for each action without a resource.
       * @param location The adventuring location, if known.
       * @returns The compiled macro.
       */
  
    }, {
      key: "compile",
      value: function compile(resources, defaults, location) {
        var _a, _b;
  
        var result = new Macro(); // If there is macro precursor, do it now
  
        if (this.starting_macro) {
          result.step.apply(result, dist_combat_toConsumableArray(this.starting_macro.map(undelay)));
        } // Perform any monster-specific macros (these may or may not end the fight)
  
  
        var monster_macros = new CompressedMacro();
        this.macros.forEach((value, key) => {
          var _Macro;
  
          monster_macros.add(key, (_Macro = new Macro()).step.apply(_Macro, dist_combat_toConsumableArray(value.map(undelay))));
        });
        result.step(monster_macros.compile()); // Perform the non-monster specific macro
  
        if (this.default_macro) result.step.apply(result, dist_combat_toConsumableArray(this.default_macro.map(undelay))); // Perform any monster-specific actions (these should end the fight)
  
        var monster_actions = new CompressedMacro();
        this.actions.forEach((action, key) => {
          var _a, _b;
  
          var macro = (_a = resources.getMacro(action)) !== null && _a !== void 0 ? _a : (_b = defaults === null || defaults === void 0 ? void 0 : defaults[action]) === null || _b === void 0 ? void 0 : _b.call(defaults, key);
          if (macro) monster_actions.add(key, new Macro().step(macro));
        });
        result.step(monster_actions.compile()); // Perform the non-monster specific action (these should end the fight)
  
        if (this.default_action) {
          var macro = (_a = resources.getMacro(this.default_action)) !== null && _a !== void 0 ? _a : (_b = defaults === null || defaults === void 0 ? void 0 : defaults[this.default_action]) === null || _b === void 0 ? void 0 : _b.call(defaults, location);
          if (macro) result.step(macro);
        }
  
        return result;
      }
      /**
       * Compile the autoattack of this combat strategy into a complete macro.
       *
       * @returns The compiled autoattack macro.
       */
  
    }, {
      key: "compileAutoattack",
      value: function compileAutoattack() {
        var result = new Macro(); // Perform any monster-specific autoattacks (these may or may not end the fight)
  
        var monster_macros = new CompressedMacro();
        this.autoattacks.forEach((value, key) => {
          var _Macro2;
  
          monster_macros.add(key, (_Macro2 = new Macro()).step.apply(_Macro2, dist_combat_toConsumableArray(value.map(undelay))));
        });
        result.step(monster_macros.compile()); // Perform the non-monster specific macro
  
        if (this.default_autoattack) result.step.apply(result, dist_combat_toConsumableArray(this.default_autoattack.map(undelay)));
        return result;
      }
      /**
       * Compile the CCS entries of this combat strategy into a single array.
       *
       * @returns The lines of a CCS file, not including the [default] macro.
       */
  
    }, {
      key: "compileCcs",
      value: function compileCcs() {
        var result = [];
  
        var _iterator9 = dist_combat_createForOfIteratorHelper(this.ccs_entries),
            _step9;
  
        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var ccs_entry = _step9.value;
            result.push.apply(result, ["[".concat(ccs_entry[0].name, "]")].concat(dist_combat_toConsumableArray(ccs_entry[1])));
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }
  
        return result;
      }
      /**
       * For advanced users, this method will generate a fluent API for requesting
       * actions. That is, it allows you to do
       *   combat.banish(monster1).kill(monster2)
       * instead of
       *   combat.action("banish", monster1).action("kill", monster2)
       *
       * Example usage:
       *   const myActions = ["kill", "banish"] as const;
       *   class MyCombatStrategy extends CombatStrategy.withActions(myActions) {}
       *
       *   const foo: MyCombatStrategy = new MyCombatStrategy();
       *   const bar: MyCombatStrategy = foo.banish($monster`crate`).kill($monster`tumbleweed`);
       */
  
    }], [{
      key: "withActions",
      value: function withActions(actions) {
        var CombatStrategyWithActions = /*#__PURE__*/function (_this) {
          dist_combat_inherits(CombatStrategyWithActions, _this);
  
          var _super = dist_combat_createSuper(CombatStrategyWithActions);
  
          function CombatStrategyWithActions() {
            dist_combat_classCallCheck(this, CombatStrategyWithActions);
  
            return _super.apply(this, arguments);
          }
  
          return dist_combat_createClass(CombatStrategyWithActions);
        }(this); // eslint-disable-next-line @typescript-eslint/no-explicit-any
  
  
        var proto = CombatStrategyWithActions.prototype;
  
        var _iterator10 = dist_combat_createForOfIteratorHelper(actions),
            _step10;
  
        try {
          var _loop = function _loop() {
            var action = _step10.value;
  
            proto[action] = function (monsters) {
              return this.action(action, monsters);
            };
          };
  
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            _loop();
          } // eslint-disable-next-line @typescript-eslint/no-explicit-any
  
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
  
        return CombatStrategyWithActions;
      }
    }]);
  
    return CombatStrategy;
  }();
  /**
   * A class to build a macro that combines if statements (keyed on monster) with
   * identical body into a single if statement, to avoid the 37-action limit.
   * Ex: [if x; A; if y; B; if z; A;] will turn into [if x || z; A; if y; B]
   */
  
  var CompressedMacro = /*#__PURE__*/function () {
    function CompressedMacro() {
      dist_combat_classCallCheck(this, CompressedMacro);
  
      this.components = new Map();
    }
    /**
     * Set the macro for a given monster (replacing any previous macros).
     */
  
  
    dist_combat_createClass(CompressedMacro, [{
      key: "add",
      value: function add(monster, macro) {
        var _a;
  
        var macro_text = macro.toString();
        if (macro_text.length === 0) return;
        if (!this.components.has(macro_text)) this.components.set(macro_text, [monster]);else (_a = this.components.get(macro_text)) === null || _a === void 0 ? void 0 : _a.push(monster);
      }
      /**
       * Compile the compressed form of the macro.
       */
  
    }, {
      key: "compile",
      value: function compile() {
        var result = new Macro();
        this.components.forEach((monsters, macro) => {
          var condition = monsters.map(mon => "monsterid ".concat(mon.id)).join(" || ");
          result.if_(condition, macro);
        });
        return result;
      }
    }]);
  
    return CompressedMacro;
  }();
  /**
   * A class for providing resources to fulfil combat actions.
   */
  
  
  var CombatResources = /*#__PURE__*/function () {
    function CombatResources() {
      dist_combat_classCallCheck(this, CombatResources);
  
      this.resources = new Map();
    }
    /**
     * Use the provided resource to fulfil the provided action.
     * (If the resource is undefined, this does nothing).
     */
  
  
    dist_combat_createClass(CombatResources, [{
      key: "provide",
      value: function provide(action, resource) {
        if (resource === undefined) return;
        this.resources.set(action, resource);
      }
      /**
       * Return true if the provided action has a resource provided.
       */
  
    }, {
      key: "has",
      value: function has(action) {
        return this.resources.has(action);
      }
      /**
       * Return all provided combat resources.
       */
  
    }, {
      key: "all",
      value: function all() {
        return Array.from(this.resources.values());
      }
      /**
       * Get the macro provided by the resource for this action, or undefined if
       * no resource was provided.
       */
  
    }, {
      key: "getMacro",
      value: function getMacro(action) {
        var resource = this.resources.get(action);
        if (resource === undefined) return undefined;
        if (resource.do instanceof external_kolmafia_namespaceObject.Item) return new Macro().item(resource.do);
        if (resource.do instanceof external_kolmafia_namespaceObject.Skill) return new Macro().skill(resource.do);
        return undelay(resource.do);
      }
    }]);
  
    return CombatResources;
  }();
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/logger.js
  var _defaultHandlers;
  
  function logger_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function logger_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function logger_createClass(Constructor, protoProps, staticProps) { if (protoProps) logger_defineProperties(Constructor.prototype, protoProps); if (staticProps) logger_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function logger_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  
  var LogLevels;
  
  (function (LogLevels) {
    LogLevels[LogLevels["NONE"] = 0] = "NONE";
    LogLevels[LogLevels["ERROR"] = 1] = "ERROR";
    LogLevels[LogLevels["WARNING"] = 2] = "WARNING";
    LogLevels[LogLevels["INFO"] = 3] = "INFO";
    LogLevels[LogLevels["DEBUG"] = 4] = "DEBUG";
  })(LogLevels || (LogLevels = {}));
  
  var defaultHandlers = (_defaultHandlers = {}, logger_defineProperty(_defaultHandlers, LogLevels.INFO, message => {
    (0,external_kolmafia_namespaceObject.printHtml)("<b>[Libram Info]</b> ".concat(message));
    (0,external_kolmafia_namespaceObject.logprint)("[Libram] ".concat(message));
    return;
  }), logger_defineProperty(_defaultHandlers, LogLevels.WARNING, message => {
    (0,external_kolmafia_namespaceObject.printHtml)("<span style=\"background: orange; color: white;\"><b>[Libram Warning]</b> ".concat(message, "</span>"));
    (0,external_kolmafia_namespaceObject.logprint)("[Libram] ".concat(message));
    return;
  }), logger_defineProperty(_defaultHandlers, LogLevels.ERROR, error => {
    (0,external_kolmafia_namespaceObject.printHtml)("<span style=\"background: red; color: white;\"><b>[Libram Error]</b> ".concat(error.toString(), "</span>"));
    (0,external_kolmafia_namespaceObject.logprint)("[Libram] ".concat(error));
    return;
  }), logger_defineProperty(_defaultHandlers, LogLevels.DEBUG, message => {
    (0,external_kolmafia_namespaceObject.printHtml)("<span style=\"background: red; color: white;\"><b>[Libram Debug]</b> ".concat(message, "</span>"));
    (0,external_kolmafia_namespaceObject.logprint)("[Libram] ".concat(message));
    return;
  }), _defaultHandlers);
  
  var Logger = /*#__PURE__*/function () {
    function Logger() {
      logger_classCallCheck(this, Logger);
  
      logger_defineProperty(this, "handlers", defaultHandlers);
    }
  
    logger_createClass(Logger, [{
      key: "level",
      get: function get() {
        return Logger.currentLevel;
      }
    }, {
      key: "setLevel",
      value: function setLevel(level) {
        Logger.currentLevel = level;
      }
    }, {
      key: "setHandler",
      value: function setHandler(level, callback) {
        this.handlers[level] = callback;
      } // eslint-disable-next-line @typescript-eslint/no-explicit-any
  
    }, {
      key: "log",
      value: function log(level, message) {
        if (this.level >= level) this.handlers[level](message);
      }
    }, {
      key: "info",
      value: function info(message) {
        this.log(LogLevels.INFO, message);
      }
    }, {
      key: "warning",
      value: function warning(message) {
        this.log(LogLevels.WARNING, message);
      }
    }, {
      key: "error",
      value: function error(message) {
        this.log(LogLevels.ERROR, message);
      }
    }, {
      key: "debug",
      value: function debug(message) {
        this.log(LogLevels.DEBUG, message);
      }
    }]);
  
    return Logger;
  }();
  
  logger_defineProperty(Logger, "currentLevel", LogLevels.ERROR);
  
  /* harmony default export */ const dist_logger = (new Logger());
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/maximize.js
  var maximize_templateObject, maximize_templateObject2, maximize_templateObject3, maximize_templateObject4, maximize_templateObject5, maximize_templateObject6, maximize_templateObject7, maximize_templateObject8, maximize_templateObject9, maximize_templateObject10, maximize_templateObject11, maximize_templateObject12, maximize_templateObject13, maximize_templateObject14, maximize_templateObject15, maximize_templateObject16, maximize_templateObject17, maximize_templateObject18, maximize_templateObject19, maximize_templateObject20, maximize_templateObject21, maximize_templateObject22, maximize_templateObject23, maximize_templateObject24, maximize_templateObject25, maximize_templateObject26, maximize_templateObject27, maximize_templateObject28, maximize_templateObject29, maximize_templateObject30, maximize_templateObject31, maximize_templateObject32, maximize_templateObject33, maximize_templateObject34, maximize_templateObject35, maximize_templateObject36, maximize_templateObject37, maximize_templateObject38, maximize_templateObject39, maximize_templateObject40, maximize_templateObject41, maximize_templateObject42, maximize_templateObject43, maximize_templateObject44, maximize_templateObject45, maximize_templateObject46, maximize_templateObject47, maximize_templateObject48, maximize_templateObject49, maximize_templateObject50;
  
  function maximize_slicedToArray(arr, i) { return maximize_arrayWithHoles(arr) || maximize_iterableToArrayLimit(arr, i) || maximize_unsupportedIterableToArray(arr, i) || maximize_nonIterableRest(); }
  
  function maximize_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function maximize_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
  
  function maximize_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
  
  function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
  
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  
  function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
  
  function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
  
  function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
  
  function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
  
  function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
  
  function maximize_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function maximize_createClass(Constructor, protoProps, staticProps) { if (protoProps) maximize_defineProperties(Constructor.prototype, protoProps); if (staticProps) maximize_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function maximize_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function maximize_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = maximize_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  
  function maximize_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  function maximize_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  
  function maximize_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? maximize_ownKeys(Object(source), !0).forEach(function (key) { maximize_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : maximize_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  
  function maximize_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function maximize_toConsumableArray(arr) { return maximize_arrayWithoutHoles(arr) || maximize_iterableToArray(arr) || maximize_unsupportedIterableToArray(arr) || maximize_nonIterableSpread(); }
  
  function maximize_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function maximize_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return maximize_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return maximize_arrayLikeToArray(o, minLen); }
  
  function maximize_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  
  function maximize_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return maximize_arrayLikeToArray(arr); }
  
  function maximize_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  
  
  
  
  
  
  function toMaximizerName(_ref) {
    var name = _ref.name,
        id = _ref.id;
    return name.includes(";") ? "\xB6".concat(id) : name;
  }
  /**
   * Merges a partial set of maximizer options onto a full set maximizer options. We merge via overriding for all boolean properties and for onlySlot, and concat all other array properties.
   *
   * @param defaultOptions MaximizeOptions to use as a "base."
   * @param addendums Options to attempt to merge onto defaultOptions.
   * @returns Merged maximizer options
   */
  
  
  function mergeMaximizeOptions(defaultOptions, addendums) {
    var _addendums$updateOnFa, _addendums$updateOnCa, _addendums$updateOnLo, _addendums$useOutfitC, _addendums$forceEquip, _addendums$preventEqu, _addendums$bonusEquip, _addendums$onlySlot, _addendums$preventSlo, _addendums$forceUpdat, _addendums$modes;
  
    return {
      updateOnFamiliarChange: (_addendums$updateOnFa = addendums.updateOnFamiliarChange) !== null && _addendums$updateOnFa !== void 0 ? _addendums$updateOnFa : defaultOptions.updateOnFamiliarChange,
      updateOnCanEquipChanged: (_addendums$updateOnCa = addendums.updateOnCanEquipChanged) !== null && _addendums$updateOnCa !== void 0 ? _addendums$updateOnCa : defaultOptions.updateOnCanEquipChanged,
      updateOnLocationChange: (_addendums$updateOnLo = addendums.updateOnLocationChange) !== null && _addendums$updateOnLo !== void 0 ? _addendums$updateOnLo : defaultOptions.updateOnLocationChange,
      useOutfitCaching: (_addendums$useOutfitC = addendums.useOutfitCaching) !== null && _addendums$useOutfitC !== void 0 ? _addendums$useOutfitC : defaultOptions.useOutfitCaching,
      forceEquip: [].concat(maximize_toConsumableArray(defaultOptions.forceEquip), maximize_toConsumableArray((_addendums$forceEquip = addendums.forceEquip) !== null && _addendums$forceEquip !== void 0 ? _addendums$forceEquip : [])),
      preventEquip: [].concat(maximize_toConsumableArray(defaultOptions.preventEquip), maximize_toConsumableArray((_addendums$preventEqu = addendums.preventEquip) !== null && _addendums$preventEqu !== void 0 ? _addendums$preventEqu : [])).filter(item => {
        var _addendums$forceEquip2;
  
        return !defaultOptions.forceEquip.includes(item) && !((_addendums$forceEquip2 = addendums.forceEquip) !== null && _addendums$forceEquip2 !== void 0 && _addendums$forceEquip2.includes(item));
      }),
      bonusEquip: new Map([].concat(maximize_toConsumableArray(defaultOptions.bonusEquip), maximize_toConsumableArray((_addendums$bonusEquip = addendums.bonusEquip) !== null && _addendums$bonusEquip !== void 0 ? _addendums$bonusEquip : []))),
      onlySlot: (_addendums$onlySlot = addendums.onlySlot) !== null && _addendums$onlySlot !== void 0 ? _addendums$onlySlot : defaultOptions.onlySlot,
      preventSlot: [].concat(maximize_toConsumableArray(defaultOptions.preventSlot), maximize_toConsumableArray((_addendums$preventSlo = addendums.preventSlot) !== null && _addendums$preventSlo !== void 0 ? _addendums$preventSlo : [])),
      forceUpdate: (_addendums$forceUpdat = addendums.forceUpdate) !== null && _addendums$forceUpdat !== void 0 ? _addendums$forceUpdat : defaultOptions.forceUpdate,
      modes: maximize_objectSpread(maximize_objectSpread({}, defaultOptions.modes), (_addendums$modes = addendums.modes) !== null && _addendums$modes !== void 0 ? _addendums$modes : {})
    };
  }
  var defaultMaximizeOptions = {
    updateOnFamiliarChange: true,
    updateOnCanEquipChanged: true,
    updateOnLocationChange: false,
    useOutfitCaching: true,
    forceEquip: [],
    preventEquip: [],
    bonusEquip: new Map(),
    onlySlot: [],
    preventSlot: [],
    forceUpdate: false,
    modes: {}
  };
  /**
   *
   * @param options Default options for each maximizer run.
   * @param options.updateOnFamiliarChange Re-run the maximizer if familiar has changed. Default true.
   * @param options.updateOnCanEquipChanged Re-run the maximizer if stats have changed what can be equipped. Default true.
   * @param options.forceEquip Equipment to force-equip ("equip X").
   * @param options.preventEquip Equipment to prevent equipping ("-equip X").
   * @param options.bonusEquip Equipment to apply a bonus to ("200 bonus X").
   */
  
  function setDefaultMaximizeOptions(options) {
    Object.assign(defaultMaximizeOptions, options);
  }
  var modeableCommands = ["backupcamera", "umbrella", "snowsuit", "edpiece", "retrocape", "parka", "jillcandle"];
  var modeableItems = {
    backupcamera: template_string_$item(maximize_templateObject || (maximize_templateObject = maximize_taggedTemplateLiteral(["backup camera"]))),
    umbrella: template_string_$item(maximize_templateObject2 || (maximize_templateObject2 = maximize_taggedTemplateLiteral(["unbreakable umbrella"]))),
    snowsuit: template_string_$item(maximize_templateObject3 || (maximize_templateObject3 = maximize_taggedTemplateLiteral(["Snow Suit"]))),
    edpiece: template_string_$item(maximize_templateObject4 || (maximize_templateObject4 = maximize_taggedTemplateLiteral(["The Crown of Ed the Undying"]))),
    retrocape: template_string_$item(maximize_templateObject5 || (maximize_templateObject5 = maximize_taggedTemplateLiteral(["unwrapped knock-off retro superhero cape"]))),
    parka: template_string_$item(maximize_templateObject6 || (maximize_templateObject6 = maximize_taggedTemplateLiteral(["Jurassic Parka"]))),
    jillcandle: template_string_$item(maximize_templateObject7 || (maximize_templateObject7 = maximize_taggedTemplateLiteral(["LED candle"])))
  };
  var modeableState = {
    backupcamera: () => (0,external_kolmafia_namespaceObject.getProperty)("backupCameraMode"),
    umbrella: () => (0,external_kolmafia_namespaceObject.getProperty)("umbrellaState"),
    snowsuit: () => (0,external_kolmafia_namespaceObject.getProperty)("snowsuit"),
    edpiece: () => (0,external_kolmafia_namespaceObject.getProperty)("edPiece"),
    retrocape: () => (0,external_kolmafia_namespaceObject.getProperty)("retroCapeSuperhero") + " " + (0,external_kolmafia_namespaceObject.getProperty)("retroCapeWashingInstructions"),
    parka: () => (0,external_kolmafia_namespaceObject.getProperty)("parkaMode"),
    jillcandle: () => (0,external_kolmafia_namespaceObject.getProperty)("ledCandleMode")
  };
  /**
   * Get set of current modes for modeables
   *
   * @returns Set of modes
   */
  
  function getCurrentModes() {
    var modes = {};
  
    var _iterator = maximize_createForOfIteratorHelper(modeableCommands),
        _step;
  
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var key = _step.value;
  
        if ((0,external_kolmafia_namespaceObject.haveEquipped)(modeableItems[key])) {
          modes[key] = modeableState[key]();
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  
    return modes;
  }
  /**
   * Apply set of modes
   *
   * @param modes Modes to apply
   */
  
  function applyModes(modes) {
    var _iterator2 = maximize_createForOfIteratorHelper(modeableCommands),
        _step2;
  
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var command = _step2.value;
  
        if ((0,external_kolmafia_namespaceObject.haveEquipped)(modeableItems[command]) && modes[command] !== undefined) {
          if (modeableState[command]() !== modes[command]) {
            (0,external_kolmafia_namespaceObject.cliExecute)(command + " " + modes[command]);
          }
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  } // Subset of slots that are valid for caching.
  
  var cachedSlots = $slots(maximize_templateObject8 || (maximize_templateObject8 = maximize_taggedTemplateLiteral(["hat, weapon, off-hand, back, shirt, pants, acc1, acc2, acc3, familiar"])));
  
  var CacheEntry = /*#__PURE__*/maximize_createClass(function CacheEntry(equipment, rider, familiar, canEquipItemCount, modes) {
    maximize_classCallCheck(this, CacheEntry);
  
    maximize_defineProperty(this, "equipment", void 0);
  
    maximize_defineProperty(this, "rider", void 0);
  
    maximize_defineProperty(this, "familiar", void 0);
  
    maximize_defineProperty(this, "canEquipItemCount", void 0);
  
    maximize_defineProperty(this, "modes", void 0);
  
    this.equipment = equipment;
    this.rider = rider;
    this.familiar = familiar;
    this.canEquipItemCount = canEquipItemCount;
    this.modes = modes;
  });
  
  var _outfitSlots = /*#__PURE__*/new WeakMap();
  
  var _useHistory = /*#__PURE__*/new WeakMap();
  
  var _maxSize = /*#__PURE__*/new WeakMap();
  
  var OutfitLRUCache = /*#__PURE__*/function () {
    // Current outfits allocated
    // Array of indices into #outfitSlots in order of use. Most recent at the front.
    function OutfitLRUCache(maxSize) {
      maximize_classCallCheck(this, OutfitLRUCache);
  
      _classPrivateFieldInitSpec(this, _outfitSlots, {
        writable: true,
        value: []
      });
  
      _classPrivateFieldInitSpec(this, _useHistory, {
        writable: true,
        value: []
      });
  
      _classPrivateFieldInitSpec(this, _maxSize, {
        writable: true,
        value: void 0
      });
  
      _classPrivateFieldSet(this, _maxSize, maxSize);
    }
  
    maximize_createClass(OutfitLRUCache, [{
      key: "checkConsistent",
      value: function checkConsistent() {
        if (_classPrivateFieldGet(this, _useHistory).length !== _classPrivateFieldGet(this, _outfitSlots).length || !maximize_toConsumableArray(_classPrivateFieldGet(this, _useHistory)).sort().every((value, index) => value === index)) {
          throw new Error("Outfit cache consistency failed.");
        }
      }
    }, {
      key: "promote",
      value: function promote(index) {
        _classPrivateFieldSet(this, _useHistory, [index].concat(maximize_toConsumableArray(_classPrivateFieldGet(this, _useHistory).filter(i => i !== index))));
  
        this.checkConsistent();
      }
    }, {
      key: "get",
      value: function get(key) {
        var index = _classPrivateFieldGet(this, _outfitSlots).indexOf(key);
  
        if (index < 0) return undefined;
        this.promote(index);
        return "".concat(OutfitLRUCache.OUTFIT_PREFIX, " ").concat(index);
      }
    }, {
      key: "insert",
      value: function insert(key) {
        var lastUseIndex = undefined;
  
        if (_classPrivateFieldGet(this, _outfitSlots).length >= _classPrivateFieldGet(this, _maxSize)) {
          lastUseIndex = _classPrivateFieldGet(this, _useHistory).pop();
  
          if (lastUseIndex === undefined) {
            throw new Error("Outfit cache consistency failed.");
          }
  
          _classPrivateFieldGet(this, _useHistory).splice(0, 0, lastUseIndex);
  
          _classPrivateFieldGet(this, _outfitSlots)[lastUseIndex] = key;
          this.checkConsistent();
          return "".concat(OutfitLRUCache.OUTFIT_PREFIX, " ").concat(lastUseIndex);
        } else {
          var index = _classPrivateFieldGet(this, _outfitSlots).push(key) - 1;
  
          _classPrivateFieldGet(this, _useHistory).splice(0, 0, index);
  
          this.checkConsistent();
          return "".concat(OutfitLRUCache.OUTFIT_PREFIX, " ").concat(index);
        }
      }
    }, {
      key: "clear",
      value: function clear() {
        _classPrivateFieldSet(this, _outfitSlots, []);
  
        _classPrivateFieldSet(this, _useHistory, []);
      }
    }]);
  
    return OutfitLRUCache;
  }();
  /**
   * Save current equipment as KoL-native outfit.
   *
   * @param name Name of new outfit.
   */
  
  
  maximize_defineProperty(OutfitLRUCache, "OUTFIT_PREFIX", "Script Outfit");
  
  function saveOutfit(name) {
    (0,external_kolmafia_namespaceObject.cliExecute)("outfit save ".concat(name));
  } // Objective cache entries.
  
  
  var cachedObjectives = {}; // Outfit cache entries. Keep 6 by default to avoid cluttering list.
  
  var outfitCache = new OutfitLRUCache(6); // Cache to prevent rescanning all items unnecessarily
  
  var cachedStats = [0, 0, 0];
  var cachedCanEquipItemCount = 0;
  /**
   * Count the number of unique items that can be equipped.
   *
   * @returns The count of unique items.
   */
  
  function canEquipItemCount() {
    var stats = $stats(maximize_templateObject9 || (maximize_templateObject9 = maximize_taggedTemplateLiteral(["Muscle, Mysticality, Moxie"]))).map(stat => Math.min((0,external_kolmafia_namespaceObject.myBasestat)(stat), 300));
  
    if (stats.every((value, index) => value === cachedStats[index])) {
      return cachedCanEquipItemCount;
    }
  
    cachedStats = stats;
    cachedCanEquipItemCount = external_kolmafia_namespaceObject.Item.all().filter(item => (0,external_kolmafia_namespaceObject.canEquip)(item)).length;
    return cachedCanEquipItemCount;
  }
  /**
   * Checks the objective cache for a valid entry.
   *
   * @param cacheKey The cache key to check.
   * @param options Set of maximizer options
   * @returns A valid CacheEntry or null.
   */
  
  
  function checkCache(cacheKey, options) {
    var entry = cachedObjectives[cacheKey];
  
    if (!entry) {
      return null;
    }
  
    if (options.updateOnFamiliarChange && (0,external_kolmafia_namespaceObject.myFamiliar)() !== entry.familiar) {
      dist_logger.warning("Equipment found in maximize cache but familiar is different.");
      return null;
    }
  
    if (options.updateOnCanEquipChanged && entry.canEquipItemCount !== canEquipItemCount()) {
      dist_logger.warning("Equipment found in maximize cache but equippable item list is out of date.");
      return null;
    }
  
    return entry;
  }
  /**
   * Applies equipment that was found in the cache.
   *
   * @param entry The CacheEntry to apply
   * @param options Set of maximizer options
   */
  
  
  function applyCached(entry, options) {
    var outfitName = options.useOutfitCaching ? outfitCache.get(entry) : undefined;
  
    if (outfitName) {
      if (!(0,external_kolmafia_namespaceObject.isWearingOutfit)(outfitName)) {
        (0,external_kolmafia_namespaceObject.outfit)(outfitName);
      }
  
      var familiarEquip = entry.equipment.get($slot(maximize_templateObject10 || (maximize_templateObject10 = maximize_taggedTemplateLiteral(["familiar"]))));
      if (familiarEquip) (0,external_kolmafia_namespaceObject.equip)($slot(maximize_templateObject11 || (maximize_templateObject11 = maximize_taggedTemplateLiteral(["familiar"]))), familiarEquip);
    } else {
      var _iterator3 = maximize_createForOfIteratorHelper(entry.equipment),
          _step3;
  
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _step3$value = maximize_slicedToArray(_step3.value, 2),
              slot = _step3$value[0],
              item = _step3$value[1];
  
          if ((0,external_kolmafia_namespaceObject.equippedItem)(slot) !== item && (0,external_kolmafia_namespaceObject.availableAmount)(item) > 0) {
            (0,external_kolmafia_namespaceObject.equip)(slot, item);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
  
      if (verifyCached(entry) && options.useOutfitCaching) {
        var _outfitName = outfitCache.insert(entry);
  
        dist_logger.info("Saving equipment to outfit ".concat(_outfitName, "."));
        saveOutfit(_outfitName);
      }
    }
  
    if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(maximize_templateObject12 || (maximize_templateObject12 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))) > 0 && entry.rider.get(template_string_$item(maximize_templateObject13 || (maximize_templateObject13 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))))) {
      (0,external_kolmafia_namespaceObject.enthroneFamiliar)(entry.rider.get(template_string_$item(maximize_templateObject14 || (maximize_templateObject14 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))) || template_string_$familiar.none);
    }
  
    if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(maximize_templateObject15 || (maximize_templateObject15 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))) > 0 && entry.rider.get(template_string_$item(maximize_templateObject16 || (maximize_templateObject16 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))))) {
      (0,external_kolmafia_namespaceObject.bjornifyFamiliar)(entry.rider.get(template_string_$item(maximize_templateObject17 || (maximize_templateObject17 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))) || template_string_$familiar.none);
    }
  
    applyModes(maximize_objectSpread(maximize_objectSpread({}, entry.modes), options.modes));
  }
  
  var slotStructure = [$slots(maximize_templateObject18 || (maximize_templateObject18 = maximize_taggedTemplateLiteral(["hat"]))), $slots(maximize_templateObject19 || (maximize_templateObject19 = maximize_taggedTemplateLiteral(["back"]))), $slots(maximize_templateObject20 || (maximize_templateObject20 = maximize_taggedTemplateLiteral(["shirt"]))), $slots(maximize_templateObject21 || (maximize_templateObject21 = maximize_taggedTemplateLiteral(["weapon, off-hand"]))), $slots(maximize_templateObject22 || (maximize_templateObject22 = maximize_taggedTemplateLiteral(["pants"]))), $slots(maximize_templateObject23 || (maximize_templateObject23 = maximize_taggedTemplateLiteral(["acc1, acc2, acc3"]))), $slots(maximize_templateObject24 || (maximize_templateObject24 = maximize_taggedTemplateLiteral(["familiar"])))];
  /**
   * Verifies that a CacheEntry was applied successfully.
   *
   * @param entry The CacheEntry to verify
   * @param warn Whether to warn if the cache could not be applied
   * @returns If all desired equipment was appliedn in the correct slots.
   */
  
  function verifyCached(entry) {
    var warn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var success = true;
  
    var _iterator4 = maximize_createForOfIteratorHelper(slotStructure),
        _step4;
  
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var slotGroup = _step4.value;
        var desiredSlots = slotGroup.map(slot => {
          var _entry$equipment$get;
  
          return [slot, (_entry$equipment$get = entry.equipment.get(slot)) !== null && _entry$equipment$get !== void 0 ? _entry$equipment$get : null];
        }).filter(_ref2 => {
          var _ref3 = maximize_slicedToArray(_ref2, 2),
              item = _ref3[1];
  
          return item !== null;
        });
        var desiredSet = desiredSlots.map(_ref4 => {
          var _ref5 = maximize_slicedToArray(_ref4, 2),
              item = _ref5[1];
  
          return item;
        });
        var equippedSet = desiredSlots.map(_ref6 => {
          var _ref7 = maximize_slicedToArray(_ref6, 1),
              slot = _ref7[0];
  
          return (0,external_kolmafia_namespaceObject.equippedItem)(slot);
        });
  
        if (!setEqual(desiredSet, equippedSet)) {
          if (warn) {
            dist_logger.warning("Failed to apply cached ".concat(desiredSet.join(", "), " in ").concat(slotGroup.join(", "), "."));
          }
  
          success = false;
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
  
    if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(maximize_templateObject25 || (maximize_templateObject25 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))) > 0 && entry.rider.get(template_string_$item(maximize_templateObject26 || (maximize_templateObject26 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))))) {
      if (entry.rider.get(template_string_$item(maximize_templateObject27 || (maximize_templateObject27 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))) !== (0,external_kolmafia_namespaceObject.myEnthronedFamiliar)()) {
        if (warn) {
          dist_logger.warning("Failed to apply ".concat(entry.rider.get(template_string_$item(maximize_templateObject28 || (maximize_templateObject28 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))), " in ").concat(template_string_$item(maximize_templateObject29 || (maximize_templateObject29 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))), "."));
        }
  
        success = false;
      }
    }
  
    if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(maximize_templateObject30 || (maximize_templateObject30 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))) > 0 && entry.rider.get(template_string_$item(maximize_templateObject31 || (maximize_templateObject31 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))))) {
      if (entry.rider.get(template_string_$item(maximize_templateObject32 || (maximize_templateObject32 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))) !== (0,external_kolmafia_namespaceObject.myBjornedFamiliar)()) {
        if (warn) {
          dist_logger.warning("Failed to apply".concat(entry.rider.get(template_string_$item(maximize_templateObject33 || (maximize_templateObject33 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))), " in ").concat(template_string_$item(maximize_templateObject34 || (maximize_templateObject34 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))), "."));
        }
  
        success = false;
      }
    }
  
    return success;
  }
  /**
   * Save current equipment to the objective cache.
   *
   * @param cacheKey The cache key to save.
   * @param options Set of maximizer options
   */
  
  
  function saveCached(cacheKey, options) {
    var equipment = new Map();
    var rider = new Map();
  
    var _iterator5 = maximize_createForOfIteratorHelper(cachedSlots),
        _step5;
  
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var _slot2 = _step5.value;
        equipment.set(_slot2, (0,external_kolmafia_namespaceObject.equippedItem)(_slot2));
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
  
    if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(maximize_templateObject35 || (maximize_templateObject35 = maximize_taggedTemplateLiteral(["card sleeve"])))) > 0) {
      equipment.set($slot(maximize_templateObject36 || (maximize_templateObject36 = maximize_taggedTemplateLiteral(["card-sleeve"]))), (0,external_kolmafia_namespaceObject.equippedItem)($slot(maximize_templateObject37 || (maximize_templateObject37 = maximize_taggedTemplateLiteral(["card-sleeve"])))));
    }
  
    if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(maximize_templateObject38 || (maximize_templateObject38 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))) > 0) {
      rider.set(template_string_$item(maximize_templateObject39 || (maximize_templateObject39 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))), (0,external_kolmafia_namespaceObject.myEnthronedFamiliar)());
    }
  
    if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(maximize_templateObject40 || (maximize_templateObject40 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))) > 0) {
      rider.set(template_string_$item(maximize_templateObject41 || (maximize_templateObject41 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))), (0,external_kolmafia_namespaceObject.myBjornedFamiliar)());
    }
  
    if (options.preventSlot && options.preventSlot.length > 0) {
      var _iterator6 = maximize_createForOfIteratorHelper(options.preventSlot),
          _step6;
  
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var slot = _step6.value;
          equipment.delete(slot);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
  
      if (options.preventSlot.includes($slot(maximize_templateObject42 || (maximize_templateObject42 = maximize_taggedTemplateLiteral(["buddy-bjorn"]))))) {
        rider.delete(template_string_$item(maximize_templateObject43 || (maximize_templateObject43 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))));
      }
  
      if (options.preventSlot.includes($slot(maximize_templateObject44 || (maximize_templateObject44 = maximize_taggedTemplateLiteral(["crown-of-thrones"]))))) {
        rider.delete(template_string_$item(maximize_templateObject45 || (maximize_templateObject45 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))));
      }
    }
  
    if (options.onlySlot && options.onlySlot.length > 0) {
      var _iterator7 = maximize_createForOfIteratorHelper(external_kolmafia_namespaceObject.Slot.all()),
          _step7;
  
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _slot = _step7.value;
  
          if (!options.onlySlot.includes(_slot)) {
            equipment.delete(_slot);
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
  
      if (!options.onlySlot.includes($slot(maximize_templateObject46 || (maximize_templateObject46 = maximize_taggedTemplateLiteral(["buddy-bjorn"]))))) {
        rider.delete(template_string_$item(maximize_templateObject47 || (maximize_templateObject47 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))));
      }
  
      if (!options.onlySlot.includes($slot(maximize_templateObject48 || (maximize_templateObject48 = maximize_taggedTemplateLiteral(["crown-of-thrones"]))))) {
        rider.delete(template_string_$item(maximize_templateObject49 || (maximize_templateObject49 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))));
      }
    }
  
    var entry = new CacheEntry(equipment, rider, (0,external_kolmafia_namespaceObject.myFamiliar)(), canEquipItemCount(), maximize_objectSpread(maximize_objectSpread({}, getCurrentModes()), options.modes));
    cachedObjectives[cacheKey] = entry;
  
    if (options.useOutfitCaching) {
      var outfitName = outfitCache.insert(entry);
      dist_logger.info("Saving equipment to outfit ".concat(outfitName, "."));
      saveOutfit(outfitName);
    }
  }
  /**
   * Run the maximizer, but only if the objective and certain pieces of game state haven't changed since it was last run.
   *
   * @param objectives Objectives to maximize for.
   * @param options Options for this run of the maximizer.
   * @param options.updateOnFamiliarChange Re-run the maximizer if familiar has changed. Default true.
   * @param options.updateOnCanEquipChanged Re-run the maximizer if stats have changed what can be equipped. Default true.
   * @param options.forceEquip Equipment to force-equip ("equip X").
   * @param options.preventEquip Equipment to prevent equipping ("-equip X").
   * @param options.bonusEquip Equipment to apply a bonus to ("200 bonus X").
   * @returns Whether the maximize call succeeded.
   */
  
  
  function maximizeCached(objectives) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var fullOptions = mergeMaximizeOptions(defaultMaximizeOptions, options);
    var forceEquip = fullOptions.forceEquip,
        preventEquip = fullOptions.preventEquip,
        bonusEquip = fullOptions.bonusEquip,
        onlySlot = fullOptions.onlySlot,
        preventSlot = fullOptions.preventSlot,
        forceUpdate = fullOptions.forceUpdate; // Sort each group in objective to ensure consistent ordering in string
  
    var objective = maximize_toConsumableArray(new Set([].concat(maximize_toConsumableArray(objectives.sort()), maximize_toConsumableArray(forceEquip.map(item => "\"equip ".concat(toMaximizerName(item), "\"")).sort()), maximize_toConsumableArray(preventEquip.map(item => "-\"equip ".concat(toMaximizerName(item), "\"")).sort()), maximize_toConsumableArray(onlySlot.map(slot => "".concat(slot)).sort()), maximize_toConsumableArray(preventSlot.map(slot => "-".concat(slot)).sort()), maximize_toConsumableArray(Array.from(bonusEquip.entries()).filter(_ref8 => {
      var _ref9 = maximize_slicedToArray(_ref8, 2),
          bonus = _ref9[1];
  
      return bonus !== 0;
    }).map(_ref10 => {
      var _ref11 = maximize_slicedToArray(_ref10, 2),
          item = _ref11[0],
          bonus = _ref11[1];
  
      return "".concat(Math.round(bonus * 100) / 100, " \"bonus ").concat(toMaximizerName(item), "\"");
    }).sort())))).join(", "); // Items equipped in slots not touched by the maximizer must be in the cache key
  
  
    var untouchedSlots = cachedSlots.filter(slot => preventSlot.includes(slot) || onlySlot.length > 0 && !onlySlot.includes(slot));
    var cacheKey = [objective].concat(maximize_toConsumableArray(untouchedSlots.map(slot => "".concat(slot, ":").concat((0,external_kolmafia_namespaceObject.equippedItem)(slot))).sort()), [lib_have(template_string_$effect(maximize_templateObject50 || (maximize_templateObject50 = maximize_taggedTemplateLiteral(["Offhand Remarkable"])))), options.updateOnLocationChange && (0,external_kolmafia_namespaceObject.myLocation)()]).join("; ");
    var cacheEntry = checkCache(cacheKey, fullOptions);
  
    if (cacheEntry && !forceUpdate) {
      if (verifyCached(cacheEntry, false)) return true;
      dist_logger.info("Equipment found in maximize cache, equipping...");
      applyCached(cacheEntry, fullOptions);
  
      if (verifyCached(cacheEntry)) {
        dist_logger.info("Equipped cached ".concat(cacheKey));
        return true;
      }
  
      dist_logger.warning("Maximize cache application failed, maximizing...");
    }
  
    var result = (0,external_kolmafia_namespaceObject.maximize)(objective, false);
    saveCached(cacheKey, fullOptions);
    return result;
  }
  
  function mergeOptionalOptions(optionsA, optionsB) {
    for (var _len = arguments.length, keys = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      keys[_key - 2] = arguments[_key];
    }
  
    return keys.reduce((current, key) => maximize_objectSpread(maximize_objectSpread({}, current), (optionsA[key] || optionsB[key]) === undefined ? {} : maximize_defineProperty({}, key, optionsA[key] || optionsB[key])), {});
  }
  
  var _maximizeParameters = /*#__PURE__*/new WeakMap();
  
  var _maximizeOptions = /*#__PURE__*/new WeakMap();
  
  var Requirement = /*#__PURE__*/function () {
    /**
     * A convenient way of combining maximization parameters and options
     *
     * @param maximizeParameters Parameters you're attempting to maximize
     * @param maximizeOptions Object potentially containing forceEquips, bonusEquips, preventEquips, and preventSlots
     */
    function Requirement(maximizeParameters, maximizeOptions) {
      maximize_classCallCheck(this, Requirement);
  
      _classPrivateFieldInitSpec(this, _maximizeParameters, {
        writable: true,
        value: void 0
      });
  
      _classPrivateFieldInitSpec(this, _maximizeOptions, {
        writable: true,
        value: void 0
      });
  
      _classPrivateFieldSet(this, _maximizeParameters, maximizeParameters);
  
      _classPrivateFieldSet(this, _maximizeOptions, maximizeOptions);
    }
  
    maximize_createClass(Requirement, [{
      key: "maximizeParameters",
      get: function get() {
        return _classPrivateFieldGet(this, _maximizeParameters);
      }
    }, {
      key: "maximizeOptions",
      get: function get() {
        return _classPrivateFieldGet(this, _maximizeOptions);
      }
      /**
       * Merges two requirements, concanating relevant arrays. Typically used in static form.
       *
       * @param other Requirement to merge with.
       * @returns A new merged Requirement
       */
  
    }, {
      key: "merge",
      value: function merge(other) {
        var _optionsA$forceEquip, _other$maximizeOption, _optionsA$preventEqui, _other$maximizeOption3, _optionsA$bonusEquip$, _optionsA$bonusEquip, _optionsB$bonusEquip$, _optionsB$bonusEquip, _optionsA$onlySlot, _optionsB$onlySlot, _optionsA$preventSlot, _optionsB$preventSlot;
  
        var optionsA = this.maximizeOptions;
        var optionsB = other.maximizeOptions;
        var optionalBooleans = mergeOptionalOptions(optionsA, optionsB, "updateOnFamiliarChange", "updateOnCanEquipChanged", "updateOnLocationChange", "forceUpdate");
        return new Requirement([].concat(maximize_toConsumableArray(this.maximizeParameters), maximize_toConsumableArray(other.maximizeParameters)), maximize_objectSpread(maximize_objectSpread({}, optionalBooleans), {}, {
          forceEquip: [].concat(maximize_toConsumableArray((_optionsA$forceEquip = optionsA.forceEquip) !== null && _optionsA$forceEquip !== void 0 ? _optionsA$forceEquip : []), maximize_toConsumableArray((_other$maximizeOption = other.maximizeOptions.forceEquip) !== null && _other$maximizeOption !== void 0 ? _other$maximizeOption : [])).filter(x => {
            var _other$maximizeOption2;
  
            return !((_other$maximizeOption2 = other.maximizeOptions.preventEquip) !== null && _other$maximizeOption2 !== void 0 && _other$maximizeOption2.includes(x));
          }),
          preventEquip: [].concat(maximize_toConsumableArray((_optionsA$preventEqui = optionsA.preventEquip) !== null && _optionsA$preventEqui !== void 0 ? _optionsA$preventEqui : []), maximize_toConsumableArray((_other$maximizeOption3 = other.maximizeOptions.preventEquip) !== null && _other$maximizeOption3 !== void 0 ? _other$maximizeOption3 : [])).filter(x => {
            var _other$maximizeOption4;
  
            return !((_other$maximizeOption4 = other.maximizeOptions.forceEquip) !== null && _other$maximizeOption4 !== void 0 && _other$maximizeOption4.includes(x));
          }),
          bonusEquip: new Map([].concat(maximize_toConsumableArray((_optionsA$bonusEquip$ = (_optionsA$bonusEquip = optionsA.bonusEquip) === null || _optionsA$bonusEquip === void 0 ? void 0 : _optionsA$bonusEquip.entries()) !== null && _optionsA$bonusEquip$ !== void 0 ? _optionsA$bonusEquip$ : []), maximize_toConsumableArray((_optionsB$bonusEquip$ = (_optionsB$bonusEquip = optionsB.bonusEquip) === null || _optionsB$bonusEquip === void 0 ? void 0 : _optionsB$bonusEquip.entries()) !== null && _optionsB$bonusEquip$ !== void 0 ? _optionsB$bonusEquip$ : []))),
          onlySlot: [].concat(maximize_toConsumableArray((_optionsA$onlySlot = optionsA.onlySlot) !== null && _optionsA$onlySlot !== void 0 ? _optionsA$onlySlot : []), maximize_toConsumableArray((_optionsB$onlySlot = optionsB.onlySlot) !== null && _optionsB$onlySlot !== void 0 ? _optionsB$onlySlot : [])),
          preventSlot: [].concat(maximize_toConsumableArray((_optionsA$preventSlot = optionsA.preventSlot) !== null && _optionsA$preventSlot !== void 0 ? _optionsA$preventSlot : []), maximize_toConsumableArray((_optionsB$preventSlot = optionsB.preventSlot) !== null && _optionsB$preventSlot !== void 0 ? _optionsB$preventSlot : []))
        }));
      }
      /**
       * Merges a set of requirements together, starting with an empty requirement.
       *
       * @param allRequirements Requirements to merge
       * @returns Merged requirements
       */
  
    }, {
      key: "maximize",
      value:
      /**
       * Runs maximizeCached, using the maximizeParameters and maximizeOptions contained by this requirement.
       *
       * @returns Whether the maximize call succeeded.
       */
      function maximize() {
        return maximizeCached(this.maximizeParameters, this.maximizeOptions);
      }
      /**
       * Merges requirements, and then runs maximizeCached on the combined requirement.
       *
       * @param requirements Requirements to maximize on
       */
  
    }], [{
      key: "merge",
      value: function merge(allRequirements) {
        return allRequirements.reduce((x, y) => x.merge(y), new Requirement([], {}));
      }
    }, {
      key: "maximize",
      value: function maximize() {
        for (var _len2 = arguments.length, requirements = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          requirements[_key2] = arguments[_key2];
        }
  
        Requirement.merge(requirements).maximize();
      }
    }]);
  
    return Requirement;
  }();
  /**
   * Clear all outfits cached by the maximizer.
   */
  
  function clearMaximizerCache() {
    outfitCache.clear();
  
    for (var member in cachedObjectives) {
      delete cachedObjectives[member];
    }
  }
  ;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/outfit.js
  var outfit_templateObject, outfit_templateObject2, outfit_templateObject3, outfit_templateObject4, outfit_templateObject5, outfit_templateObject6, outfit_templateObject7, outfit_templateObject8, outfit_templateObject9, outfit_templateObject10, outfit_templateObject11, outfit_templateObject12, outfit_templateObject13, outfit_templateObject14, outfit_templateObject15, outfit_templateObject16, outfit_templateObject17, outfit_templateObject18, outfit_templateObject19, outfit_templateObject20, outfit_templateObject21, outfit_templateObject22, outfit_templateObject23, outfit_templateObject24, outfit_templateObject25, outfit_templateObject26, outfit_templateObject27, outfit_templateObject28, outfit_templateObject29, outfit_templateObject30, outfit_templateObject31, outfit_templateObject32, outfit_templateObject33, outfit_templateObject34, outfit_templateObject35, outfit_templateObject36, outfit_templateObject37, outfit_templateObject38, outfit_templateObject39, outfit_templateObject40, outfit_templateObject41, outfit_templateObject42, outfit_templateObject43, outfit_templateObject44, outfit_templateObject45, outfit_templateObject46, outfit_templateObject47, outfit_templateObject48, outfit_templateObject49, outfit_templateObject50, outfit_templateObject51, outfit_templateObject52, outfit_templateObject53, outfit_templateObject54, outfit_templateObject55, outfit_templateObject56, outfit_templateObject57, outfit_templateObject58, outfit_templateObject59, outfit_templateObject60;
  
  function outfit_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  
  function outfit_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? outfit_ownKeys(Object(source), !0).forEach(function (key) { outfit_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : outfit_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  
  function outfit_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function outfit_slicedToArray(arr, i) { return outfit_arrayWithHoles(arr) || outfit_iterableToArrayLimit(arr, i) || outfit_unsupportedIterableToArray(arr, i) || outfit_nonIterableRest(); }
  
  function outfit_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function outfit_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
  
  function outfit_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
  
  function outfit_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = outfit_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  
  function outfit_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  function outfit_toConsumableArray(arr) { return outfit_arrayWithoutHoles(arr) || outfit_iterableToArray(arr) || outfit_unsupportedIterableToArray(arr) || outfit_nonIterableSpread(); }
  
  function outfit_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function outfit_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return outfit_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return outfit_arrayLikeToArray(o, minLen); }
  
  function outfit_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  
  function outfit_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return outfit_arrayLikeToArray(arr); }
  
  function outfit_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function outfit_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function outfit_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function outfit_createClass(Constructor, protoProps, staticProps) { if (protoProps) outfit_defineProperties(Constructor.prototype, protoProps); if (staticProps) outfit_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  
  
  var FORCE_REFRESH_REQUIREMENT = new Requirement([], {
    forceUpdate: true
  });
  var outfitSlots = ["hat", "back", "weapon", "offhand", "shirt", "pants", "acc1", "acc2", "acc3", "famequip"];
  var riderSlots = (/* unused pure expression or super */ null && (["buddy-bjorn", "crown-of-thrones"]));
  
  var weaponHands = i => i ? (0,external_kolmafia_namespaceObject.weaponHands)(i) : 0;
  
  var outfit_modeableCommands = ["backupcamera", "umbrella", "snowsuit", "edpiece", "retrocape", "parka"];
  var Outfit = /*#__PURE__*/function () {
    function Outfit() {
      outfit_classCallCheck(this, Outfit);
  
      this.equips = new Map();
      this.riders = new Map();
      this.modes = {};
      this.skipDefaults = false;
      this.modifier = [];
      this.avoid = [];
      this.bonuses = new Map();
    }
    /**
     * Create an outfit from your current player state.
     */
  
  
    outfit_createClass(Outfit, [{
      key: "equippedAmount",
      value:
      /**
       * Check how many of an item is equipped on the outfit.
       */
      function equippedAmount(item) {
        return outfit_toConsumableArray(this.equips.values()).filter(i => i === item).length;
      }
    }, {
      key: "isAvailable",
      value: function isAvailable(item) {
        var _a;
  
        if ((_a = this.avoid) === null || _a === void 0 ? void 0 : _a.includes(item)) return false;
        if (!lib_have(item, this.equippedAmount(item) + 1)) return false;
        if ((0,external_kolmafia_namespaceObject.booleanModifier)(item, "Single Equip") && this.equippedAmount(item) > 0) return false;
        return true;
      }
      /**
       * Check whether an item is equipped on the outfit, optionally in a specific slot.
       */
  
    }, {
      key: "haveEquipped",
      value: function haveEquipped(item, slot) {
        if (slot === undefined) return this.equippedAmount(item) > 0;
        return this.equips.get(slot) === item;
      }
    }, {
      key: "equipItemNone",
      value: function equipItemNone(item, slot) {
        if (item !== template_string_$item.none) return false;
        if (slot === undefined) return true;
        if (this.equips.has(slot)) return false;
        this.equips.set(slot, item);
        return true;
      }
    }, {
      key: "equipNonAccessory",
      value: function equipNonAccessory(item, slot) {
        if ($slots(outfit_templateObject || (outfit_templateObject = outfit_taggedTemplateLiteral(["acc1, acc2, acc3"]))).includes((0,external_kolmafia_namespaceObject.toSlot)(item))) return false;
        if (slot !== undefined && slot !== (0,external_kolmafia_namespaceObject.toSlot)(item)) return false;
        if (this.equips.has((0,external_kolmafia_namespaceObject.toSlot)(item))) return false;
  
        switch ((0,external_kolmafia_namespaceObject.toSlot)(item)) {
          case $slot(outfit_templateObject2 || (outfit_templateObject2 = outfit_taggedTemplateLiteral(["off-hand"]))):
            if (this.equips.has($slot(outfit_templateObject3 || (outfit_templateObject3 = outfit_taggedTemplateLiteral(["weapon"])))) && weaponHands(this.equips.get($slot(outfit_templateObject4 || (outfit_templateObject4 = outfit_taggedTemplateLiteral(["weapon"]))))) !== 1) {
              return false;
            }
  
            break;
  
          case $slot(outfit_templateObject5 || (outfit_templateObject5 = outfit_taggedTemplateLiteral(["familiar"]))):
            if (this.familiar !== undefined && !(0,external_kolmafia_namespaceObject.canEquip)(this.familiar, item)) return false;
        }
  
        if ((0,external_kolmafia_namespaceObject.toSlot)(item) !== $slot(outfit_templateObject6 || (outfit_templateObject6 = outfit_taggedTemplateLiteral(["familiar"]))) && !(0,external_kolmafia_namespaceObject.canEquip)(item)) return false;
        this.equips.set((0,external_kolmafia_namespaceObject.toSlot)(item), item);
        return true;
      }
    }, {
      key: "equipAccessory",
      value: function equipAccessory(item, slot) {
        if (![undefined].concat(outfit_toConsumableArray($slots(outfit_templateObject7 || (outfit_templateObject7 = outfit_taggedTemplateLiteral(["acc1, acc2, acc3"]))))).includes(slot)) return false;
        if ((0,external_kolmafia_namespaceObject.toSlot)(item) !== $slot(outfit_templateObject8 || (outfit_templateObject8 = outfit_taggedTemplateLiteral(["acc1"])))) return false;
        if (!(0,external_kolmafia_namespaceObject.canEquip)(item)) return false;
  
        if (slot === undefined) {
          // We don't care which of the accessory slots we equip in
          var empty = $slots(outfit_templateObject9 || (outfit_templateObject9 = outfit_taggedTemplateLiteral(["acc1, acc2, acc3"]))).find(s => !this.equips.has(s));
          if (empty === undefined) return false;
          this.equips.set(empty, item);
        } else {
          if (this.equips.has(slot)) return false;
          this.equips.set(slot, item);
        }
  
        return true;
      }
    }, {
      key: "equipUsingDualWield",
      value: function equipUsingDualWield(item, slot) {
        if (![undefined, $slot(outfit_templateObject10 || (outfit_templateObject10 = outfit_taggedTemplateLiteral(["off-hand"])))].includes(slot)) return false;
        if ((0,external_kolmafia_namespaceObject.toSlot)(item) !== $slot(outfit_templateObject11 || (outfit_templateObject11 = outfit_taggedTemplateLiteral(["weapon"])))) return false;
  
        if (this.equips.has($slot(outfit_templateObject12 || (outfit_templateObject12 = outfit_taggedTemplateLiteral(["weapon"])))) && weaponHands(this.equips.get($slot(outfit_templateObject13 || (outfit_templateObject13 = outfit_taggedTemplateLiteral(["weapon"]))))) !== 1) {
          return false;
        }
  
        if (this.equips.has($slot(outfit_templateObject14 || (outfit_templateObject14 = outfit_taggedTemplateLiteral(["off-hand"]))))) return false;
        if (!lib_have(template_string_$skill(outfit_templateObject15 || (outfit_templateObject15 = outfit_taggedTemplateLiteral(["Double-Fisted Skull Smashing"]))))) return false;
        if (weaponHands(item) !== 1) return false;
        if (!(0,external_kolmafia_namespaceObject.canEquip)(item)) return false;
        this.equips.set($slot(outfit_templateObject16 || (outfit_templateObject16 = outfit_taggedTemplateLiteral(["off-hand"]))), item);
        return true;
      }
    }, {
      key: "getHoldingFamiliar",
      value: function getHoldingFamiliar(item) {
        switch ((0,external_kolmafia_namespaceObject.toSlot)(item)) {
          case $slot(outfit_templateObject17 || (outfit_templateObject17 = outfit_taggedTemplateLiteral(["weapon"]))):
            return template_string_$familiar(outfit_templateObject18 || (outfit_templateObject18 = outfit_taggedTemplateLiteral(["Disembodied Hand"])));
  
          case $slot(outfit_templateObject19 || (outfit_templateObject19 = outfit_taggedTemplateLiteral(["off-hand"]))):
            return template_string_$familiar(outfit_templateObject20 || (outfit_templateObject20 = outfit_taggedTemplateLiteral(["Left-Hand Man"])));
  
          default:
            return undefined;
        }
      }
      /**
       * Returns the bonus value associated with a given item.
       * @param item The item to check the bonus of.
       * @returns The bonus assigned to that item.
       */
  
    }, {
      key: "getBonus",
      value: function getBonus(item) {
        var _a;
  
        return (_a = this.bonuses.get(item)) !== null && _a !== void 0 ? _a : 0;
      }
      /**
       * Sets the bonus value of an item equal to a given value, overriding any current bonus assigned.
       *
       * Only triggers on items that may be equipped to this outfit.
       * @param item The item to try to apply a bonus to.
       * @param value The value to try to apply.
       * @returns Whether the bonus was successfully asigned.
       */
  
    }, {
      key: "setBonus",
      value: function setBonus(item, value) {
        var can = this.canEquip(item);
        if (can) this.bonuses.set(item, value);
        return can;
      }
      /**
       * Adds a value to any existing bonus this item has; if it started without a bonus, sets the bonus equal to that value.
       *
       * Only triggers on items that may be equipped to this outfit.
       * @param item The item to try to add a bonus to.
       * @param value The value to try to add.
       * @returns The total assigned bonus to that item.
       */
  
    }, {
      key: "addBonus",
      value: function addBonus(item, value) {
        var previous = this.getBonus(item);
        this.setBonus(item, previous + value);
        return this.getBonus(item);
      }
    }, {
      key: "equipUsingFamiliar",
      value: function equipUsingFamiliar(item, slot) {
        if (![undefined, $slot(outfit_templateObject21 || (outfit_templateObject21 = outfit_taggedTemplateLiteral(["familiar"])))].includes(slot)) return false;
        if (this.equips.has($slot(outfit_templateObject22 || (outfit_templateObject22 = outfit_taggedTemplateLiteral(["familiar"]))))) return false;
        if ((0,external_kolmafia_namespaceObject.booleanModifier)(item, "Single Equip")) return false;
        var familiar = this.getHoldingFamiliar(item);
        if (familiar === undefined || !this.equip(familiar)) return false;
        this.equips.set($slot(outfit_templateObject23 || (outfit_templateObject23 = outfit_taggedTemplateLiteral(["familiar"]))), item);
        return true;
      }
    }, {
      key: "equipItem",
      value: function equipItem(item, slot) {
        return this.haveEquipped(item, slot) || this.equipItemNone(item, slot) || this.isAvailable(item) && (this.equipNonAccessory(item, slot) || this.equipAccessory(item, slot) || this.equipUsingDualWield(item, slot) || this.equipUsingFamiliar(item, slot));
      }
    }, {
      key: "equipFamiliar",
      value: function equipFamiliar(familiar) {
        if (familiar === this.familiar) return true;
        if (this.familiar !== undefined) return false;
  
        if (familiar !== template_string_$familiar.none) {
          if (!lib_have(familiar)) return false;
          if (Array.from(this.riders.values()).includes(familiar)) return false;
        }
  
        var item = this.equips.get($slot(outfit_templateObject24 || (outfit_templateObject24 = outfit_taggedTemplateLiteral(["familiar"]))));
        if (item !== undefined && item !== template_string_$item.none && !(0,external_kolmafia_namespaceObject.canEquip)(familiar, item)) return false;
        this.familiar = familiar;
        return true;
      }
    }, {
      key: "equipSpec",
      value: function equipSpec(spec) {
        var _this$avoid;
  
        var _a, _b, _c, _d;
  
        var succeeded = true;
  
        var _iterator = outfit_createForOfIteratorHelper(outfitSlots),
            _step;
  
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var slotName = _step.value;
            var slot = (_a = new Map([["famequip", $slot(outfit_templateObject25 || (outfit_templateObject25 = outfit_taggedTemplateLiteral(["familiar"])))], ["offhand", $slot(outfit_templateObject26 || (outfit_templateObject26 = outfit_taggedTemplateLiteral(["off-hand"])))]]).get(slotName)) !== null && _a !== void 0 ? _a : (0,external_kolmafia_namespaceObject.toSlot)(slotName);
            var itemOrItems = spec[slotName];
            if (itemOrItems !== undefined && !this.equip(itemOrItems, slot)) succeeded = false;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
  
        var _iterator2 = outfit_createForOfIteratorHelper((_b = spec === null || spec === void 0 ? void 0 : spec.equip) !== null && _b !== void 0 ? _b : []),
            _step2;
  
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _item = _step2.value;
            if (!this.equip(_item)) succeeded = false;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
  
        if ((spec === null || spec === void 0 ? void 0 : spec.familiar) !== undefined) {
          if (!this.equip(spec.familiar)) succeeded = false;
        }
  
        (_this$avoid = this.avoid).push.apply(_this$avoid, outfit_toConsumableArray((_c = spec === null || spec === void 0 ? void 0 : spec.avoid) !== null && _c !== void 0 ? _c : []));
  
        this.skipDefaults = this.skipDefaults || ((_d = spec.skipDefaults) !== null && _d !== void 0 ? _d : false);
  
        if (spec.modifier) {
          var _this$modifier;
  
          if (Array.isArray(spec.modifier)) (_this$modifier = this.modifier).push.apply(_this$modifier, outfit_toConsumableArray(spec.modifier));else this.modifier.push(spec.modifier);
        }
  
        if (spec.modes) {
          if (!this.setModes(spec.modes)) {
            succeeded = false;
          }
        }
  
        if (spec.riders) {
          if (spec.riders["buddy-bjorn"] && !this.bjornify(spec.riders["buddy-bjorn"])) succeeded = false;
          if (spec.riders["crown-of-thrones"] && !this.enthrone(spec.riders["crown-of-thrones"])) succeeded = false;
        }
  
        if (spec.bonuses) {
          var _iterator3 = outfit_createForOfIteratorHelper(spec.bonuses),
              _step3;
  
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var _step3$value = outfit_slicedToArray(_step3.value, 2),
                  item = _step3$value[0],
                  value = _step3$value[1];
  
              succeeded && (succeeded = value + this.getBonus(item) === this.addBonus(item, value));
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
  
        return succeeded;
      }
      /**
       * Equip the first thing that can be equipped to the outfit.
       *
       * @param things The things to equip.
       * @param slot The slot to equip them.
       * @returns True if one of the things is equipped, and false otherwise.
       */
  
    }, {
      key: "equipFirst",
      value: function equipFirst(things, slot) {
        return things.some(val => this.equip(val, slot));
      }
      /**
       * Equip a thing to the outfit.
       *
       * If no slot is given, then the thing will be equipped wherever possible
       * (possibly using dual-wielding, any of the accessory slots, or as
       * familiar equipment). If it is impossible to add this thing anywhere to
       * the outfit, this function will return false.
       *
       * If a slot is given, the item will be equipped only in that slot. If the
       * slot is filled with a different item, this function will return false.
       *
       * If the thing is already equipped in the provided slot, or if no slot is
       * given and the thing is already equipped in any slot, this function will
       * return true and not change the outfit.
       *
       * @param thing The thing or things to equip.
       * @param slot The slot to equip them.
       * @returns True if the thing was sucessfully equipped, and false otherwise.
       */
  
    }, {
      key: "equip",
      value: function equip(thing, slot) {
        if (Array.isArray(thing)) {
          if (slot !== undefined) return this.equipFirst(thing, slot);
          return thing.every(val => this.equip(val));
        }
  
        if (thing instanceof external_kolmafia_namespaceObject.Item) return this.equipItem(thing, slot);
        if (thing instanceof external_kolmafia_namespaceObject.Familiar) return this.equipFamiliar(thing);
        if (thing instanceof Outfit) return this.equipSpec(thing.spec());
        return this.equipSpec(thing);
      }
    }, {
      key: "bjornify",
      value:
      /**
       * Add a bjornified familiar to the outfit.
       *
       * This function does *not* equip the buddy bjorn itself; it must be equipped separately.
       *
       * If a familiar is already specified for the buddy bjorn that is different from the provided target, this function will return false and not change the buddy bjorn.
       * @param target The familiar to bjornify, or a ranked list of familiars to try to bjornify.
       * @returns True if we successfully set the bjorn to a valid target.
       */
      function bjornify(target) {
        var current = this.riders.get($slot(outfit_templateObject27 || (outfit_templateObject27 = outfit_taggedTemplateLiteral(["buddy-bjorn"]))));
  
        if (current) {
          if (Array.isArray(target) ? target.includes(current) : current === target) {
            return true;
          }
  
          return false;
        }
  
        if (Array.isArray(target)) {
          var fam = target.find(f => lib_have(f) && this.familiar !== f && this.riders.get($slot(outfit_templateObject28 || (outfit_templateObject28 = outfit_taggedTemplateLiteral(["crown-of-thrones"])))) !== f);
  
          if (fam) {
            this.riders.set($slot(outfit_templateObject29 || (outfit_templateObject29 = outfit_taggedTemplateLiteral(["buddy-bjorn"]))), fam);
            return true;
          }
  
          return false;
        } else {
          if (lib_have(target) && this.familiar !== target && !Array.from(this.riders.values()).includes(target)) {
            this.riders.set($slot(outfit_templateObject30 || (outfit_templateObject30 = outfit_taggedTemplateLiteral(["buddy-bjorn"]))), target);
            return true;
          }
  
          return false;
        }
      }
      /**
       * Add anenthroned familiar to the outfit.
       *
       * This function does *not* equip the crown of thrones itself; it must be equipped separately.
       *
       * If a familiar is already specified for the crown of thrones that is different from the provided target, this function will return false and not change the crown of thrones.
       * @param target The familiar to enthrone, or a ranked list of familiars to try to enthrone.
       * @returns True if we successfully set the enthrone to a valid target.
       */
  
    }, {
      key: "enthrone",
      value: function enthrone(target) {
        var current = this.riders.get($slot(outfit_templateObject31 || (outfit_templateObject31 = outfit_taggedTemplateLiteral(["crown-of-thrones"]))));
  
        if (current) {
          if (Array.isArray(target) ? target.includes(current) : current === target) {
            return true;
          }
  
          return false;
        }
  
        if (Array.isArray(target)) {
          var fam = target.find(f => lib_have(f) && this.familiar !== f && this.riders.get($slot(outfit_templateObject32 || (outfit_templateObject32 = outfit_taggedTemplateLiteral(["buddy-bjorn"])))) !== f);
  
          if (fam) {
            this.riders.set($slot(outfit_templateObject33 || (outfit_templateObject33 = outfit_taggedTemplateLiteral(["crown-of-thrones"]))), fam);
            return true;
          }
  
          return false;
        } else {
          if (lib_have(target) && this.familiar !== target && !Array.from(this.riders.values()).includes(target)) {
            this.riders.set($slot(outfit_templateObject34 || (outfit_templateObject34 = outfit_taggedTemplateLiteral(["crown-of-thrones"]))), target);
            return true;
          }
  
          return false;
        }
      }
      /**
       * Set the provided modes for items that may be equipped in the outfit.
       *
       * This function does *not* equip items for the set modes; they must be
       * equipped separately.
       *
       * If a mode is already set for an item that is different from the provided
       * mode, this function will return false and not change the mode for that
       * item. (But other modes might still be changed if they are compatible.)
       *
       * Note that the superhero and instuctions of a retrocape can be set
       * independently (`undefined` is treated as "don't care").
       *
       * @param modes Modes to set in this outfit.
       * @returns True if all modes were sucessfully set, and false otherwise.
       */
  
    }, {
      key: "setModes",
      value: function setModes(modes) {
        var _a, _b;
  
        var compatible = true; // Check if the new modes are compatible with existing modes
  
        var _iterator4 = outfit_createForOfIteratorHelper(outfit_modeableCommands),
            _step4;
  
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var mode = _step4.value;
            if (mode === "retrocape") continue; // checked below
  
            if (this.modes[mode] && modes[mode] && this.modes[mode] !== modes[mode]) {
              compatible = false;
            }
          } // Check if retrocape modes are compatible
          // (Parts that are undefined are compatible with everything)
  
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
  
        if (this.modes["retrocape"] && modes["retrocape"]) {
          if (this.modes["retrocape"][0] && modes["retrocape"][0] && this.modes["retrocape"][0] !== modes["retrocape"][0]) {
            compatible = false;
          }
  
          if (this.modes["retrocape"][1] && modes["retrocape"][1] && this.modes["retrocape"][1] !== modes["retrocape"][1]) {
            compatible = false;
          }
  
          this.modes["retrocape"][0] = (_a = this.modes["retrocape"][0]) !== null && _a !== void 0 ? _a : modes["retrocape"][0];
          this.modes["retrocape"][1] = (_b = this.modes["retrocape"][1]) !== null && _b !== void 0 ? _b : modes["retrocape"][1];
        }
  
        this.modes = outfit_objectSpread(outfit_objectSpread({}, modes), this.modes);
        return compatible;
      }
      /**
       * Check if it is possible to equip a thing to this outfit using .equip().
       *
       * This does not change the current outfit.
       *
       * @param thing The thing to equip.
       * @param slot The slot to equip them.
       * @returns True if this thing can be equipped.
       */
  
    }, {
      key: "canEquip",
      value: function canEquip(thing, slot) {
        var outfit = this.clone();
        return outfit.equip(thing, slot);
      }
      /**
       * Check if it is possible to equip a thing to this outfit using .equip(); if it is, do so.
       *
       * This does change the current outfit.
       * @param thing The thing to equip.
       * @param slot The slot to equip them.
       * @returns True if this thing was successfully equipped.
       */
  
    }, {
      key: "tryEquip",
      value: function tryEquip(thing, slot) {
        return this.canEquip(thing, slot) && this.equip(thing, slot);
      }
      /**
       * Equip this outfit.
       */
  
    }, {
      key: "_dress",
      value: function _dress(refreshed) {
        if (this.familiar) (0,external_kolmafia_namespaceObject.useFamiliar)(this.familiar);
        var targetEquipment = Array.from(this.equips.values());
        var usedSlots = new Set(); // First, we equip non-accessory equipment.
  
        var nonaccessorySlots = $slots(outfit_templateObject35 || (outfit_templateObject35 = outfit_taggedTemplateLiteral(["weapon, off-hand, hat, back, shirt, pants, familiar"])));
        var bjorn = this.riders.get($slot(outfit_templateObject36 || (outfit_templateObject36 = outfit_taggedTemplateLiteral(["buddy-bjorn"]))));
  
        if (bjorn && (this.equips.get($slot(outfit_templateObject37 || (outfit_templateObject37 = outfit_taggedTemplateLiteral(["back"])))) === template_string_$item(outfit_templateObject38 || (outfit_templateObject38 = outfit_taggedTemplateLiteral(["Buddy Bjorn"]))) || this.getBonus(template_string_$item(outfit_templateObject39 || (outfit_templateObject39 = outfit_taggedTemplateLiteral(["Buddy Bjorn"])))))) {
          usedSlots.add($slot(outfit_templateObject40 || (outfit_templateObject40 = outfit_taggedTemplateLiteral(["buddy-bjorn"]))));
          usedSlots.add($slot(outfit_templateObject41 || (outfit_templateObject41 = outfit_taggedTemplateLiteral(["crown-of-thrones"]))));
        }
  
        var crown = this.riders.get($slot(outfit_templateObject42 || (outfit_templateObject42 = outfit_taggedTemplateLiteral(["crown-of-thrones"]))));
  
        if (crown && (this.equips.get($slot(outfit_templateObject43 || (outfit_templateObject43 = outfit_taggedTemplateLiteral(["hat"])))) === template_string_$item(outfit_templateObject44 || (outfit_templateObject44 = outfit_taggedTemplateLiteral(["Crown of Thrones"]))) || this.getBonus(template_string_$item(outfit_templateObject45 || (outfit_templateObject45 = outfit_taggedTemplateLiteral(["Crown of Thrones"])))))) {
          usedSlots.add($slot(outfit_templateObject46 || (outfit_templateObject46 = outfit_taggedTemplateLiteral(["buddy-bjorn"]))));
          usedSlots.add($slot(outfit_templateObject47 || (outfit_templateObject47 = outfit_taggedTemplateLiteral(["crown-of-thrones"]))));
        } // We must manually remove equipment that we want to use in a different
        // slot than where it is currently equipped, to avoid a mafia issue.
        // Order is anchored here to prevent DFSS shenanigans
  
  
        var _iterator5 = outfit_createForOfIteratorHelper(nonaccessorySlots),
            _step5;
  
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var slot = _step5.value;
            if (targetEquipment.includes((0,external_kolmafia_namespaceObject.equippedItem)(slot)) && this.equips.get(slot) !== (0,external_kolmafia_namespaceObject.equippedItem)(slot) || this.avoid.includes((0,external_kolmafia_namespaceObject.equippedItem)(slot))) (0,external_kolmafia_namespaceObject.equip)(slot, template_string_$item.none);
          } // Then we equip all the non-accessory equipment.
  
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
  
        var _iterator6 = outfit_createForOfIteratorHelper(nonaccessorySlots),
            _step6;
  
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var _slot = _step6.value;
            var equipment = this.equips.get(_slot);
  
            if (equipment) {
              (0,external_kolmafia_namespaceObject.equip)(_slot, equipment);
              usedSlots.add(_slot);
            }
          } // Next, we equip accessories
  
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
  
        var accessorySlots = $slots(outfit_templateObject48 || (outfit_templateObject48 = outfit_taggedTemplateLiteral(["acc1, acc2, acc3"])));
        var accessoryEquips = accessorySlots.map(slot => this.equips.get(slot)).filter(item => item !== undefined); // To plan how to equip accessories, first check which accessories are
        // already equipped in some accessory slot. There is no need to move them,
        // since KoL doesn't care what order accessories are equipped in.
  
        var missingAccessories = []; // accessories that are not already equipped
  
        var _iterator7 = outfit_createForOfIteratorHelper(accessoryEquips),
            _step7;
  
        try {
          var _loop = function _loop() {
            var accessory = _step7.value;
            var alreadyEquipped = accessorySlots.find(slot => !usedSlots.has(slot) && (0,external_kolmafia_namespaceObject.equippedItem)(slot) === accessory);
  
            if (alreadyEquipped) {
              usedSlots.add(alreadyEquipped);
            } else {
              missingAccessories.push(accessory);
            }
          };
  
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            _loop();
          } // Then, for all accessories that are not currently equipped, use the first
          // open slot to place them.
  
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
  
        for (var _i2 = 0, _missingAccessories = missingAccessories; _i2 < _missingAccessories.length; _i2++) {
          var accessory = _missingAccessories[_i2];
          var unusedSlot = accessorySlots.find(slot => !usedSlots.has(slot));
  
          if (unusedSlot === undefined) {
            // This should only occur if there is a bug in .dress()
            throw "No accessory slots remaining";
          }
  
          (0,external_kolmafia_namespaceObject.equip)(unusedSlot, accessory);
          usedSlots.add(unusedSlot);
        } // Remaining slots are filled by the maximizer
  
  
        var modes = convertToLibramModes(this.modes);
  
        if (this.modifier.length > 0) {
          var allRequirements = [new Requirement(this.modifier, {
            preventSlot: outfit_toConsumableArray(usedSlots),
            preventEquip: this.avoid,
            modes: modes,
            bonusEquip: this.bonuses
          })];
          if (refreshed) allRequirements.push(FORCE_REFRESH_REQUIREMENT);
  
          if (!Requirement.merge(allRequirements).maximize()) {
            if (!refreshed) {
              (0,external_kolmafia_namespaceObject.cliExecute)("refresh inventory");
  
              this._dress(true);
  
              return;
            } else throw new Error("Failed to maximize properly!");
          }
  
          (0,external_kolmafia_namespaceObject.logprint)("Maximize: ".concat(this.modifier));
        } // Set the modes of any equipped items.
  
  
        applyModes(modes); // Handle the rider slots next
  
        if (bjorn) {
          if ((0,external_kolmafia_namespaceObject.myEnthronedFamiliar)() === bjorn) (0,external_kolmafia_namespaceObject.enthroneFamiliar)(template_string_$familiar.none);
          if ((0,external_kolmafia_namespaceObject.myBjornedFamiliar)() !== bjorn) (0,external_kolmafia_namespaceObject.bjornifyFamiliar)(bjorn);
        }
  
        if (crown) {
          if ((0,external_kolmafia_namespaceObject.myBjornedFamiliar)() === crown) (0,external_kolmafia_namespaceObject.bjornifyFamiliar)(template_string_$familiar.none);
          if ((0,external_kolmafia_namespaceObject.myEnthronedFamiliar)() !== crown) (0,external_kolmafia_namespaceObject.enthroneFamiliar)(crown);
        } // Verify that all equipment was indeed equipped
  
  
        if (this.familiar !== undefined && (0,external_kolmafia_namespaceObject.myFamiliar)() !== this.familiar) throw "Failed to fully dress (expected: familiar ".concat(this.familiar, ")");
  
        var _iterator8 = outfit_createForOfIteratorHelper(nonaccessorySlots),
            _step8;
  
        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var _slot2 = _step8.value;
  
            if (this.equips.has(_slot2) && (0,external_kolmafia_namespaceObject.equippedItem)(_slot2) !== this.equips.get(_slot2)) {
              throw "Failed to fully dress (expected: ".concat(_slot2, " ").concat(this.equips.get(_slot2), ")");
            }
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
  
        var _iterator9 = outfit_createForOfIteratorHelper(accessoryEquips),
            _step9;
  
        try {
          var _loop2 = function _loop2() {
            var accessory = _step9.value;
  
            if ((0,external_kolmafia_namespaceObject.equippedAmount)(accessory) < accessoryEquips.filter(acc => acc === accessory).length) {
              throw "Failed to fully dress (expected: acc ".concat(accessory, ")");
            }
          };
  
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            _loop2();
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }
  
        for (var _i3 = 0, _arr2 = [[$slot(outfit_templateObject49 || (outfit_templateObject49 = outfit_taggedTemplateLiteral(["buddy-bjorn"]))), external_kolmafia_namespaceObject.myBjornedFamiliar], [$slot(outfit_templateObject50 || (outfit_templateObject50 = outfit_taggedTemplateLiteral(["crown-of-thrones"]))), external_kolmafia_namespaceObject.myEnthronedFamiliar]]; _i3 < _arr2.length; _i3++) {
          var _arr2$_i = outfit_slicedToArray(_arr2[_i3], 2),
              rider = _arr2$_i[0],
              checkingFunction = _arr2$_i[1];
  
          var wanted = this.riders.get(rider);
  
          if (wanted && checkingFunction() !== wanted) {
            throw "Failed to fully dress: (expected ".concat(rider, " ").concat(wanted, ")");
          }
        }
      }
    }, {
      key: "dress",
      value: function dress() {
        this._dress(false);
      }
      /**
       * Build an Outfit identical to this outfit.
       */
  
    }, {
      key: "clone",
      value: function clone() {
        var result = new Outfit();
        result.equips = new Map(this.equips);
        result.skipDefaults = this.skipDefaults;
        result.familiar = this.familiar;
        result.modifier = outfit_toConsumableArray(this.modifier);
        result.avoid = outfit_toConsumableArray(this.avoid);
        result.modes = outfit_objectSpread({}, this.modes);
        result.riders = new Map(this.riders);
        result.bonuses = new Map(this.bonuses);
        return result;
      }
      /**
       * Build an OutfitSpec identical to this outfit.
       */
  
    }, {
      key: "spec",
      value: function spec() {
        var _a;
  
        var result = {
          modifier: outfit_toConsumableArray(this.modifier),
          avoid: outfit_toConsumableArray(this.avoid),
          skipDefaults: this.skipDefaults,
          modes: outfit_objectSpread({}, this.modes),
          bonuses: new Map(this.bonuses)
        };
        if (this.familiar) result.familiar = this.familiar; // Add all equipment forced in a particular slot
  
        var _iterator10 = outfit_createForOfIteratorHelper(outfitSlots),
            _step10;
  
        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var slotName = _step10.value;
            var entry = this.equips.get((_a = new Map([["famequip", $slot(outfit_templateObject53 || (outfit_templateObject53 = outfit_taggedTemplateLiteral(["familiar"])))], ["offhand", $slot(outfit_templateObject54 || (outfit_templateObject54 = outfit_taggedTemplateLiteral(["off-hand"])))]]).get(slotName)) !== null && _a !== void 0 ? _a : (0,external_kolmafia_namespaceObject.toSlot)(slotName));
            if (entry) result[slotName] = entry;
          } // Include the riders
  
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
  
        var riders = {};
        var buddyRider = this.riders.get($slot(outfit_templateObject51 || (outfit_templateObject51 = outfit_taggedTemplateLiteral(["buddy-bjorn"]))));
        if (buddyRider !== undefined) riders["buddy-bjorn"] = buddyRider;
        var throneRider = this.riders.get($slot(outfit_templateObject52 || (outfit_templateObject52 = outfit_taggedTemplateLiteral(["crown-of-thrones"]))));
        if (throneRider !== undefined) riders["crown-of-thrones"] = throneRider;
        if (buddyRider !== undefined || throneRider !== undefined) result.riders = riders;
        return result;
      }
    }], [{
      key: "current",
      value: function current() {
        var _a;
  
        var outfit = new Outfit();
        var familiar = (0,external_kolmafia_namespaceObject.myFamiliar)();
  
        if (outfit.equip(familiar)) {
          throw "Failed to create outfit from current state (expected: familiar ".concat(familiar, ")");
        }
  
        var _iterator11 = outfit_createForOfIteratorHelper(outfitSlots),
            _step11;
  
        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var slotName = _step11.value;
            var slot = (_a = new Map([["famequip", $slot(outfit_templateObject59 || (outfit_templateObject59 = outfit_taggedTemplateLiteral(["familiar"])))], ["offhand", $slot(outfit_templateObject60 || (outfit_templateObject60 = outfit_taggedTemplateLiteral(["off-hand"])))]]).get(slotName)) !== null && _a !== void 0 ? _a : (0,external_kolmafia_namespaceObject.toSlot)(slotName);
            var item = (0,external_kolmafia_namespaceObject.equippedItem)(slot);
  
            if (!outfit.equip(item, slot)) {
              throw "Failed to create outfit from current state (expected: ".concat(slot, " ").concat(item, ")");
            }
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
  
        if ((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(outfit_templateObject55 || (outfit_templateObject55 = outfit_taggedTemplateLiteral(["Crown of Thrones"]))))) outfit.riders.set($slot(outfit_templateObject56 || (outfit_templateObject56 = outfit_taggedTemplateLiteral(["crown-of-thrones"]))), (0,external_kolmafia_namespaceObject.myEnthronedFamiliar)());
        if ((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(outfit_templateObject57 || (outfit_templateObject57 = outfit_taggedTemplateLiteral(["Buddy Bjorn"]))))) outfit.riders.set($slot(outfit_templateObject58 || (outfit_templateObject58 = outfit_taggedTemplateLiteral(["buddy-bjorn"]))), (0,external_kolmafia_namespaceObject.myBjornedFamiliar)());
        outfit.setModes(outfit_getCurrentModes());
        return outfit;
      }
    }, {
      key: "from",
      value: function from(spec) {
        var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var outfit = new Outfit();
        var success = outfit.equip(spec);
        if (!success && error) throw error;
        return success ? outfit : null;
      }
    }]);
  
    return Outfit;
  }();
  /**
   * Get the modes of this outfit in a type compatible with Libram.
   *
   * This conversion is needed since we store the retrocape modes
   * internally as an array, but libram uses a string.
   *
   * @returns The modes equipped to this outfit.
   */
  
  function convertToLibramModes(modes) {
    var _a;
  
    return {
      backupcamera: modes["backupcamera"],
      umbrella: modes["umbrella"],
      snowsuit: modes["snowsuit"],
      edpiece: modes["edpiece"],
      retrocape: (_a = modes["retrocape"]) === null || _a === void 0 ? void 0 : _a.filter(s => s !== undefined).join(" "),
      parka: modes["parka"]
    };
  }
  /**
   * Get the current modes of all items.
   *
   * @returns The current mode settings for all items, equipped or not.
   */
  
  function outfit_getCurrentModes() {
    return {
      backupcamera: getMode("backupCameraMode", ["ml", "meat", "init"]),
      umbrella: getMode("umbrellaState", ["broken", "forward-facing", "bucket style", "pitchfork style", "constantly twirling", "cocoon"]),
      snowsuit: getMode("snowsuit", ["eyebrows", "smirk", "nose", "goatee", "hat"]),
      edpiece: getMode("edPiece", ["bear", "owl", "puma", "hyena", "mouse", "weasel", "fish"]),
      retrocape: [getMode("retroCapeSuperhero", ["vampire", "heck", "robot"]), getMode("retroCapeWashingInstructions", ["hold", "thrill", "kiss", "kill"])],
      parka: getMode("parkaMode", ["kachungasaur", "dilophosaur", "ghostasaurus", "spikolodon", "pterodactyl"])
    };
  }
  /**
   * Get the current value for a mode in a type-safe way.
   *
   * @param property The mafia property for the mode.
   * @param options A typed list of options for the mode.
   * @returns The mode if the property value matched a valid option, or undefined.
   */
  
  function getMode(property, options) {
    var val = property_get(property, "");
    return options.find(s => s === val); // .includes has type issues
  }
  ;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/engine.js
  var engine_templateObject;
  
  function engine_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  function engine_toConsumableArray(arr) { return engine_arrayWithoutHoles(arr) || engine_iterableToArray(arr) || engine_unsupportedIterableToArray(arr) || engine_nonIterableSpread(); }
  
  function engine_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function engine_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  
  function engine_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return engine_arrayLikeToArray(arr); }
  
  function engine_slicedToArray(arr, i) { return engine_arrayWithHoles(arr) || engine_iterableToArrayLimit(arr, i) || engine_unsupportedIterableToArray(arr, i) || engine_nonIterableRest(); }
  
  function engine_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function engine_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
  
  function engine_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
  
  function engine_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = engine_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  
  function engine_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return engine_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return engine_arrayLikeToArray(o, minLen); }
  
  function engine_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function engine_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function engine_createClass(Constructor, protoProps, staticProps) { if (protoProps) engine_defineProperties(Constructor.prototype, protoProps); if (staticProps) engine_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function engine_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  
  
  
  
  var EngineOptions = /*#__PURE__*/(/* unused pure expression or super */ null && (engine_createClass(function EngineOptions() {
    engine_classCallCheck(this, EngineOptions);
  })));
  var grimoireCCS = "grimoire_macro";
  var Engine = /*#__PURE__*/function () {
    /**
     * Create the engine.
     * @param tasks A list of tasks for looking up task dependencies.
     * @param options Basic configuration of the engine.
     */
    function Engine(tasks, options) {
      engine_classCallCheck(this, Engine);
  
      this.attempts = {};
      this.propertyManager = new PropertiesManager();
      this.tasks_by_name = new Map();
      this.cachedCcsContents = "";
      this.tasks = tasks;
      this.options = options !== null && options !== void 0 ? options : {};
  
      var _iterator = engine_createForOfIteratorHelper(tasks),
          _step;
  
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var task = _step.value;
          this.tasks_by_name.set(task.name, task);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
  
      this.initPropertiesManager(this.propertyManager);
    }
    /**
     * Determine the next task to perform.
     * By default, this is the first task in the task list that is available.
     * @returns The next task to perform, or undefined if no tasks are available.
     */
  
  
    engine_createClass(Engine, [{
      key: "getNextTask",
      value: function getNextTask() {
        return this.tasks.find(task => this.available(task));
      }
      /**
       * Continually get the next task and execute it.
       * @param actions If given, only perform up to this many tasks.
       */
  
    }, {
      key: "run",
      value: function run(actions) {
        for (var i = 0; i < (actions !== null && actions !== void 0 ? actions : Infinity); i++) {
          var task = this.getNextTask();
          if (!task) return;
          this.execute(task);
        }
      }
      /**
       * Close the engine and reset all properties.
       * After this has been called, this object should not be used.
       */
  
    }, {
      key: "destruct",
      value: function destruct() {
        this.propertyManager.resetAll();
        (0,external_kolmafia_namespaceObject.setAutoAttack)(0);
      }
      /**
       * Check if the given task is available at this moment.
       * @returns true if all dependencies are complete and the task is ready.
       *  Note that dependencies are not checked transitively. That is, if
       *  A depends on B which depends on C, then A is ready if B is complete
       *  (regardless of if C is complete or not).
       */
  
    }, {
      key: "available",
      value: function available(task) {
        var _a;
  
        var _iterator2 = engine_createForOfIteratorHelper((_a = task.after) !== null && _a !== void 0 ? _a : []),
            _step2;
  
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var after = _step2.value;
            var after_task = this.tasks_by_name.get(after);
            if (after_task === undefined) throw "Unknown task dependency ".concat(after, " on ").concat(task.name);
            if (!after_task.completed()) return false;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
  
        if (task.ready && !task.ready()) return false;
        if (task.completed()) return false;
        return true;
      }
      /**
       * Perform all steps to execute the provided task.
       * This is the main entry point for the Engine.
       * @param task The current executing task.
       */
  
    }, {
      key: "execute",
      value: function execute(task) {
        var _a, _b, _c, _d, _e;
  
        (0,external_kolmafia_namespaceObject.print)("");
        (0,external_kolmafia_namespaceObject.print)("Executing ".concat(task.name), "blue"); // Determine the proper postcondition for after the task executes.
  
        var postcondition = (_b = (_a = task.limit) === null || _a === void 0 ? void 0 : _a.guard) === null || _b === void 0 ? void 0 : _b.call(_a); // Acquire any items and effects first, possibly for later execution steps.
  
        this.acquireItems(task);
        this.acquireEffects(task); // Prepare the outfit, with resources.
  
        var task_combat = (_d = (_c = task.combat) === null || _c === void 0 ? void 0 : _c.clone()) !== null && _d !== void 0 ? _d : new CombatStrategy();
        var outfit = this.createOutfit(task);
        var task_resources = new CombatResources();
        this.customize(task, outfit, task_combat, task_resources);
        this.dress(task, outfit); // Prepare combat and choices
  
        this.setCombat(task, task_combat, task_resources);
        this.setChoices(task, this.propertyManager); // Actually perform the task
  
        var _iterator3 = engine_createForOfIteratorHelper(task_resources.all()),
            _step3;
  
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var resource = _step3.value;
            (_e = resource.prepare) === null || _e === void 0 ? void 0 : _e.call(resource);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
  
        this.prepare(task);
        this.do(task);
  
        while (this.shouldRepeatAdv(task)) {
          _set("lastEncounter", "");
          this.do(task);
        }
  
        this.post(task); // Mark that we tried the task, and apply limits
  
        this.markAttempt(task);
        this.checkLimits(task, postcondition);
      }
      /**
       * Acquire all items for the task.
       * @param task The current executing task.
       */
  
    }, {
      key: "acquireItems",
      value: function acquireItems(task) {
        var _a;
  
        var acquire = undelay(task.acquire);
  
        var _iterator4 = engine_createForOfIteratorHelper(acquire || []),
            _step4;
  
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var to_get = _step4.value;
            var num_needed = (_a = to_get.num) !== null && _a !== void 0 ? _a : 1;
            var num_have = (0,external_kolmafia_namespaceObject.itemAmount)(to_get.item) + (0,external_kolmafia_namespaceObject.equippedAmount)(to_get.item);
            if (num_needed <= num_have) continue;
            if (to_get.useful !== undefined && !to_get.useful()) continue;
  
            if (to_get.get) {
              to_get.get();
            } else if (to_get.price !== undefined) {
              (0,external_kolmafia_namespaceObject.buy)(to_get.item, num_needed - num_have, to_get.price);
            } else if (Object.keys((0,external_kolmafia_namespaceObject.getRelated)(to_get.item, "fold")).length > 0) {
              (0,external_kolmafia_namespaceObject.cliExecute)("fold ".concat(to_get.item));
            } else {
              (0,external_kolmafia_namespaceObject.retrieveItem)(to_get.item, num_needed);
            }
  
            if ((0,external_kolmafia_namespaceObject.itemAmount)(to_get.item) + (0,external_kolmafia_namespaceObject.equippedAmount)(to_get.item) < num_needed && !to_get.optional) {
              throw "Task ".concat(task.name, " was unable to acquire ").concat(num_needed, " ").concat(to_get.item);
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
      /**
       * Acquire all effects for the task.
       * @param task The current executing task.
       */
  
    }, {
      key: "acquireEffects",
      value: function acquireEffects(task) {
        var _a;
  
        var effects = (_a = undelay(task.effects)) !== null && _a !== void 0 ? _a : [];
        var songs = effects.filter(effect => isSong(effect));
        if (songs.length > maxSongs()) throw "Too many AT songs";
        var extraSongs = Object.keys((0,external_kolmafia_namespaceObject.myEffects)()).map(effectName => (0,external_kolmafia_namespaceObject.toEffect)(effectName)).filter(effect => isSong(effect) && !songs.includes(effect));
  
        while (songs.length + extraSongs.length > maxSongs()) {
          var toRemove = extraSongs.pop();
  
          if (toRemove === undefined) {
            break;
          } else {
            uneffect(toRemove);
          }
        }
  
        var _iterator5 = engine_createForOfIteratorHelper(effects),
            _step5;
  
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var effect = _step5.value;
            ensureEffect(effect);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
      /**
       * Create an outfit for the task with all required equipment.
       * @param task The current executing task.
       */
  
    }, {
      key: "createOutfit",
      value: function createOutfit(task) {
        var spec = undelay(task.outfit);
        if (spec instanceof Outfit) return spec.clone();
        var outfit = new Outfit();
  
        if (spec !== undefined) {
          if (!outfit.equip(spec) && !this.options.allow_partial_outfits) {
            throw "Unable to equip all items for ".concat(task.name);
          }
        }
  
        return outfit;
      }
      /**
       * Equip the outfit for the task.
       * @param task The current executing task.
       * @param outfit The outfit for the task, possibly augmented by the engine.
       */
  
    }, {
      key: "dress",
      value: function dress(task, outfit) {
        if (task.do instanceof external_kolmafia_namespaceObject.Location) (0,external_kolmafia_namespaceObject.setLocation)(task.do);
        outfit.dress();
      }
      /* eslint-disable @typescript-eslint/no-unused-vars */
  
      /**
       * Perform any engine-specific customization for the outfit and combat plan.
       *
       * This is a natural method to override in order to:
       *   * Enable the use of any resources in the outfit or combat (e.g., allocate banishers).
       *   * Equip a default outfit.
       *   * Determine additional monster macros at a global level (e.g., use flyers).
       * @param task The current executing task.
       * @param outfit The outfit for the task.
       * @param combat The combat strategy so far for the task.
       * @param resources The combat resources assigned so far for the task.
       */
  
    }, {
      key: "customize",
      value: function customize(task, outfit, combat, resources) {// do nothing by default
      }
      /* eslint-enable @typescript-eslint/no-unused-vars */
  
      /**
       * Set the choice settings for the task.
       * @param task The current executing task.
       * @param manager The property manager to use.
       */
  
    }, {
      key: "setChoices",
      value: function setChoices(task, manager) {
        var _a;
  
        for (var _i = 0, _Object$entries = Object.entries((_a = task.choices) !== null && _a !== void 0 ? _a : {}); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = engine_slicedToArray(_Object$entries[_i], 2),
              key = _Object$entries$_i[0],
              func = _Object$entries$_i[1];
  
          if (func === undefined) continue;
          manager.setChoice(parseInt(key), undelay(func));
        }
      }
      /**
       * Save the combat macro for this task.
       * @param task The current executing task.
       * @param task_combat The completed combat strategy far for the task.
       * @param task_resources The combat resources assigned for the task.
       */
  
    }, {
      key: "setCombat",
      value: function setCombat(task, task_combat, task_resources) {
        var _a; // Save regular combat macro
  
  
        var macro = task_combat.compile(task_resources, (_a = this.options) === null || _a === void 0 ? void 0 : _a.combat_defaults, task.do instanceof external_kolmafia_namespaceObject.Location ? task.do : undefined);
        macro.save();
  
        if (!this.options.ccs) {
          // Use the macro through a CCS file
          var otherCCSEntries = task_combat.compileCcs();
          var ccsContents = ["[default]", "\"".concat(macro.toString(), "\"")].concat(engine_toConsumableArray(otherCCSEntries)).join("\n"); // Log Macro + other CCS
  
          (0,external_kolmafia_namespaceObject.logprint)("CCS: ".concat(ccsContents.replace("\n", "\\n ")));
  
          if (ccsContents !== this.cachedCcsContents) {
            (0,external_kolmafia_namespaceObject.writeCcs)(ccsContents, grimoireCCS);
            (0,external_kolmafia_namespaceObject.cliExecute)("ccs ".concat(grimoireCCS)); // force Mafia to reparse the ccs
  
            this.cachedCcsContents = ccsContents;
          }
        } // Save autoattack combat macro
  
  
        var autoattack = task_combat.compileAutoattack();
  
        if (autoattack.toString().length > 1) {
          (0,external_kolmafia_namespaceObject.logprint)("Autoattack macro: ".concat(autoattack.toString()));
          autoattack.setAutoAttack();
        } else {
          (0,external_kolmafia_namespaceObject.setAutoAttack)(0);
        }
      }
      /**
       * Do any task-specific preparation.
       * @param task The current executing task.
       */
  
    }, {
      key: "prepare",
      value: function prepare(task) {
        var _a;
  
        (_a = task.prepare) === null || _a === void 0 ? void 0 : _a.call(task);
      }
      /**
       * Actually perform the task.
       * @param task The current executing task.
       */
  
    }, {
      key: "do",
      value: function _do(task) {
        var result = typeof task.do === "function" ? task.do() : task.do;
        if (result instanceof external_kolmafia_namespaceObject.Location) (0,external_kolmafia_namespaceObject.adv1)(result, -1, "");
        (0,external_kolmafia_namespaceObject.runCombat)();
  
        while ((0,external_kolmafia_namespaceObject.inMultiFight)()) {
          (0,external_kolmafia_namespaceObject.runCombat)();
        }
  
        if ((0,external_kolmafia_namespaceObject.choiceFollowsFight)()) (0,external_kolmafia_namespaceObject.runChoice)(-1);
      }
      /**
       * Check if the task.do should be immediately repeated without any prep.
       *
       * By default, this is only used to repeat a task if we hit one of:
       *   1. Halloweener dog noncombats,
       *   2. June cleaver noncombats,
       *   3. Lil' Doctor™ bag noncombat, or
       *   4. Turtle taming noncombats.
       * @param task The current executing task.
       * @returns True if the task should be immediately repeated.
       */
  
    }, {
      key: "shouldRepeatAdv",
      value: function shouldRepeatAdv(task) {
        return task.do instanceof external_kolmafia_namespaceObject.Location && lastEncounterWasWanderingNC();
      }
      /**
       * Do any task-specific wrapup activities.
       * @param task The current executing task.
       */
  
    }, {
      key: "post",
      value: function post(task) {
        var _a;
  
        (_a = task.post) === null || _a === void 0 ? void 0 : _a.call(task);
      }
      /**
       * Mark that an attempt was made on the current task.
       * @param task The current executing task.
       */
  
    }, {
      key: "markAttempt",
      value: function markAttempt(task) {
        if (!(task.name in this.attempts)) this.attempts[task.name] = 0;
        this.attempts[task.name]++;
      }
      /**
       * Check if the task has passed any of its internal limits.
       * @param task The task to check.
       * @throws An error if any of the internal limits have been passed.
       */
  
    }, {
      key: "checkLimits",
      value: function checkLimits(task, postcondition) {
        var _a;
  
        if (!task.limit) return;
        var failureMessage = task.limit.message ? " ".concat(task.limit.message) : "";
  
        if (!task.completed()) {
          if (task.limit.tries && this.attempts[task.name] >= task.limit.tries) throw "Task ".concat(task.name, " did not complete within ").concat(task.limit.tries, " attempts. Please check what went wrong.").concat(failureMessage);
          if (task.limit.soft && this.attempts[task.name] >= task.limit.soft) throw "Task ".concat(task.name, " did not complete within ").concat(task.limit.soft, " attempts. Please check what went wrong (you may just be unlucky).").concat(failureMessage);
          if (task.limit.turns && task.do instanceof external_kolmafia_namespaceObject.Location && task.do.turnsSpent >= task.limit.turns) throw "Task ".concat(task.name, " did not complete within ").concat(task.limit.turns, " turns. Please check what went wrong.").concat(failureMessage);
          if (task.limit.unready && ((_a = task.ready) === null || _a === void 0 ? void 0 : _a.call(task))) throw "Task ".concat(task.name, " is still ready, but it should not be. Please check what went wrong.").concat(failureMessage);
        }
  
        if (postcondition && !postcondition()) {
          throw "Task ".concat(task.name, " failed its guard. Please check what went wrong.").concat(failureMessage);
        }
      }
      /**
       * Initialize properties for the script.
       * @param manager The properties manager to use.
       */
  
    }, {
      key: "initPropertiesManager",
      value: function initPropertiesManager(manager) {
        var _a; // Properties adapted from garbo
  
  
        manager.set({
          logPreferenceChange: true,
          logPreferenceChangeFilter: engine_toConsumableArray(new Set([].concat(engine_toConsumableArray(property_get("logPreferenceChangeFilter").split(",")), ["libram_savedMacro", "maximizerMRUList", "testudinalTeachings", "_lastCombatStarted"]))).sort().filter(a => a).join(","),
          battleAction: "custom combat script",
          autoSatisfyWithMall: true,
          autoSatisfyWithNPCs: true,
          autoSatisfyWithCoinmasters: true,
          autoSatisfyWithStash: false,
          dontStopForCounters: true,
          maximizerFoldables: true,
          hpAutoRecovery: "-0.05",
          hpAutoRecoveryTarget: "0.0",
          mpAutoRecovery: "-0.05",
          mpAutoRecoveryTarget: "0.0",
          afterAdventureScript: "",
          betweenBattleScript: "",
          choiceAdventureScript: "",
          familiarScript: "",
          currentMood: "apathetic",
          autoTuxedo: true,
          autoPinkyRing: true,
          autoGarish: true,
          allowNonMoodBurning: false,
          allowSummonBurning: true,
          libramSkillsSoftcore: "none"
        });
  
        if (this.options.ccs !== "") {
          if (this.options.ccs === undefined && (0,external_kolmafia_namespaceObject.readCcs)(grimoireCCS) === "") {
            // Write a simple CCS so we can switch to it
            (0,external_kolmafia_namespaceObject.writeCcs)("[ default ]\nabort", grimoireCCS);
          }
  
          manager.set({
            customCombatScript: (_a = this.options.ccs) !== null && _a !== void 0 ? _a : grimoireCCS
          });
        }
      }
    }]);
  
    return Engine;
  }();
  function maxSongs() {
    return lib_have(template_string_$skill(engine_templateObject || (engine_templateObject = engine_taggedTemplateLiteral(["Mariachi Memory"])))) ? 4 : 3;
  }
  var wanderingNCs = new Set([// Halloweener dog noncombats
  "Wooof! Wooooooof!", "Playing Fetch*", // June cleaver noncombats
  "Aunts not Ants", "Bath Time", "Beware of Aligator", "Delicious Sprouts", "Hypnotic Master", "Lost and Found", "Poetic Justice", "Summer Days", "Teacher's Pet", // Lil' Doctor™ bag noncombat
  "A Pound of Cure", // Turtle taming noncombats
  "Nantucket Snapper", "Blue Monday", "Capital!", "Training Day", "Boxed In", "Duel Nature", "Slow Food", "A Rolling Turtle Gathers No Moss", "Slow Road to Hell", "C'mere, Little Fella", "The Real Victims", "Like That Time in Tortuga", "Cleansing your Palette", "Harem Scarum", "Turtle in peril", "No Man, No Hole", "Slow and Steady Wins the Brawl", "Stormy Weather", "Turtles of the Universe", "O Turtle Were Art Thou", "Allow 6-8 Weeks For Delivery", "Kick the Can", "Turtles All The Way Around", "More eXtreme Than Usual", "Jewel in the Rough", "The worst kind of drowning", "Even Tamer Than Usual", "Never Break the Chain", "Close, but Yes Cigar", "Armchair Quarterback", "This Turtle Rocks!", "Really Sticking Her Neck Out", "It Came from Beneath the Sewer? Great!", "Don't Be Alarmed, Now", "Puttin' it on Wax", "More Like... Hurtle", "Musk! Musk! Musk!", "Silent Strolling"]);
  var zoneSpecificNCs = new Map([["The Horror...", ["Frat House"]] // Duplicate choice name
  ]);
  /**
   * Return true if the last adv was one of:
   *   1. Halloweener dog noncombats,
   *   2. June cleaver noncombats,
   *   3. Lil' Doctor™ bag noncombat, or
   *   4. Turtle taming noncombats.
   */
  
  function lastEncounterWasWanderingNC() {
    var _a;
  
    var last = property_get("lastEncounter");
  
    if (zoneSpecificNCs.has(last)) {
      // Handle NCs with a duplicated name
      var zones = (_a = zoneSpecificNCs.get(last)) !== null && _a !== void 0 ? _a : [];
      return zones.includes(property_get("lastAdventure"));
    } else {
      return wanderingNCs.has(last);
    }
  }
  ;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/route.js
  function route_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  
  function route_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? route_ownKeys(Object(source), !0).forEach(function (key) { route_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : route_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  
  function route_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function route_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = route_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  
  function route_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return route_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return route_arrayLikeToArray(o, minLen); }
  
  function route_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  /**
   * Extract a list of tasks from the provided quests.
   *
   * Each task name is prepended with the quest name ("Quest Name/Task Name").
   * The quest-local names referred to in task.after are updated appropriately.
   * The task completion condition is updated to include the quest completion.
   *
   * Tasks are returned in-order: all tasks from the first quest, then all tasks
   * from the second quest, etc.
   *
   * @param quests The list of quests. This method does not modify the quest
   *    objects or their tasks.
   * @param implicitAfter If true, each task with task.after = undefined will
   *    have a dependency added on the previous task in the list.
   * @returns A list of tasks from the input quests (with updated properties).
   */
  function getTasks(quests) {
    var implicitAfter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  
    var _a, _b;
  
    var result = [];
  
    var _iterator = route_createForOfIteratorHelper(quests),
        _step;
  
    try {
      var _loop = function _loop() {
        var quest = _step.value;
        var questCompleted = quest.completed;
  
        var _iterator3 = route_createForOfIteratorHelper(quest.tasks),
            _step3;
  
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _task2 = _step3.value;
  
            // Include quest name in task names and dependencies (unless dependency quest is given)
            var renamedTask = route_objectSpread({}, _task2);
  
            renamedTask.name = "".concat(quest.name, "/").concat(_task2.name);
            renamedTask.after = (_a = _task2.after) === null || _a === void 0 ? void 0 : _a.map(after => after.includes("/") ? after : "".concat(quest.name, "/").concat(after)); // Include previous task as a dependency
  
            if (implicitAfter && _task2.after === undefined && result.length > 0) renamedTask.after = [result[result.length - 1].name]; // Include quest completion in task completion
  
            if (questCompleted !== undefined) {
              (function () {
                var taskCompleted = _task2.completed;
  
                renamedTask.completed = () => questCompleted() || taskCompleted();
              })();
            }
  
            result.push(renamedTask);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      };
  
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        _loop();
      } // Verify the dependency names of all tasks
  
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  
    var names = new Set();
  
    for (var _i = 0, _result = result; _i < _result.length; _i++) {
      var task = _result[_i];
      names.add(task.name);
    }
  
    for (var _i2 = 0, _result2 = result; _i2 < _result2.length; _i2++) {
      var _task = _result2[_i2];
  
      var _iterator2 = route_createForOfIteratorHelper((_b = _task.after) !== null && _b !== void 0 ? _b : []),
          _step2;
  
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var after = _step2.value;
  
          if (!names.has(after)) {
            throw "Unknown task dependency ".concat(after, " of ").concat(_task.name);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  
    return result;
  }
  function orderByRoute(tasks, routing, ignore_missing_tasks) {
    var priorities = new Map();
  
    var _iterator4 = route_createForOfIteratorHelper(tasks),
        _step4;
  
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var task = _step4.value;
        priorities.set(task.name, [1000, task]);
      } // Prioritize the routing list of tasks first
  
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
  
    function setPriorityRecursive(task, priority) {
      var _a;
  
      var old_priority = priorities.get(task);
  
      if (old_priority === undefined) {
        if (ignore_missing_tasks) return;
        throw "Unknown routing task ".concat(task);
      }
  
      if (old_priority[0] <= priority) return;
      priorities.set(task, [priority, old_priority[1]]);
  
      var _iterator5 = route_createForOfIteratorHelper((_a = old_priority[1].after) !== null && _a !== void 0 ? _a : []),
          _step5;
  
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var requirement = _step5.value;
          setPriorityRecursive(requirement, priority - 0.01);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  
    for (var i = 0; i < routing.length; i++) {
      setPriorityRecursive(routing[i], i);
    } // Sort all tasks by priority.
    // Since this sort is stable, we default to earlier tasks.
  
  
    var result = tasks.slice();
    result.sort((a, b) => (priorities.get(a.name) || [1000])[0] - (priorities.get(b.name) || [1000])[0]);
    return result;
  }
  ;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/task.js
  
  /**
   * Returns the state of a quest as a numeric value as follows:
   *   "unstarted" => -1
   *   "started" => 0
   *   "stepNUM" => NUM
   *   "finished" => 999
   */
  
  function step(questName) {
    var stringStep = property_get(questName);
    if (stringStep === "unstarted") return -1;else if (stringStep === "started") return 0;else if (stringStep === "finished") return 999;else {
      if (stringStep.substring(0, 4) !== "step") {
        throw "Quest state parsing error.";
      }
  
      return parseInt(stringStep.substring(4), 10);
    }
  }
  ;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/index.js
  
  
  
  
  
  
  
  ;// CONCATENATED MODULE: ./src/tasks/level1.ts
  var level1_templateObject, level1_templateObject2;
  
  function level1_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  var TootQuest = {
    name: "Toot",
    tasks: [{
      name: "Start",
      after: [],
      completed: () => step("questM05Toot") !== -1,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Toot",
      after: ["Start"],
      completed: () => step("questM05Toot") > 0,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("tutorial.php?action=toot"),
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Finish",
      after: ["Toot"],
      completed: () => step("questM05Toot") > 0 && !lib_have(template_string_$item(level1_templateObject || (level1_templateObject = level1_taggedTemplateLiteral(["letter from King Ralph XI"])))),
      do: () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(level1_templateObject2 || (level1_templateObject2 = level1_taggedTemplateLiteral(["letter from King Ralph XI"])))),
      limit: {
        tries: 1
      },
      freeaction: true
    }]
  };
  ;// CONCATENATED MODULE: ./src/tasks/level2.ts
  var level2_templateObject, level2_templateObject2, level2_templateObject3;
  
  function level2_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  var MosquitoQuest = {
    name: "Mosquito",
    tasks: [{
      name: "Start",
      after: ["Toot/Finish"],
      ready: () => (0,external_kolmafia_namespaceObject.myLevel)() >= 2,
      completed: () => step("questL02Larva") !== -1,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Burn Delay",
      after: ["Start"],
      completed: () => $location(level2_templateObject || (level2_templateObject = level2_taggedTemplateLiteral(["The Spooky Forest"]))).turnsSpent >= 5 || step("questL02Larva") >= 1,
      do: $location(level2_templateObject2 || (level2_templateObject2 = level2_taggedTemplateLiteral(["The Spooky Forest"]))),
      choices: {
        502: 2,
        505: 1,
        334: 1
      },
      limit: {
        tries: 5
      },
      delay: 5
    }, {
      name: "Mosquito",
      after: ["Burn Delay"],
      completed: () => step("questL02Larva") >= 1,
      do: $location(level2_templateObject3 || (level2_templateObject3 = level2_taggedTemplateLiteral(["The Spooky Forest"]))),
      choices: {
        502: 2,
        505: 1,
        334: 1
      },
      outfit: {
        modifier: "-combat"
      },
      limit: {
        soft: 20
      }
    }, {
      name: "Finish",
      after: ["Mosquito"],
      completed: () => step("questL02Larva") === 999,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        tries: 1
      },
      freeaction: true
    }]
  };
  ;// CONCATENATED MODULE: ./src/engine/combat.ts
  var combat_templateObject, combat_templateObject2, combat_templateObject3, combat_templateObject4, combat_templateObject5, combat_templateObject6, combat_templateObject7, combat_templateObject8, combat_templateObject9, combat_templateObject10, combat_templateObject11, combat_templateObject12, combat_templateObject13, combat_templateObject14;
  
  function combat_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  function engine_combat_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function engine_combat_createClass(Constructor, protoProps, staticProps) { if (protoProps) engine_combat_defineProperties(Constructor.prototype, protoProps); if (staticProps) engine_combat_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function engine_combat_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function engine_combat_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) engine_combat_setPrototypeOf(subClass, superClass); }
  
  function engine_combat_setPrototypeOf(o, p) { engine_combat_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return engine_combat_setPrototypeOf(o, p); }
  
  function engine_combat_createSuper(Derived) { var hasNativeReflectConstruct = engine_combat_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = engine_combat_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = engine_combat_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return engine_combat_possibleConstructorReturn(this, result); }; }
  
  function engine_combat_possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return engine_combat_assertThisInitialized(self); }
  
  function engine_combat_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function engine_combat_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function engine_combat_getPrototypeOf(o) { engine_combat_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return engine_combat_getPrototypeOf(o); }
  
  
  
  
  var myActions = ["ignore", // Task doesn't care what happens
  "ignoreNoBanish", // Task doesn't care what happens, as long as it is not banished
  "kill", // Task needs to kill it, with or without a free kill
  "killFree", // Task needs to kill it with a free kill
  "killHard", // Task needs to kill it without using a free kill (i.e., boss, or already free)
  "banish", // Task doesn't care what happens, but banishing is useful
  "abort" // Abort the macro and the script; an error has occured
  ];
  var combat_CombatStrategy = /*#__PURE__*/function (_BaseCombatStrategy$w) {
    engine_combat_inherits(CombatStrategy, _BaseCombatStrategy$w);
  
    var _super = engine_combat_createSuper(CombatStrategy);
  
    function CombatStrategy() {
      engine_combat_classCallCheck(this, CombatStrategy);
  
      return _super.apply(this, arguments);
    }
  
    return engine_combat_createClass(CombatStrategy);
  }(CombatStrategy.withActions(myActions));
  var MyActionDefaults = /*#__PURE__*/function () {
    function MyActionDefaults() {
      engine_combat_classCallCheck(this, MyActionDefaults);
    }
  
    engine_combat_createClass(MyActionDefaults, [{
      key: "ignore",
      value: function ignore() {
        return new Macro().runaway().skill(template_string_$skill(combat_templateObject || (combat_templateObject = combat_taggedTemplateLiteral(["Saucestorm"])))).attack().repeat();
      }
    }, {
      key: "kill",
      value: function kill(target) {
        // Upgrade normal kills to hard kills if we are underleveled
        if (target && target instanceof external_kolmafia_namespaceObject.Monster && (0,external_kolmafia_namespaceObject.monsterDefense)(target) * 1.25 > (0,external_kolmafia_namespaceObject.myBuffedstat)((0,external_kolmafia_namespaceObject.weaponType)((0,external_kolmafia_namespaceObject.equippedItem)($slot(combat_templateObject2 || (combat_templateObject2 = combat_taggedTemplateLiteral(["Weapon"]))))))) return this.killHard();
        if ((0,external_kolmafia_namespaceObject.monsterLevelAdjustment)() > 150) return new Macro().skill(template_string_$skill(combat_templateObject3 || (combat_templateObject3 = combat_taggedTemplateLiteral(["Saucegeyser"])))).repeat();
        if (target && target instanceof external_kolmafia_namespaceObject.Monster && target.physicalResistance >= 70) return this.delevel().skill(template_string_$skill(combat_templateObject4 || (combat_templateObject4 = combat_taggedTemplateLiteral(["Saucegeyser"])))).repeat();else return this.delevel().attack().repeat();
      }
    }, {
      key: "killHard",
      value: function killHard(target) {
        if (target && target instanceof external_kolmafia_namespaceObject.Monster && target.physicalResistance >= 70 || (0,external_kolmafia_namespaceObject.weaponType)((0,external_kolmafia_namespaceObject.equippedItem)($slot(combat_templateObject5 || (combat_templateObject5 = combat_taggedTemplateLiteral(["Weapon"]))))) !== $stat(combat_templateObject6 || (combat_templateObject6 = combat_taggedTemplateLiteral(["muscle"])))) {
          return this.delevel().skill(template_string_$skill(combat_templateObject7 || (combat_templateObject7 = combat_taggedTemplateLiteral(["Saucegeyser"])))).repeat();
        } else {
          return this.delevel().skill(template_string_$skill(combat_templateObject8 || (combat_templateObject8 = combat_taggedTemplateLiteral(["Lunging Thrust-Smack"])))).repeat();
        }
      }
    }, {
      key: "ignoreNoBanish",
      value: function ignoreNoBanish() {
        return this.ignore();
      }
    }, {
      key: "killFree",
      value: function killFree() {
        return this.abort();
      } // Abort if no resource provided
  
    }, {
      key: "banish",
      value: function banish() {
        return this.abort();
      } // Abort if no resource provided
  
    }, {
      key: "abort",
      value: function abort() {
        return new Macro().abort();
      }
    }, {
      key: "delevel",
      value: function delevel() {
        return new Macro().skill(template_string_$skill(combat_templateObject9 || (combat_templateObject9 = combat_taggedTemplateLiteral(["Curse of Weaksauce"])))).trySkill(template_string_$skill(combat_templateObject10 || (combat_templateObject10 = combat_taggedTemplateLiteral(["Pocket Crumbs"])))).trySkill(template_string_$skill(combat_templateObject11 || (combat_templateObject11 = combat_taggedTemplateLiteral(["Micrometeorite"])))).tryItem(template_string_$item(combat_templateObject12 || (combat_templateObject12 = combat_taggedTemplateLiteral(["Rain-Doh indigo cup"])))).trySkill(template_string_$skill(combat_templateObject13 || (combat_templateObject13 = combat_taggedTemplateLiteral(["Summon Love Mosquito"])))).tryItem(template_string_$item(combat_templateObject14 || (combat_templateObject14 = combat_taggedTemplateLiteral(["Time-Spinner"]))));
      }
    }]);
  
    return MyActionDefaults;
  }();
  ;// CONCATENATED MODULE: ./src/tasks/level3.ts
  var level3_templateObject;
  
  function level3_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  var TavernQuest = {
    name: "Tavern",
    tasks: [{
      name: "Start",
      after: ["Mosquito/Finish"],
      ready: () => (0,external_kolmafia_namespaceObject.myLevel)() >= 3,
      completed: () => step("questL03Rat") >= 0,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Tavernkeep",
      after: ["Start"],
      completed: () => step("questL03Rat") >= 1,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("tavern.php?place=barkeep"),
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Basement",
      after: ["Tavernkeep"],
      completed: () => step("questL03Rat") >= 2,
      do: () => {
        (0,external_kolmafia_namespaceObject.visitUrl)("cellar.php");
        var layout = (0,external_kolmafia_namespaceObject.getProperty)("tavernLayout");
        var path = [3, 2, 1, 0, 5, 10, 15, 20, 16, 21];
  
        for (var i = 0; i < path.length; i++) {
          if (layout.charAt(path[i]) === "0") {
            (0,external_kolmafia_namespaceObject.visitUrl)("cellar.php?action=explore&whichspot=".concat(path[i] + 1));
            (0,external_kolmafia_namespaceObject.runCombat)();
            (0,external_kolmafia_namespaceObject.runChoice)(-1);
            break;
          }
        }
      },
      effects: $effects(level3_templateObject || (level3_templateObject = level3_taggedTemplateLiteral(["Belch the Rainbow\u2122, Benetton's Medley of Diversity"]))),
      outfit: {
        modifier: "-combat"
      },
      combat: new combat_CombatStrategy().ignoreNoBanish(),
      choices: {
        509: 1,
        510: 1,
        511: 2,
        514: 2,
        515: 2,
        496: 2,
        513: 2
      },
      limit: {
        tries: 10
      }
    }, {
      name: "Finish",
      after: ["Basement"],
      completed: () => step("questL03Rat") === 999,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("tavern.php?place=barkeep"),
      limit: {
        tries: 1
      },
      freeaction: true
    }]
  };
  ;// CONCATENATED MODULE: ./src/tasks/level4.ts
  var level4_templateObject, level4_templateObject2, level4_templateObject3, level4_templateObject4;
  
  function level4_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  var BatQuest = {
    name: "Bat",
    tasks: [{
      name: "Start",
      after: ["Toot/Finish"],
      ready: () => (0,external_kolmafia_namespaceObject.myLevel)() >= 4,
      completed: () => step("questL04Bat") !== -1,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Use Sonar",
      after: ["Start"],
      acquire: [{
        item: template_string_$item(level4_templateObject || (level4_templateObject = level4_taggedTemplateLiteral(["sonar-in-a-biscuit"])))
      }],
      completed: () => step("questL04Bat") >= 3,
      do: () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(level4_templateObject2 || (level4_templateObject2 = level4_taggedTemplateLiteral(["sonar-in-a-biscuit"])))),
      limit: {
        tries: 3
      },
      freeaction: true
    }, {
      name: "Boss Bat",
      after: ["Use Sonar"],
      completed: () => step("questL04Bat") >= 4,
      do: $location(level4_templateObject3 || (level4_templateObject3 = level4_taggedTemplateLiteral(["The Boss Bat's Lair"]))),
      combat: new combat_CombatStrategy().kill($monster(level4_templateObject4 || (level4_templateObject4 = level4_taggedTemplateLiteral(["Boss Bat"])))).ignoreNoBanish(),
      limit: {
        soft: 10
      },
      delay: 6
    }, {
      name: "Finish",
      after: ["Boss Bat"],
      completed: () => step("questL04Bat") === 999,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        tries: 1
      },
      freeaction: true
    }]
  };
  ;// CONCATENATED MODULE: ./src/tasks/level5.ts
  var level5_templateObject, level5_templateObject2, level5_templateObject3, level5_templateObject4, level5_templateObject5, level5_templateObject6, level5_templateObject7, level5_templateObject8, level5_templateObject9;
  
  function level5_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  var KnobQuest = {
    name: "Knob",
    tasks: [{
      name: "Start",
      after: ["Toot/Finish"],
      ready: () => (0,external_kolmafia_namespaceObject.myLevel)() >= 5,
      completed: () => step("questL05Goblin") >= 0,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Outskirts",
      after: [],
      completed: () => lib_have(template_string_$item(level5_templateObject || (level5_templateObject = level5_taggedTemplateLiteral(["Knob Goblin encryption key"])))) || step("questL05Goblin") > 0,
      do: $location(level5_templateObject2 || (level5_templateObject2 = level5_taggedTemplateLiteral(["The Outskirts of Cobb's Knob"]))),
      choices: {
        111: 3,
        113: 2,
        118: 1
      },
      limit: {
        tries: 13
      },
      delay: 10
    }, {
      name: "Open Knob",
      after: ["Start", "Outskirts"],
      completed: () => step("questL05Goblin") >= 1,
      do: () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(level5_templateObject3 || (level5_templateObject3 = level5_taggedTemplateLiteral(["Cobb's Knob map"])))),
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "King",
      after: ["Open Knob"],
      acquire: [{
        item: template_string_$item(level5_templateObject4 || (level5_templateObject4 = level5_taggedTemplateLiteral(["Knob Goblin harem veil"])))
      }, {
        item: template_string_$item(level5_templateObject5 || (level5_templateObject5 = level5_taggedTemplateLiteral(["Knob Goblin harem pants"])))
      }, {
        item: template_string_$item(level5_templateObject6 || (level5_templateObject6 = level5_taggedTemplateLiteral(["Knob Goblin perfume"])))
      }],
      completed: () => step("questL05Goblin") === 999,
      do: $location(level5_templateObject7 || (level5_templateObject7 = level5_taggedTemplateLiteral(["Throne Room"]))),
      boss: true,
      combat: new combat_CombatStrategy().kill($monster(level5_templateObject8 || (level5_templateObject8 = level5_taggedTemplateLiteral(["Knob Goblin King"])))),
      effects: $effects(level5_templateObject9 || (level5_templateObject9 = level5_taggedTemplateLiteral(["Knob Goblin Perfume"]))),
      limit: {
        tries: 1
      }
    }]
  };
  ;// CONCATENATED MODULE: ./src/tasks/level6.ts
  var level6_templateObject, level6_templateObject2, level6_templateObject3, level6_templateObject4, level6_templateObject5, level6_templateObject6, level6_templateObject7, level6_templateObject8, level6_templateObject9, level6_templateObject10, level6_templateObject11, level6_templateObject12, level6_templateObject13, level6_templateObject14, level6_templateObject15, level6_templateObject16, level6_templateObject17, level6_templateObject18, level6_templateObject19, level6_templateObject20, level6_templateObject21, level6_templateObject22, level6_templateObject23, level6_templateObject24, level6_templateObject25;
  
  function level6_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  var FriarQuest = {
    name: "Friar",
    tasks: [{
      name: "Start",
      after: ["Toot/Finish"],
      ready: () => (0,external_kolmafia_namespaceObject.myLevel)() >= 6,
      completed: () => step("questL06Friar") !== -1,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Heart",
      after: ["Start"],
      completed: () => lib_have(template_string_$item(level6_templateObject || (level6_templateObject = level6_taggedTemplateLiteral(["box of birthday candles"])))) || step("questL06Friar") === 999,
      do: $location(level6_templateObject2 || (level6_templateObject2 = level6_taggedTemplateLiteral(["The Dark Heart of the Woods"]))),
      outfit: {
        modifier: "-combat"
      },
      limit: {
        soft: 20
      }
    }, {
      name: "Neck",
      after: ["Start"],
      completed: () => lib_have(template_string_$item(level6_templateObject3 || (level6_templateObject3 = level6_taggedTemplateLiteral(["dodecagram"])))) || step("questL06Friar") === 999,
      do: $location(level6_templateObject4 || (level6_templateObject4 = level6_taggedTemplateLiteral(["The Dark Neck of the Woods"]))),
      outfit: {
        modifier: "-combat"
      },
      choices: {
        1428: 2
      },
      limit: {
        soft: 20
      }
    }, {
      name: "Elbow",
      after: ["Start"],
      completed: () => lib_have(template_string_$item(level6_templateObject5 || (level6_templateObject5 = level6_taggedTemplateLiteral(["eldritch butterknife"])))) || step("questL06Friar") === 999,
      do: $location(level6_templateObject6 || (level6_templateObject6 = level6_taggedTemplateLiteral(["The Dark Elbow of the Woods"]))),
      outfit: {
        modifier: "-combat"
      },
      limit: {
        soft: 20
      }
    }, {
      name: "Finish",
      after: ["Heart", "Neck", "Elbow"],
      completed: () => step("questL06Friar") === 999,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("friars.php?action=ritual&pwd"),
      limit: {
        tries: 1
      },
      freeaction: true
    }]
  };
  var OrganQuest = {
    name: "Organ",
    tasks: [{
      name: "Start",
      after: ["Friar/Finish"],
      completed: () => step("questM10Azazel") >= 0,
      do: () => {
        (0,external_kolmafia_namespaceObject.visitUrl)("pandamonium.php?action=temp");
        (0,external_kolmafia_namespaceObject.visitUrl)("pandamonium.php?action=sven");
      },
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Tutu",
      after: ["Start"],
      completed: () => lib_have(template_string_$item(level6_templateObject7 || (level6_templateObject7 = level6_taggedTemplateLiteral(["Azazel's tutu"])))) || step("questM10Azazel") === 999,
      acquire: [{
        item: template_string_$item(level6_templateObject8 || (level6_templateObject8 = level6_taggedTemplateLiteral(["imp air"]))),
        num: 5
      }, {
        item: template_string_$item(level6_templateObject9 || (level6_templateObject9 = level6_taggedTemplateLiteral(["bus pass"]))),
        num: 5
      }],
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("pandamonium.php?action=moan"),
      limit: {
        tries: 2
      },
      freeaction: true
    }, {
      name: "Arena",
      after: ["Start"],
      completed: () => {
        if (step("questM10Azazel") === 999) return true;
        if (lib_have(template_string_$item(level6_templateObject10 || (level6_templateObject10 = level6_taggedTemplateLiteral(["Azazel's unicorn"]))))) return true;
  
        var count = items => items.reduce((sum, item) => sum + (0,external_kolmafia_namespaceObject.itemAmount)(item), 0);
  
        if (count(template_string_$items(level6_templateObject11 || (level6_templateObject11 = level6_taggedTemplateLiteral(["giant marshmallow, beer-scented teddy bear, gin-soaked blotter paper"])))) < 2) return false;
        if (count(template_string_$items(level6_templateObject12 || (level6_templateObject12 = level6_taggedTemplateLiteral(["booze-soaked cherry, comfy pillow, sponge cake"])))) < 2) return false;
        return true;
      },
      do: $location(level6_templateObject13 || (level6_templateObject13 = level6_taggedTemplateLiteral(["Infernal Rackets Backstage"]))),
      limit: {
        soft: 30
      },
      outfit: {
        modifier: "-combat"
      }
    }, {
      name: "Unicorn",
      after: ["Arena"],
      completed: () => lib_have(template_string_$item(level6_templateObject14 || (level6_templateObject14 = level6_taggedTemplateLiteral(["Azazel's unicorn"])))) || step("questM10Azazel") === 999,
      do: () => {
        var goals = {
          Bognort: template_string_$items(level6_templateObject15 || (level6_templateObject15 = level6_taggedTemplateLiteral(["giant marshmallow, gin-soaked blotter paper"]))),
          Stinkface: template_string_$items(level6_templateObject16 || (level6_templateObject16 = level6_taggedTemplateLiteral(["beer-scented teddy bear, gin-soaked blotter paper"]))),
          Flargwurm: template_string_$items(level6_templateObject17 || (level6_templateObject17 = level6_taggedTemplateLiteral(["booze-soaked cherry, sponge cake"]))),
          Jim: template_string_$items(level6_templateObject18 || (level6_templateObject18 = level6_taggedTemplateLiteral(["comfy pillow, sponge cake"])))
        };
        (0,external_kolmafia_namespaceObject.visitUrl)("pandamonium.php?action=sven");
  
        for (var _i = 0, _Object$keys = Object.keys(goals); _i < _Object$keys.length; _i++) {
          var member = _Object$keys[_i];
          if (goals[member].length === 0) throw "Unable to solve Azazel's arena quest";
          var item = lib_have(goals[member][0]) ? (0,external_kolmafia_namespaceObject.toInt)(goals[member][0]) : (0,external_kolmafia_namespaceObject.toInt)(goals[member][1]);
          (0,external_kolmafia_namespaceObject.visitUrl)("pandamonium.php?action=sven&bandmember=".concat(member, "&togive=").concat(item, "&preaction=try"));
        }
      },
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Comedy Club",
      after: ["Start"],
      completed: () => lib_have(template_string_$item(level6_templateObject19 || (level6_templateObject19 = level6_taggedTemplateLiteral(["observational glasses"])))),
      do: $location(level6_templateObject20 || (level6_templateObject20 = level6_taggedTemplateLiteral(["The Laugh Floor"]))),
      outfit: {
        modifier: "+combat"
      },
      combat: new combat_CombatStrategy().kill($monsters(level6_templateObject21 || (level6_templateObject21 = level6_taggedTemplateLiteral(["Carbuncle Top, Larry of the Field of Signs, Victor the Insult Comic Hellhound"])))),
      limit: {
        soft: 30
      }
    }, {
      name: "Lollipop",
      after: ["Comedy Club"],
      completed: () => lib_have(template_string_$item(level6_templateObject22 || (level6_templateObject22 = level6_taggedTemplateLiteral(["Azazel's lollipop"])))) || step("questM10Azazel") === 999,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("pandamonium.php?action=mourn&preaction=observe"),
      outfit: {
        equip: template_string_$items(level6_templateObject23 || (level6_templateObject23 = level6_taggedTemplateLiteral(["observational glasses"])))
      },
      limit: {
        tries: 1
      },
      freeaction: true,
      noadventures: true
    }, {
      name: "Azazel",
      after: ["Tutu", "Unicorn", "Lollipop"],
      completed: () => step("questM10Azazel") === 999,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("pandamonium.php?action=temp"),
      limit: {
        tries: 1
      },
      freeaction: true,
      noadventures: true
    }, {
      name: "Finish",
      after: ["Azazel"],
      completed: () => lib_have(template_string_$skill(level6_templateObject24 || (level6_templateObject24 = level6_taggedTemplateLiteral(["Liver of Steel"])))),
      do: () => (0,external_kolmafia_namespaceObject.drink)(template_string_$item(level6_templateObject25 || (level6_templateObject25 = level6_taggedTemplateLiteral(["steel margarita"])))),
      limit: {
        tries: 1
      },
      freeaction: true,
      noadventures: true
    }]
  };
  ;// CONCATENATED MODULE: ./src/tasks/level7.ts
  var level7_templateObject, level7_templateObject2, level7_templateObject3, level7_templateObject4, level7_templateObject5, level7_templateObject6, level7_templateObject7, level7_templateObject8, level7_templateObject9, level7_templateObject10, level7_templateObject11, level7_templateObject12, level7_templateObject13, level7_templateObject14, level7_templateObject15, level7_templateObject16, level7_templateObject17, level7_templateObject18, level7_templateObject19, level7_templateObject20, level7_templateObject21, level7_templateObject22, level7_templateObject23, level7_templateObject24, level7_templateObject25, level7_templateObject26, level7_templateObject27, level7_templateObject28, level7_templateObject29, level7_templateObject30, level7_templateObject31, level7_templateObject32, level7_templateObject33, level7_templateObject34, level7_templateObject35, level7_templateObject36, level7_templateObject37, level7_templateObject38, level7_templateObject39, level7_templateObject40, level7_templateObject41, level7_templateObject42, level7_templateObject43, level7_templateObject44, level7_templateObject45, level7_templateObject46, level7_templateObject47, level7_templateObject48, level7_templateObject49, level7_templateObject50, level7_templateObject51, level7_templateObject52, level7_templateObject53, level7_templateObject54, level7_templateObject55, level7_templateObject56, level7_templateObject57, level7_templateObject58, level7_templateObject59, level7_templateObject60, level7_templateObject61, level7_templateObject62, level7_templateObject63, level7_templateObject64, level7_templateObject65, level7_templateObject66, level7_templateObject67, level7_templateObject68, level7_templateObject69, level7_templateObject70, level7_templateObject71, level7_templateObject72, _templateObject73;
  
  function level7_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  
  function tuneCape() {
    if (lib_have(template_string_$item(level7_templateObject || (level7_templateObject = level7_taggedTemplateLiteral(["unwrapped knock-off retro superhero cape"])))) && (property_get("retroCapeSuperhero") !== "vampire" || property_get("retroCapeWashingInstructions") !== "kill")) {
      (0,external_kolmafia_namespaceObject.cliExecute)("retrocape vampire kill");
    }
  }
  
  function tryCape(sword) {
    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }
  
    if (lib_have(template_string_$item(level7_templateObject2 || (level7_templateObject2 = level7_taggedTemplateLiteral(["unwrapped knock-off retro superhero cape"]))))) {
      rest.unshift(template_string_$item(level7_templateObject3 || (level7_templateObject3 = level7_taggedTemplateLiteral(["unwrapped knock-off retro superhero cape"]))));
      rest.unshift(sword);
    }
  
    return rest;
  }
  
  function farmingNookWithAutumnaton() {
    /*  If we have fallbot, we want to start the Nook ASAP, but we also don't want to finish it
        until we've completed all of the other quests so we don't waste any evil eyes.
         This function returns true if the nook is available to farm and we still have other quests to complete.
    */
    return property_get("hasAutumnaton") && property_get("cyrptNookEvilness") < 50 && !(step("questL02Larva") === 999 && step("questL03Rat") === 999 && step("questL04Bat") === 999 && step("questL05Goblin") === 999 && step("questL06Friar") === 999 && property_get("cyrptAlcoveEvilness") === 0 && property_get("cyrptCrannyEvilness") === 0 && property_get("cyrptNicheEvilness") === 0 && step("questL08Trapper") === 999 && step("questL09Topping") === 999 && step("questL10Garbage") === 999 && step("questL11MacGuffin") === 999 && step("questL12War") === 999);
  }
  
  var slay_macro = new Macro().trySkill(template_string_$skill(level7_templateObject4 || (level7_templateObject4 = level7_taggedTemplateLiteral(["Slay the Dead"])))).attack().repeat();
  var Alcove = [{
    name: "Alcove",
    after: ["Start"],
    prepare: () => {
      tuneCape(); // Potions to be used if cheap
  
      if (lib_have(template_string_$item(level7_templateObject5 || (level7_templateObject5 = level7_taggedTemplateLiteral(["ear candle"])))) && (0,external_kolmafia_namespaceObject.initiativeModifier)() < 850) ensureEffect(template_string_$effect(level7_templateObject6 || (level7_templateObject6 = level7_taggedTemplateLiteral(["Clear Ears, Can't Lose"]))));
      if (lib_have(template_string_$item(level7_templateObject7 || (level7_templateObject7 = level7_taggedTemplateLiteral(["panty raider camouflage"])))) && (0,external_kolmafia_namespaceObject.initiativeModifier)() < 850) ensureEffect(template_string_$effect(level7_templateObject8 || (level7_templateObject8 = level7_taggedTemplateLiteral(["Hiding in Plain Sight"]))));
      if (lib_have(template_string_$item(level7_templateObject9 || (level7_templateObject9 = level7_taggedTemplateLiteral(["Freddie's blessing of Mercury"])))) && (0,external_kolmafia_namespaceObject.initiativeModifier)() < 850) ensureEffect(template_string_$effect(level7_templateObject10 || (level7_templateObject10 = level7_taggedTemplateLiteral(["You're High as a Crow, Marty"]))));
    },
    acquire: [{
      item: template_string_$item(level7_templateObject11 || (level7_templateObject11 = level7_taggedTemplateLiteral(["gravy boat"])))
    }, // Init boosters
    {
      item: template_string_$item(level7_templateObject12 || (level7_templateObject12 = level7_taggedTemplateLiteral(["ear candle"]))),
      price: 2000,
      optional: true
    }, {
      item: template_string_$item(level7_templateObject13 || (level7_templateObject13 = level7_taggedTemplateLiteral(["panty raider camouflage"]))),
      price: 2000,
      optional: true
    }, {
      item: template_string_$item(level7_templateObject14 || (level7_templateObject14 = level7_taggedTemplateLiteral(["Freddie's blessing of Mercury"]))),
      price: 2000,
      optional: true
    }],
    completed: () => property_get("cyrptAlcoveEvilness") <= 13,
    do: $location(level7_templateObject15 || (level7_templateObject15 = level7_taggedTemplateLiteral(["The Defiled Alcove"]))),
    outfit: () => {
      return {
        equip: tryCape(template_string_$item(level7_templateObject16 || (level7_templateObject16 = level7_taggedTemplateLiteral(["costume sword"]))), template_string_$item(level7_templateObject17 || (level7_templateObject17 = level7_taggedTemplateLiteral(["gravy boat"])))),
        modifier: "init 850max, sword",
        familiar: template_string_$familiar(level7_templateObject18 || (level7_templateObject18 = level7_taggedTemplateLiteral(["Oily Woim"])))
      };
    },
    choices: {
      153: 4
    },
    combat: new combat_CombatStrategy().macro(slay_macro, $monsters(level7_templateObject19 || (level7_templateObject19 = level7_taggedTemplateLiteral(["modern zmobie, conjoined zmombie"])))),
    limit: {
      turns: 37
    }
  }, {
    name: "Alcove Boss",
    after: ["Alcove"],
    completed: () => property_get("cyrptAlcoveEvilness") === 0,
    do: $location(level7_templateObject20 || (level7_templateObject20 = level7_taggedTemplateLiteral(["The Defiled Alcove"]))),
    boss: true,
    combat: new combat_CombatStrategy().kill(),
    limit: {
      tries: 1
    }
  }];
  var Cranny = [{
    name: "Cranny",
    after: ["Start"],
    prepare: tuneCape,
    acquire: [{
      item: template_string_$item(level7_templateObject21 || (level7_templateObject21 = level7_taggedTemplateLiteral(["gravy boat"])))
    }],
    completed: () => property_get("cyrptCrannyEvilness") <= 13,
    do: $location(level7_templateObject22 || (level7_templateObject22 = level7_taggedTemplateLiteral(["The Defiled Cranny"]))),
    outfit: () => {
      return {
        equip: tryCape(template_string_$item(level7_templateObject23 || (level7_templateObject23 = level7_taggedTemplateLiteral(["serpentine sword"]))), template_string_$item(level7_templateObject24 || (level7_templateObject24 = level7_taggedTemplateLiteral(["gravy boat"])))),
        modifier: "-combat, ML, sword"
      };
    },
    choices: {
      523: 4
    },
    combat: new combat_CombatStrategy().macro(new Macro().trySkill(template_string_$skill(level7_templateObject25 || (level7_templateObject25 = level7_taggedTemplateLiteral(["Slay the Dead"])))).skill(template_string_$skill(level7_templateObject26 || (level7_templateObject26 = level7_taggedTemplateLiteral(["Saucegeyser"])))).repeat(), $monsters(level7_templateObject27 || (level7_templateObject27 = level7_taggedTemplateLiteral(["swarm of ghuol whelps, big swarm of ghuol whelps, giant swarm of ghuol whelps, huge ghuol"])))).macro(slay_macro),
    limit: {
      turns: 37
    }
  }, {
    name: "Cranny Boss",
    after: ["Cranny"],
    completed: () => property_get("cyrptCrannyEvilness") === 0,
    do: $location(level7_templateObject28 || (level7_templateObject28 = level7_taggedTemplateLiteral(["The Defiled Cranny"]))),
    boss: true,
    combat: new combat_CombatStrategy().killHard(),
    limit: {
      tries: 1
    }
  }];
  var Niche = [{
    name: "Niche",
    after: ["Start"],
    prepare: tuneCape,
    acquire: [{
      item: template_string_$item(level7_templateObject29 || (level7_templateObject29 = level7_taggedTemplateLiteral(["gravy boat"])))
    }],
    completed: () => property_get("cyrptNicheEvilness") <= 13,
    do: $location(level7_templateObject30 || (level7_templateObject30 = level7_taggedTemplateLiteral(["The Defiled Niche"]))),
    choices: {
      157: 4
    },
    outfit: () => {
      if (lib_have(template_string_$item(level7_templateObject31 || (level7_templateObject31 = level7_taggedTemplateLiteral(["industrial fire extinguisher"])))) && property_get("_fireExtinguisherCharge") >= 20 && !property_get("fireExtinguisherCyrptUsed")) return {
        equip: template_string_$items(level7_templateObject32 || (level7_templateObject32 = level7_taggedTemplateLiteral(["industrial fire extinguisher, gravy boat"])))
      };else return {
        equip: tryCape(template_string_$item(level7_templateObject33 || (level7_templateObject33 = level7_taggedTemplateLiteral(["serpentine sword"]))), template_string_$item(level7_templateObject34 || (level7_templateObject34 = level7_taggedTemplateLiteral(["gravy boat"]))))
      };
    },
    combat: new combat_CombatStrategy().macro(new Macro().trySkill(template_string_$skill(level7_templateObject35 || (level7_templateObject35 = level7_taggedTemplateLiteral(["Fire Extinguisher: Zone Specific"])))).step(slay_macro)).banish($monsters(level7_templateObject36 || (level7_templateObject36 = level7_taggedTemplateLiteral(["basic lihc, senile lihc, slick lihc"])))),
    limit: {
      turns: 37
    }
  }, {
    name: "Niche Boss",
    after: ["Niche"],
    completed: () => property_get("cyrptNicheEvilness") === 0,
    do: $location(level7_templateObject37 || (level7_templateObject37 = level7_taggedTemplateLiteral(["The Defiled Niche"]))),
    boss: true,
    combat: new combat_CombatStrategy().kill(),
    limit: {
      tries: 1
    }
  }];
  var Nook = [{
    name: "Nook",
    after: ["Start"],
    priority: () => property_get("lastCopyableMonster") === $monster(level7_templateObject38 || (level7_templateObject38 = level7_taggedTemplateLiteral(["spiny skelelton"]))),
    prepare: tuneCape,
    acquire: [{
      item: template_string_$item(level7_templateObject39 || (level7_templateObject39 = level7_taggedTemplateLiteral(["gravy boat"])))
    }],
    ready: () => (property_get("camelSpit") >= 100 || !lib_have(template_string_$familiar(level7_templateObject40 || (level7_templateObject40 = level7_taggedTemplateLiteral(["Melodramedary"]))))) && !farmingNookWithAutumnaton(),
    completed: () => property_get("cyrptNookEvilness") <= 13,
    do: () => {
      (0,external_kolmafia_namespaceObject.useSkill)(template_string_$skill(level7_templateObject41 || (level7_templateObject41 = level7_taggedTemplateLiteral(["Map the Monsters"]))));
  
      if (property_get("mappingMonsters")) {
        (0,external_kolmafia_namespaceObject.visitUrl)((0,external_kolmafia_namespaceObject.toUrl)($location(level7_templateObject42 || (level7_templateObject42 = level7_taggedTemplateLiteral(["The Defiled Nook"])))));
  
        if (property_get("lastCopyableMonster") === $monster(level7_templateObject43 || (level7_templateObject43 = level7_taggedTemplateLiteral(["spiny skelelton"])))) {
          (0,external_kolmafia_namespaceObject.runChoice)(1, "heyscriptswhatsupwinkwink=186"); // toothy skeleton
        } else {
          (0,external_kolmafia_namespaceObject.runChoice)(1, "heyscriptswhatsupwinkwink=185"); // spiny skelelton
        }
      } else {
        (0,external_kolmafia_namespaceObject.adv1)($location(level7_templateObject44 || (level7_templateObject44 = level7_taggedTemplateLiteral(["The Defiled Nook"]))), 0, "");
      }
    },
    post: () => {
      while (lib_have(template_string_$item(level7_templateObject45 || (level7_templateObject45 = level7_taggedTemplateLiteral(["evil eye"])))) && property_get("cyrptNookEvilness") > 25) {
        (0,external_kolmafia_namespaceObject.cliExecute)("use * evil eye");
      }
    },
    outfit: () => {
      return {
        equip: tryCape(template_string_$item(level7_templateObject46 || (level7_templateObject46 = level7_taggedTemplateLiteral(["costume sword"]))), template_string_$item(level7_templateObject47 || (level7_templateObject47 = level7_taggedTemplateLiteral(["gravy boat"])))),
        modifier: "item 500max",
        familiar: template_string_$familiar(level7_templateObject48 || (level7_templateObject48 = level7_taggedTemplateLiteral(["Melodramedary"]))),
        skipDefaults: true
      };
    },
    choices: {
      155: 5,
      1429: 1
    },
    combat: new combat_CombatStrategy().macro(() => {
      if (property_get("lastCopyableMonster") === $monster(level7_templateObject49 || (level7_templateObject49 = level7_taggedTemplateLiteral(["party skelteon"])))) return new Macro().trySkill(template_string_$skill(level7_templateObject50 || (level7_templateObject50 = level7_taggedTemplateLiteral(["Feel Nostalgic"])))).trySkill(template_string_$skill(level7_templateObject51 || (level7_templateObject51 = level7_taggedTemplateLiteral(["%fn, spit on them!"])))).trySkill(template_string_$skill(level7_templateObject52 || (level7_templateObject52 = level7_taggedTemplateLiteral(["Feel Envy"])))).step(slay_macro);else return new Macro().trySkill(template_string_$skill(level7_templateObject53 || (level7_templateObject53 = level7_taggedTemplateLiteral(["Feel Envy"])))).step(slay_macro);
    }, $monster(level7_templateObject54 || (level7_templateObject54 = level7_taggedTemplateLiteral(["spiny skelelton"])))).macro(() => {
      if (property_get("lastCopyableMonster") === $monster(level7_templateObject55 || (level7_templateObject55 = level7_taggedTemplateLiteral(["spiny skelelton"])))) return new Macro().trySkill(template_string_$skill(level7_templateObject56 || (level7_templateObject56 = level7_taggedTemplateLiteral(["Feel Nostalgic"])))).trySkill(template_string_$skill(level7_templateObject57 || (level7_templateObject57 = level7_taggedTemplateLiteral(["%fn, spit on them!"])))).trySkill(template_string_$skill(level7_templateObject58 || (level7_templateObject58 = level7_taggedTemplateLiteral(["Feel Envy"])))).step(slay_macro);else return new Macro().trySkill(template_string_$skill(level7_templateObject59 || (level7_templateObject59 = level7_taggedTemplateLiteral(["Feel Envy"])))).step(slay_macro);
    }, $monster(level7_templateObject60 || (level7_templateObject60 = level7_taggedTemplateLiteral(["toothy sklelton"])))).banish($monster(level7_templateObject61 || (level7_templateObject61 = level7_taggedTemplateLiteral(["party skelteon"])))),
    limit: {
      tries: 3
    }
  }, {
    name: "Nook Eye",
    // In case we get eyes from outside sources (Nostalgia)
    after: ["Start"],
    ready: () => lib_have(template_string_$item(level7_templateObject62 || (level7_templateObject62 = level7_taggedTemplateLiteral(["evil eye"])))),
    completed: () => property_get("cyrptNookEvilness") <= 13,
    do: () => {
      (0,external_kolmafia_namespaceObject.cliExecute)("use * evil eye");
    },
    freeaction: true,
    limit: {
      tries: 9
    }
  }, {
    name: "Nook Simple",
    after: ["Start"],
    prepare: tuneCape,
    acquire: [{
      item: template_string_$item(level7_templateObject63 || (level7_templateObject63 = level7_taggedTemplateLiteral(["gravy boat"])))
    }],
    priority: () => property_get("hasAutumnaton"),
    ready: () => (property_get("cyrptNookEvilness") < 30 || property_get("hasAutumnaton")) && !lib_have(template_string_$item(level7_templateObject64 || (level7_templateObject64 = level7_taggedTemplateLiteral(["evil eye"])))) && !farmingNookWithAutumnaton(),
    completed: () => property_get("cyrptNookEvilness") <= 13,
    do: $location(level7_templateObject65 || (level7_templateObject65 = level7_taggedTemplateLiteral(["The Defiled Nook"]))),
    post: () => {
      while (lib_have(template_string_$item(level7_templateObject66 || (level7_templateObject66 = level7_taggedTemplateLiteral(["evil eye"])))) && property_get("cyrptNookEvilness") > 13) {
        (0,external_kolmafia_namespaceObject.cliExecute)("use * evil eye");
      }
    },
    outfit: () => {
      return {
        equip: tryCape(template_string_$item(level7_templateObject67 || (level7_templateObject67 = level7_taggedTemplateLiteral(["costume sword"]))), template_string_$item(level7_templateObject68 || (level7_templateObject68 = level7_taggedTemplateLiteral(["gravy boat"])))),
        modifier: "item 500max"
      };
    },
    choices: {
      155: 5,
      1429: 1
    },
    combat: new combat_CombatStrategy().macro(slay_macro, $monsters(level7_templateObject69 || (level7_templateObject69 = level7_taggedTemplateLiteral(["spiny skelelton, toothy sklelton"])))).banish($monster(level7_templateObject70 || (level7_templateObject70 = level7_taggedTemplateLiteral(["party skelteon"])))),
    limit: {
      tries: 9
    }
  }, {
    name: "Nook Boss",
    after: ["Nook", "Nook Eye", "Nook Simple"],
    ready: () => !farmingNookWithAutumnaton(),
    completed: () => property_get("cyrptNookEvilness") === 0,
    do: $location(level7_templateObject71 || (level7_templateObject71 = level7_taggedTemplateLiteral(["The Defiled Nook"]))),
    boss: true,
    combat: new combat_CombatStrategy().kill(),
    limit: {
      tries: 1
    }
  }];
  var CryptQuest = {
    name: "Crypt",
    tasks: [{
      name: "Start",
      after: ["Toot/Finish"],
      ready: () => (0,external_kolmafia_namespaceObject.myLevel)() >= 7,
      priority: () => property_get("hasAutumnaton"),
      completed: () => step("questL07Cyrptic") !== -1,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        tries: 1
      },
      freeaction: true
    }].concat(Alcove, Cranny, Niche, Nook, [{
      name: "Bonerdagon",
      after: ["Alcove Boss", "Cranny Boss", "Niche Boss", "Nook Boss"],
      completed: () => step("questL07Cyrptic") >= 1,
      do: () => {
        (0,external_kolmafia_namespaceObject.adv1)($location(level7_templateObject72 || (level7_templateObject72 = level7_taggedTemplateLiteral(["Haert of the Cyrpt"]))), -1, "");
        if (property_get("lastEncounter") !== "The Bonerdagon") (0,external_kolmafia_namespaceObject.visitUrl)((0,external_kolmafia_namespaceObject.toUrl)($location(_templateObject73 || (_templateObject73 = level7_taggedTemplateLiteral(["The Defiled Cranny"])))));
      },
      choices: {
        527: 1
      },
      boss: true,
      combat: new combat_CombatStrategy().kill(),
      limit: {
        tries: 2
      }
    }, {
      name: "Finish",
      after: ["Bonerdagon"],
      completed: () => step("questL07Cyrptic") === 999,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        tries: 1
      },
      freeaction: true
    }])
  };
  ;// CONCATENATED MODULE: ./src/tasks/level8.ts
  var level8_templateObject, level8_templateObject2, level8_templateObject3, level8_templateObject4, level8_templateObject5, level8_templateObject6, level8_templateObject7, level8_templateObject8, level8_templateObject9, level8_templateObject10, level8_templateObject11, level8_templateObject12, level8_templateObject13, level8_templateObject14, level8_templateObject15, level8_templateObject16, level8_templateObject17, level8_templateObject18;
  
  function level8_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  var McLargeHugeQuest = {
    name: "McLargeHuge",
    tasks: [{
      name: "Start",
      after: ["Toot/Finish"],
      ready: () => (0,external_kolmafia_namespaceObject.myLevel)() >= 8,
      completed: () => step("questL08Trapper") !== -1,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Ores",
      after: ["Start"],
      acquire: [{
        item: template_string_$item(level8_templateObject || (level8_templateObject = level8_taggedTemplateLiteral(["asbestos ore"]))),
        num: 3
      }, {
        item: template_string_$item(level8_templateObject2 || (level8_templateObject2 = level8_taggedTemplateLiteral(["chrome ore"]))),
        num: 3
      }, {
        item: template_string_$item(level8_templateObject3 || (level8_templateObject3 = level8_taggedTemplateLiteral(["linoleum ore"]))),
        num: 3
      }, {
        item: template_string_$item(level8_templateObject4 || (level8_templateObject4 = level8_taggedTemplateLiteral(["goat cheese"]))),
        num: 3
      }],
      completed: () => step("questL08Trapper") >= 2,
      do: () => {
        (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=mclargehuge&action=trappercabin"); // request ore
  
        (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=mclargehuge&action=trappercabin"); // provide
      },
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Extreme Snowboard",
      after: ["Ores"],
      acquire: [{
        item: template_string_$item(level8_templateObject5 || (level8_templateObject5 = level8_taggedTemplateLiteral(["eXtreme mittens"])))
      }, {
        item: template_string_$item(level8_templateObject6 || (level8_templateObject6 = level8_taggedTemplateLiteral(["snowboarder pants"])))
      }, {
        item: template_string_$item(level8_templateObject7 || (level8_templateObject7 = level8_taggedTemplateLiteral(["eXtreme scarf"])))
      }],
      completed: () => property_get("currentExtremity") >= 3 || step("questL08Trapper") >= 3,
      do: $location(level8_templateObject8 || (level8_templateObject8 = level8_taggedTemplateLiteral(["The eXtreme Slope"]))),
      outfit: () => {
        if (haveHugeLarge()) return {
          // eslint-disable-next-line libram/verify-constants
          equip: template_string_$items(level8_templateObject9 || (level8_templateObject9 = level8_taggedTemplateLiteral(["McHugeLarge left pole, McHugeLarge right pole, McHugeLarge left ski, McHugeLarge right ski, McHugeLarge duffel bag"]))),
          modifier: "-combat"
        };
        return {
          equip: template_string_$items(level8_templateObject10 || (level8_templateObject10 = level8_taggedTemplateLiteral(["eXtreme mittens, snowboarder pants, eXtreme scarf"]))),
          modifier: "-combat"
        };
      },
      limit: {
        soft: 30
      }
    }, {
      name: "Climb",
      after: ["Ores", "Extreme Snowboard"],
      completed: () => step("questL08Trapper") >= 3,
      do: () => {
        (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=mclargehuge&action=cloudypeak");
      },
      outfit: () => {
        if (haveHugeLarge()) return {
          // eslint-disable-next-line libram/verify-constants
          equip: template_string_$items(level8_templateObject11 || (level8_templateObject11 = level8_taggedTemplateLiteral(["McHugeLarge left pole, McHugeLarge right pole, McHugeLarge left ski, McHugeLarge right ski, McHugeLarge duffel bag"]))),
          modifier: "-combat"
        };
        return {
          equip: template_string_$items(level8_templateObject12 || (level8_templateObject12 = level8_taggedTemplateLiteral(["eXtreme mittens, snowboarder pants, eXtreme scarf"]))),
          modifier: "-combat"
        };
      },
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Peak",
      after: ["Climb"],
      completed: () => step("questL08Trapper") >= 5,
      do: $location(level8_templateObject13 || (level8_templateObject13 = level8_taggedTemplateLiteral(["Mist-Shrouded Peak"]))),
      outfit: {
        modifier: "cold res 5min"
      },
      boss: true,
      combat: new combat_CombatStrategy().kill(),
      limit: {
        tries: 4
      }
    }, {
      name: "Finish",
      after: ["Peak"],
      completed: () => step("questL08Trapper") === 999,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=mclargehuge&action=trappercabin"),
      limit: {
        tries: 1
      },
      freeaction: true
    }]
  };
  
  function haveHugeLarge() {
    return (// eslint-disable-next-line libram/verify-constants
      lib_have(template_string_$item(level8_templateObject14 || (level8_templateObject14 = level8_taggedTemplateLiteral(["McHugeLarge left pole"])))) && // eslint-disable-next-line libram/verify-constants
      lib_have(template_string_$item(level8_templateObject15 || (level8_templateObject15 = level8_taggedTemplateLiteral(["McHugeLarge right pole"])))) && // eslint-disable-next-line libram/verify-constants
      lib_have(template_string_$item(level8_templateObject16 || (level8_templateObject16 = level8_taggedTemplateLiteral(["McHugeLarge left ski"])))) && // eslint-disable-next-line libram/verify-constants
      lib_have(template_string_$item(level8_templateObject17 || (level8_templateObject17 = level8_taggedTemplateLiteral(["McHugeLarge right ski"])))) && // eslint-disable-next-line libram/verify-constants
      lib_have(template_string_$item(level8_templateObject18 || (level8_templateObject18 = level8_taggedTemplateLiteral(["McHugeLarge duffel bag"]))))
    );
  }
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/Copier.js
  function Copier_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function Copier_createClass(Constructor, protoProps, staticProps) { if (protoProps) Copier_defineProperties(Constructor.prototype, protoProps); if (staticProps) Copier_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function Copier_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function Copier_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  var Copier = /*#__PURE__*/Copier_createClass(function Copier(couldCopy, prepare, canCopy, copiedMonster, fightCopy) {
    Copier_classCallCheck(this, Copier);
  
    Copier_defineProperty(this, "couldCopy", void 0);
  
    Copier_defineProperty(this, "prepare", void 0);
  
    Copier_defineProperty(this, "canCopy", void 0);
  
    Copier_defineProperty(this, "copiedMonster", void 0);
  
    Copier_defineProperty(this, "fightCopy", null);
  
    this.couldCopy = couldCopy;
    this.prepare = prepare;
    this.canCopy = canCopy;
    this.copiedMonster = copiedMonster;
    if (fightCopy) this.fightCopy = fightCopy;
  });
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2016/SourceTerminal.js
  var SourceTerminal_templateObject, SourceTerminal_templateObject2, SourceTerminal_templateObject3, SourceTerminal_templateObject4, SourceTerminal_templateObject5, SourceTerminal_templateObject6, SourceTerminal_templateObject7, SourceTerminal_templateObject8, SourceTerminal_templateObject9, SourceTerminal_templateObject10, SourceTerminal_templateObject11, SourceTerminal_templateObject12, SourceTerminal_templateObject13, SourceTerminal_templateObject14, SourceTerminal_templateObject15, SourceTerminal_templateObject16, SourceTerminal_templateObject17, SourceTerminal_templateObject18, SourceTerminal_templateObject19, SourceTerminal_templateObject20, SourceTerminal_templateObject21, SourceTerminal_templateObject22, SourceTerminal_templateObject23, SourceTerminal_templateObject24, SourceTerminal_templateObject25, SourceTerminal_templateObject26, SourceTerminal_templateObject27;
  
  function SourceTerminal_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = SourceTerminal_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  
  function SourceTerminal_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return SourceTerminal_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return SourceTerminal_arrayLikeToArray(o, minLen); }
  
  function SourceTerminal_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function SourceTerminal_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  
  
  var item = template_string_$item(SourceTerminal_templateObject || (SourceTerminal_templateObject = SourceTerminal_taggedTemplateLiteral(["Source terminal"])));
  /**
   * @returns Is the terminal currently installed & available in our campground?
   */
  
  function SourceTerminal_have() {
    return haveInCampground(item);
  }
  /**
   * Buffs that can be acquired from Enhance
   *
   * - Items: +30% Item Drop
   * - Meat: +60% Meat Drop
   * - Init: +50% Initiative
   * - Critical: +10% chance of Critical Hit, +10% chance of Spell Critical Hit
   * - Damage: +5 Prismatic Damage
   * - Substats: +3 Stats Per Fight
   */
  
  var Buffs = {
    Items: template_string_$effect(SourceTerminal_templateObject2 || (SourceTerminal_templateObject2 = SourceTerminal_taggedTemplateLiteral(["items.enh"]))),
    Meat: template_string_$effect(SourceTerminal_templateObject3 || (SourceTerminal_templateObject3 = SourceTerminal_taggedTemplateLiteral(["meat.enh"]))),
    Init: template_string_$effect(SourceTerminal_templateObject4 || (SourceTerminal_templateObject4 = SourceTerminal_taggedTemplateLiteral(["init.enh"]))),
    Critical: template_string_$effect(SourceTerminal_templateObject5 || (SourceTerminal_templateObject5 = SourceTerminal_taggedTemplateLiteral(["critical.enh"]))),
    Damage: template_string_$effect(SourceTerminal_templateObject6 || (SourceTerminal_templateObject6 = SourceTerminal_taggedTemplateLiteral(["damage.enh"]))),
    Substats: template_string_$effect(SourceTerminal_templateObject7 || (SourceTerminal_templateObject7 = SourceTerminal_taggedTemplateLiteral(["substats.enh"])))
  };
  /**
   * Acquire a buff from the Source Terminal
   *
   * @param buff The buff to acquire
   * @see Buffs
   * @returns Whether we successfully acquired the buff
   */
  
  function enhance(buff) {
    if (!Object.values(Buffs).includes(buff)) {
      return false;
    }
  
    return cliExecute("terminal enhance ".concat(buff.name));
  }
  /**
   * Rollover buffs that can be acquired from Enquiry
   */
  
  var RolloverBuffs = {
    /** +5 Familiar Weight */
    Familiar: template_string_$effect(SourceTerminal_templateObject8 || (SourceTerminal_templateObject8 = SourceTerminal_taggedTemplateLiteral(["familiar.enq"]))),
  
    /** +25 ML */
    Monsters: template_string_$effect(SourceTerminal_templateObject9 || (SourceTerminal_templateObject9 = SourceTerminal_taggedTemplateLiteral(["monsters.enq"]))),
  
    /** +5 Prismatic Resistance */
    Protect: template_string_$effect(SourceTerminal_templateObject10 || (SourceTerminal_templateObject10 = SourceTerminal_taggedTemplateLiteral(["protect.enq"]))),
  
    /** +100% Muscle, +100% Mysticality, +100% Moxie */
    Stats: template_string_$effect(SourceTerminal_templateObject11 || (SourceTerminal_templateObject11 = SourceTerminal_taggedTemplateLiteral(["stats.enq"])))
  };
  /**
   * Acquire a buff from the Source Terminal
   *
   * @param rolloverBuff The buff to acquire
   * @see RolloverBuffs
   * @returns Whether we successfully `enquire`d the terminal for our rollover buff
   */
  
  function enquiry(rolloverBuff) {
    if (!Object.values(RolloverBuffs).includes(rolloverBuff)) {
      return false;
    }
  
    return cliExecute("terminal enquiry ".concat(rolloverBuff.name));
  }
  /**
   * Skills that can be acquired from Enhance
   */
  
  var Skills = {
    /** Collect Source essence from enemies once per combat */
    Extract: template_string_$skill(SourceTerminal_templateObject12 || (SourceTerminal_templateObject12 = SourceTerminal_taggedTemplateLiteral(["Extract"]))),
  
    /** Stagger and create a wandering monster 1-3 times per day */
    Digitize: template_string_$skill(SourceTerminal_templateObject13 || (SourceTerminal_templateObject13 = SourceTerminal_taggedTemplateLiteral(["Digitize"]))),
  
    /** Stagger and deal 25% of enemy HP in damage once per combat */
    Compress: template_string_$skill(SourceTerminal_templateObject14 || (SourceTerminal_templateObject14 = SourceTerminal_taggedTemplateLiteral(["Compress"]))),
  
    /** Double monster's HP, attack, defence, attacks per round and item drops once per fight and once per day (five in The Source) */
    Duplicate: template_string_$skill(SourceTerminal_templateObject15 || (SourceTerminal_templateObject15 = SourceTerminal_taggedTemplateLiteral(["Duplicate"]))),
  
    /** Causes government agent/Source Agent wanderer next turn once per combat and three times per day */
    Portscan: template_string_$skill(SourceTerminal_templateObject16 || (SourceTerminal_templateObject16 = SourceTerminal_taggedTemplateLiteral(["Portscan"]))),
  
    /** Increase Max MP by 100% and recover 1000 MP once per combat with a 30 turn cooldown */
    Turbo: template_string_$skill(SourceTerminal_templateObject17 || (SourceTerminal_templateObject17 = SourceTerminal_taggedTemplateLiteral(["Turbo"])))
  };
  /**
   * Make a skill available.
   * The Source Terminal can give the player access to two skills at any time
   *
   * @param skills Skill or 2-tuple of Skills to learn
   * @see Skills
   * @returns Whether our current skills match the ones we asked for
   */
  
  function educate(skills) {
    var skillsArray = Array.isArray(skills) ? skills.slice(0, 2) : [skills];
    if (arrayEquals(skillsArray, getSkills())) return true;
  
    var _iterator = SourceTerminal_createForOfIteratorHelper(skillsArray),
        _step;
  
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var skill = _step.value;
        if (!Object.values(Skills).includes(skill)) return false;
        (0,external_kolmafia_namespaceObject.cliExecute)("terminal educate ".concat(skill.name.toLowerCase(), ".edu"));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  
    return true;
  }
  /**
   * @returns The Skills currently available from Source Terminal
   */
  
  function getSkills() {
    return ["sourceTerminalEducate1", "sourceTerminalEducate2"].map(p => property_get(p)).filter(Boolean).map(s => external_kolmafia_namespaceObject.Skill.get(s.slice(0, -4)));
  }
  /**
   * @param skills A Skill or 2-tuple of Skills to check if we currently have active
   * @returns Whether the input agrees with our current skills
   */
  
  function isCurrentSkill(skills) {
    var currentSkills = getSkills();
    var skillsArray = Array.isArray(skills) ? skills.slice(0, 2) : [skills];
    return skillsArray.every(skill => currentSkills.includes(skill));
  }
  /**
   * Items that can be generated by the Source Terminal
   */
  
  var Items = new Map([[template_string_$item(SourceTerminal_templateObject18 || (SourceTerminal_templateObject18 = SourceTerminal_taggedTemplateLiteral(["browser cookie"]))), "food.ext"], [template_string_$item(SourceTerminal_templateObject19 || (SourceTerminal_templateObject19 = SourceTerminal_taggedTemplateLiteral(["hacked gibson"]))), "booze.ext"], [template_string_$item(SourceTerminal_templateObject20 || (SourceTerminal_templateObject20 = SourceTerminal_taggedTemplateLiteral(["Source shades"]))), "goggles.ext"], [template_string_$item(SourceTerminal_templateObject21 || (SourceTerminal_templateObject21 = SourceTerminal_taggedTemplateLiteral(["Source terminal GRAM chip"]))), "gram.ext"], [template_string_$item(SourceTerminal_templateObject22 || (SourceTerminal_templateObject22 = SourceTerminal_taggedTemplateLiteral(["Source terminal PRAM chip"]))), "pram.ext"], [template_string_$item(SourceTerminal_templateObject23 || (SourceTerminal_templateObject23 = SourceTerminal_taggedTemplateLiteral(["Source terminal SPAM chip"]))), "spam.ext"], [template_string_$item(SourceTerminal_templateObject24 || (SourceTerminal_templateObject24 = SourceTerminal_taggedTemplateLiteral(["Source terminal CRAM chip"]))), "cram.ext"], [template_string_$item(SourceTerminal_templateObject25 || (SourceTerminal_templateObject25 = SourceTerminal_taggedTemplateLiteral(["Source terminal DRAM chip"]))), "dram.ext"], [template_string_$item(SourceTerminal_templateObject26 || (SourceTerminal_templateObject26 = SourceTerminal_taggedTemplateLiteral(["Source terminal TRAM chip"]))), "tram.ext"], [template_string_$item(SourceTerminal_templateObject27 || (SourceTerminal_templateObject27 = SourceTerminal_taggedTemplateLiteral(["software bug"]))), "familiar.ext"]]);
  /**
   * Collect an item from the Source Terminal (up to three times a day)
   *
   * @param item Item to collect
   * @see Items
   * @returns Whether the `cliExecute` succeeded
   */
  
  function extrude(item) {
    var fileName = Items.get(item);
    if (!fileName) return false;
    return cliExecute("terminal extrude ".concat(fileName));
  }
  /**
   * @returns chips currently installed to player's Source Terminal
   */
  
  function getChips() {
    return property_get("sourceTerminalChips").split(",");
  }
  /**
   * @returns number of times digitize was cast today
   */
  
  function getDigitizeUses() {
    return property_get("_sourceTerminalDigitizeUses");
  }
  /**
   * @returns Monster that is currently digitized, else `null`
   */
  
  function getDigitizeMonster() {
    return property_get("_sourceTerminalDigitizeMonster");
  }
  /**
   * @returns number of digitized monsters encountered since it was last cast
   */
  
  function getDigitizeMonsterCount() {
    return get("_sourceTerminalDigitizeMonsterCount");
  }
  /**
   * @returns maximum number of digitizes player can cast
   */
  
  function getMaximumDigitizeUses() {
    var chips = getChips();
    return 1 + (chips.includes("TRAM") ? 1 : 0) + (chips.includes("TRIGRAM") ? 1 : 0);
  }
  /**
   * @returns the current day's number of remaining digitize uses
   */
  
  function getDigitizeUsesRemaining() {
    return getMaximumDigitizeUses() - getDigitizeUses();
  }
  /**
   * @returns whether the player could theoretically cast Digitize
   */
  
  function couldDigitize() {
    return getDigitizeUses() < getMaximumDigitizeUses();
  }
  /**
   * Sets Digitize to be one of our skills if it currently isn't
   *
   * @returns Whether we expect that Digitize is one of our active skills now
   */
  
  function prepareDigitize() {
    if (!isCurrentSkill(Skills.Digitize)) {
      return educate(Skills.Digitize);
    }
  
    return true;
  }
  /**
   * Determines whether the player can cast Digitize immediately
   * This only considers whether the player has learned the skill
   * and has sufficient daily casts remaining, not whether they have sufficient MP
   *
   * @returns Whether the player can currently cast digitize, ignoring the MP cost but accounting for other factors
   */
  
  function canDigitize() {
    return couldDigitize() && getSkills().includes(Skills.Digitize);
  }
  var Digitize = new Copier(() => couldDigitize(), () => prepareDigitize(), () => canDigitize(), () => getDigitizeMonster());
  /**
   * @returns number of times duplicate was cast today
   */
  
  function getDuplicateUses() {
    return get("_sourceTerminalDuplicateUses");
  }
  /**
   * @returns number of times enhance was cast today
   */
  
  function getEnhanceUses() {
    return get("_sourceTerminalEnhanceUses");
  }
  /**
   * @returns number of times portscan was cast today
   */
  
  function getPortscanUses() {
    return get("_sourceTerminalPortscanUses");
  }
  /**
   * @returns maximum number of times duplicate can be used
   */
  
  function maximumDuplicateUses() {
    return myPath() === Path.get("The Source") ? 5 : 1;
  }
  /**
   * @returns number of remaining times duplicate can be used today
   */
  
  function duplicateUsesRemaining() {
    return maximumDuplicateUses() - getDuplicateUses();
  }
  /**
   * @returns number of times enhance can be used per day
   */
  
  function maximumEnhanceUses() {
    return 1 + getChips().filter(chip => ["CRAM", "SCRAM"].includes(chip)).length;
  }
  /**
   * @returns number of remaining times enahce can be used today
   */
  
  function enhanceUsesRemaining() {
    return maximumEnhanceUses() - getEnhanceUses();
  }
  /**
   * @returns expected duration of an enhance buff
   */
  
  function enhanceBuffDuration() {
    return 25 + get("sourceTerminalPram") * 5 + (getChips().includes("INGRAM") ? 25 : 0);
  }
  /**
   * @returns expected duration of an enquiry buff
   */
  
  function enquiryBuffDuration() {
    return 50 + 10 * get("sourceTerminalGram") + (getChips().includes("DIAGRAM") ? 50 : 0);
  }
  ;// CONCATENATED MODULE: ./src/tasks/level9.ts
  var level9_templateObject, level9_templateObject2, level9_templateObject3, level9_templateObject4, level9_templateObject5, level9_templateObject6, level9_templateObject7, level9_templateObject8, level9_templateObject9, level9_templateObject10, level9_templateObject11, level9_templateObject12, level9_templateObject13, level9_templateObject14, level9_templateObject15, level9_templateObject16, level9_templateObject17, level9_templateObject18, level9_templateObject19, level9_templateObject20, level9_templateObject21, level9_templateObject22, level9_templateObject23, level9_templateObject24, level9_templateObject25, level9_templateObject26, level9_templateObject27, level9_templateObject28, level9_templateObject29, level9_templateObject30, level9_templateObject31, level9_templateObject32, level9_templateObject33, level9_templateObject34, level9_templateObject35, level9_templateObject36, level9_templateObject37, level9_templateObject38;
  
  function level9_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  var ABoo = [{
    name: "ABoo Start",
    after: ["Start Peaks"],
    completed: () => $location(level9_templateObject || (level9_templateObject = level9_taggedTemplateLiteral(["A-Boo Peak"]))).noncombatQueue.includes("Faction Traction = Inaction") || property_get("booPeakProgress") < 50,
    do: $location(level9_templateObject2 || (level9_templateObject2 = level9_taggedTemplateLiteral(["A-Boo Peak"]))),
    limit: {
      tries: 1
    }
  }, {
    name: "ABoo Clues",
    after: ["ABoo Start"],
    acquire: [{
      item: template_string_$item(level9_templateObject3 || (level9_templateObject3 = level9_taggedTemplateLiteral(["yellow rocket"]))),
      useful: () => !lib_have(template_string_$effect(level9_templateObject4 || (level9_templateObject4 = level9_taggedTemplateLiteral(["Everything Looks Yellow"]))))
    }],
    priority: () => property_get("lastCopyableMonster") === $monster(level9_templateObject5 || (level9_templateObject5 = level9_taggedTemplateLiteral(["toothy sklelton"]))),
    // After Defiled Nook
    completed: () => (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(level9_templateObject6 || (level9_templateObject6 = level9_taggedTemplateLiteral(["A-Boo clue"])))) * 30 >= property_get("booPeakProgress"),
    prepare: () => {
      if (!isCurrentSkill(template_string_$skill(level9_templateObject7 || (level9_templateObject7 = level9_taggedTemplateLiteral(["Duplicate"]))))) educate([template_string_$skill(level9_templateObject8 || (level9_templateObject8 = level9_taggedTemplateLiteral(["Duplicate"]))), template_string_$skill(level9_templateObject9 || (level9_templateObject9 = level9_taggedTemplateLiteral(["Digitize"])))]);
    },
    do: $location(level9_templateObject10 || (level9_templateObject10 = level9_taggedTemplateLiteral(["A-Boo Peak"]))),
    outfit: () => {
      if ($location(level9_templateObject11 || (level9_templateObject11 = level9_taggedTemplateLiteral(["A-Boo Peak"]))).turnsSpent === 0 && $location(level9_templateObject12 || (level9_templateObject12 = level9_taggedTemplateLiteral(["Twin Peak"]))).turnsSpent === 0 && $location(level9_templateObject13 || (level9_templateObject13 = level9_taggedTemplateLiteral(["Oil Peak"]))).turnsSpent === 0 && lib_have(template_string_$skill(level9_templateObject14 || (level9_templateObject14 = level9_taggedTemplateLiteral(["Comprehensive Cartography"]))))) {
        // Prepare for Ghostly Memories (1430)
        return {
          modifier: "spooky res, cold res, HP"
        };
      } else {
        return {
          modifier: "item 667max",
          equip: template_string_$items(level9_templateObject15 || (level9_templateObject15 = level9_taggedTemplateLiteral(["A Light that Never Goes Out"]))),
          skipDefaults: true
        };
      }
    },
    effects: $effects(level9_templateObject16 || (level9_templateObject16 = level9_taggedTemplateLiteral(["Merry Smithsness"]))),
    combat: new combat_CombatStrategy().macro(() => {
      if (property_get("lastCopyableMonster") === $monster(level9_templateObject17 || (level9_templateObject17 = level9_taggedTemplateLiteral(["toothy sklelton"])))) {
        return new Macro().trySkill(template_string_$skill(level9_templateObject18 || (level9_templateObject18 = level9_taggedTemplateLiteral(["Feel Nostalgic"])))).trySkill("Duplicate").tryItem("yellow rocket");
      } else {
        return new Macro().trySkill(template_string_$skill(level9_templateObject19 || (level9_templateObject19 = level9_taggedTemplateLiteral(["Feel Envy"])))).trySkill(template_string_$skill(level9_templateObject20 || (level9_templateObject20 = level9_taggedTemplateLiteral(["Saucegeyser"])))).repeat();
      }
    }).killHard(),
    choices: {
      611: 1,
      1430: 1
    },
    limit: {
      tries: 4
    }
  }, {
    name: "ABoo Horror",
    after: ["ABoo Clues"],
    ready: () => lib_have(template_string_$item(level9_templateObject21 || (level9_templateObject21 = level9_taggedTemplateLiteral(["A-Boo clue"])))),
    completed: () => property_get("booPeakProgress") === 0,
    prepare: () => {
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(level9_templateObject22 || (level9_templateObject22 = level9_taggedTemplateLiteral(["A-Boo clue"]))));
    },
    do: $location(level9_templateObject23 || (level9_templateObject23 = level9_taggedTemplateLiteral(["A-Boo Peak"]))),
    outfit: {
      modifier: "spooky res, cold res, HP"
    },
    choices: {
      611: 1
    },
    limit: {
      tries: 4
    }
  }, {
    name: "ABoo Peak",
    after: ["ABoo Horror"],
    completed: () => property_get("booPeakLit"),
    do: $location(level9_templateObject24 || (level9_templateObject24 = level9_taggedTemplateLiteral(["A-Boo Peak"]))),
    limit: {
      tries: 1
    }
  }];
  var Oil = [{
    name: "Oil Kill",
    after: ["Start Peaks"],
    completed: () => property_get("oilPeakProgress") === 0,
    do: $location(level9_templateObject25 || (level9_templateObject25 = level9_taggedTemplateLiteral(["Oil Peak"]))),
    outfit: {
      modifier: "ML"
    },
    combat: new combat_CombatStrategy().kill(),
    limit: {
      tries: 6
    }
  }, {
    name: "Oil Peak",
    after: ["Oil Kill"],
    completed: () => property_get("oilPeakLit"),
    do: $location(level9_templateObject26 || (level9_templateObject26 = level9_taggedTemplateLiteral(["Oil Peak"]))),
    limit: {
      tries: 1
    }
  }];
  var Twin = [{
    name: "Twin Stench",
    after: ["Start Peaks"],
    priority: () => property_get("hasAutumnaton"),
    completed: () => !!(property_get("twinPeakProgress") & 1),
    do: () => {
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(level9_templateObject27 || (level9_templateObject27 = level9_taggedTemplateLiteral(["rusty hedge trimmers"]))));
    },
    choices: {
      606: 1,
      607: 1
    },
    acquire: [{
      item: template_string_$item(level9_templateObject28 || (level9_templateObject28 = level9_taggedTemplateLiteral(["rusty hedge trimmers"])))
    }],
    outfit: {
      modifier: "stench res 4min"
    },
    limit: {
      tries: 1
    }
  }, {
    name: "Twin Item",
    after: ["Start Peaks"],
    completed: () => !!(property_get("twinPeakProgress") & 2),
    do: () => {
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(level9_templateObject29 || (level9_templateObject29 = level9_taggedTemplateLiteral(["rusty hedge trimmers"]))));
    },
    choices: {
      606: 2,
      608: 1
    },
    acquire: [{
      item: template_string_$item(level9_templateObject30 || (level9_templateObject30 = level9_taggedTemplateLiteral(["rusty hedge trimmers"])))
    }],
    outfit: {
      modifier: "item 50min"
    },
    limit: {
      tries: 1
    }
  }, {
    name: "Twin Oil",
    after: ["Start Peaks"],
    completed: () => !!(property_get("twinPeakProgress") & 4),
    do: () => {
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(level9_templateObject31 || (level9_templateObject31 = level9_taggedTemplateLiteral(["rusty hedge trimmers"]))));
    },
    choices: {
      606: 3,
      609: 1,
      616: 1
    },
    acquire: [{
      item: template_string_$item(level9_templateObject32 || (level9_templateObject32 = level9_taggedTemplateLiteral(["rusty hedge trimmers"])))
    }, {
      item: template_string_$item(level9_templateObject33 || (level9_templateObject33 = level9_taggedTemplateLiteral(["jar of oil"])))
    }],
    limit: {
      tries: 1
    }
  }, {
    name: "Twin Init",
    after: ["Twin Stench", "Twin Item", "Twin Oil"],
    completed: () => !!(property_get("twinPeakProgress") & 8),
    do: () => {
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(level9_templateObject34 || (level9_templateObject34 = level9_taggedTemplateLiteral(["rusty hedge trimmers"]))));
    },
    choices: {
      606: 4,
      610: 1,
      1056: 1
    },
    acquire: [{
      item: template_string_$item(level9_templateObject35 || (level9_templateObject35 = level9_taggedTemplateLiteral(["rusty hedge trimmers"])))
    }],
    limit: {
      tries: 1
    }
  }];
  var ChasmQuest = {
    name: "Orc Chasm",
    tasks: [{
      name: "Start",
      after: ["Toot/Finish"],
      priority: () => property_get("hasAutumnaton"),
      ready: () => (0,external_kolmafia_namespaceObject.myLevel)() >= 9,
      completed: () => step("questL09Topping") !== -1,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Bridge",
      after: ["Start"],
      priority: () => property_get("hasAutumnaton"),
      completed: () => step("questL09Topping") >= 1,
      do: () => {
        if (lib_have(template_string_$item(level9_templateObject36 || (level9_templateObject36 = level9_taggedTemplateLiteral(["fish hatchet"]))))) (0,external_kolmafia_namespaceObject.use)(template_string_$item(level9_templateObject37 || (level9_templateObject37 = level9_taggedTemplateLiteral(["fish hatchet"]))));
        (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=orc_chasm&action=bridge".concat(property_get("chasmBridgeProgress"))); // use existing materials
  
        var count = (0,external_kolmafia_namespaceObject.floor)((34 - property_get("chasmBridgeProgress")) / 5);
        if (count <= 0) return;
        (0,external_kolmafia_namespaceObject.cliExecute)("acquire ".concat(count, " snow boards"));
        (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=orc_chasm&action=bridge".concat(property_get("chasmBridgeProgress")));
      },
      acquire: [{
        item: template_string_$item(level9_templateObject38 || (level9_templateObject38 = level9_taggedTemplateLiteral(["snow berries"]))),
        num: 12
      }],
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Start Peaks",
      after: ["Bridge"],
      priority: () => property_get("hasAutumnaton"),
      completed: () => step("questL09Topping") >= 2,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=highlands&action=highlands_dude"),
      limit: {
        tries: 1
      },
      freeaction: true
    }].concat(ABoo, Oil, Twin, [{
      name: "Finish",
      after: ["ABoo Peak", "Oil Peak", "Twin Init"],
      completed: () => step("questL09Topping") === 999,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=highlands&action=highlands_dude"),
      limit: {
        tries: 1
      },
      freeaction: true
    }])
  };
  ;// CONCATENATED MODULE: ./src/tasks/level11_palindome.ts
  var level11_palindome_templateObject, level11_palindome_templateObject2, level11_palindome_templateObject3, level11_palindome_templateObject4, level11_palindome_templateObject5, level11_palindome_templateObject6, level11_palindome_templateObject7, level11_palindome_templateObject8, level11_palindome_templateObject9, level11_palindome_templateObject10, level11_palindome_templateObject11, level11_palindome_templateObject12, level11_palindome_templateObject13, level11_palindome_templateObject14, level11_palindome_templateObject15, level11_palindome_templateObject16, level11_palindome_templateObject17, level11_palindome_templateObject18, level11_palindome_templateObject19, level11_palindome_templateObject20, level11_palindome_templateObject21, level11_palindome_templateObject22, level11_palindome_templateObject23, level11_palindome_templateObject24, level11_palindome_templateObject25, level11_palindome_templateObject26, level11_palindome_templateObject27, level11_palindome_templateObject28, level11_palindome_templateObject29, level11_palindome_templateObject30, level11_palindome_templateObject31, level11_palindome_templateObject32, level11_palindome_templateObject33, level11_palindome_templateObject34, level11_palindome_templateObject35, level11_palindome_templateObject36, level11_palindome_templateObject37, level11_palindome_templateObject38, level11_palindome_templateObject39, level11_palindome_templateObject40, level11_palindome_templateObject41, level11_palindome_templateObject42, level11_palindome_templateObject43, level11_palindome_templateObject44, level11_palindome_templateObject45, level11_palindome_templateObject46, level11_palindome_templateObject47, level11_palindome_templateObject48, level11_palindome_templateObject49, level11_palindome_templateObject50, level11_palindome_templateObject51, level11_palindome_templateObject52, level11_palindome_templateObject53, level11_palindome_templateObject54, level11_palindome_templateObject55, level11_palindome_templateObject56, level11_palindome_templateObject57, level11_palindome_templateObject58, level11_palindome_templateObject59, level11_palindome_templateObject60, level11_palindome_templateObject61, level11_palindome_templateObject62, level11_palindome_templateObject63, level11_palindome_templateObject64, level11_palindome_templateObject65, level11_palindome_templateObject66, level11_palindome_templateObject67, level11_palindome_templateObject68, level11_palindome_templateObject69, level11_palindome_templateObject70, level11_palindome_templateObject71, level11_palindome_templateObject72, level11_palindome_templateObject73, _templateObject74, _templateObject75, _templateObject76, _templateObject77, _templateObject78, _templateObject79, _templateObject80;
  
  function level11_palindome_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  function shenItem(item) {
    return (// @ts-ignore
      property_get("shenQuestItem") === item.name && (step("questL11Shen") === 1 || step("questL11Shen") === 3 || step("questL11Shen") === 5)
    );
  }
  var Copperhead = [{
    name: "Copperhead Start",
    after: ["Macguffin/Diary"],
    completed: () => step("questL11Shen") >= 1,
    do: $location(level11_palindome_templateObject || (level11_palindome_templateObject = level11_palindome_taggedTemplateLiteral(["The Copperhead Club"]))),
    choices: {
      1074: 1
    },
    limit: {
      tries: 1
    }
  }, {
    name: "Copperhead",
    after: ["Copperhead Start"],
    ready: () => step("questL11Shen") === 2 || step("questL11Shen") === 4 || step("questL11Shen") === 6,
    completed: () => step("questL11Shen") === 999,
    do: $location(level11_palindome_templateObject2 || (level11_palindome_templateObject2 = level11_palindome_taggedTemplateLiteral(["The Copperhead Club"]))),
    choices: {
      852: 1,
      853: 1,
      854: 1
    },
    limit: {
      tries: 16
    }
  }, {
    name: "Bat Snake",
    after: ["Copperhead Start", "Bat/Use Sonar"],
    ready: () => shenItem(template_string_$item(level11_palindome_templateObject3 || (level11_palindome_templateObject3 = level11_palindome_taggedTemplateLiteral(["The Stankara Stone"])))),
    completed: () => step("questL11Shen") === 999 || lib_have(template_string_$item(level11_palindome_templateObject4 || (level11_palindome_templateObject4 = level11_palindome_taggedTemplateLiteral(["The Stankara Stone"])))),
    do: $location(level11_palindome_templateObject5 || (level11_palindome_templateObject5 = level11_palindome_taggedTemplateLiteral(["The Batrat and Ratbat Burrow"]))),
    combat: new combat_CombatStrategy().killHard($monster(level11_palindome_templateObject6 || (level11_palindome_templateObject6 = level11_palindome_taggedTemplateLiteral(["Batsnake"])))),
    limit: {
      soft: 10
    },
    delay: 5
  }, {
    name: "Cold Snake",
    after: ["Copperhead Start", "McLargeHuge/Ores"],
    ready: () => shenItem(template_string_$item(level11_palindome_templateObject7 || (level11_palindome_templateObject7 = level11_palindome_taggedTemplateLiteral(["The First Pizza"])))),
    completed: () => step("questL11Shen") === 999 || lib_have(template_string_$item(level11_palindome_templateObject8 || (level11_palindome_templateObject8 = level11_palindome_taggedTemplateLiteral(["The First Pizza"])))),
    do: $location(level11_palindome_templateObject9 || (level11_palindome_templateObject9 = level11_palindome_taggedTemplateLiteral(["Lair of the Ninja Snowmen"]))),
    combat: new combat_CombatStrategy().killHard($monster(level11_palindome_templateObject10 || (level11_palindome_templateObject10 = level11_palindome_taggedTemplateLiteral(["Frozen Solid Snake"])))).macro(() => {
      if (!lib_have(template_string_$item(level11_palindome_templateObject11 || (level11_palindome_templateObject11 = level11_palindome_taggedTemplateLiteral(["li'l ninja costume"]))))) return new Macro().attack().repeat();else return new Macro();
    }),
    limit: {
      soft: 10
    },
    delay: 5
  }, {
    name: "Hot Snake Precastle",
    after: ["Copperhead Start", "Giant/Ground"],
    ready: () => shenItem(template_string_$item(level11_palindome_templateObject12 || (level11_palindome_templateObject12 = level11_palindome_taggedTemplateLiteral(["Murphy's Rancid Black Flag"])))) && step("questL10Garbage") < 10,
    completed: () => step("questL11Shen") === 999 || lib_have(template_string_$item(level11_palindome_templateObject13 || (level11_palindome_templateObject13 = level11_palindome_taggedTemplateLiteral(["Murphy's Rancid Black Flag"])))),
    do: $location(level11_palindome_templateObject14 || (level11_palindome_templateObject14 = level11_palindome_taggedTemplateLiteral(["The Castle in the Clouds in the Sky (Top Floor)"]))),
    outfit: {
      equip: template_string_$items(level11_palindome_templateObject15 || (level11_palindome_templateObject15 = level11_palindome_taggedTemplateLiteral(["Mohawk wig"]))),
      modifier: "-combat"
    },
    choices: {
      675: 4,
      676: 4,
      677: 4,
      678: 1,
      679: 1,
      1431: 4
    },
    combat: new combat_CombatStrategy().killHard($monster(level11_palindome_templateObject16 || (level11_palindome_templateObject16 = level11_palindome_taggedTemplateLiteral(["Burning Snake of Fire"])))),
    limit: {
      soft: 10
    },
    delay: 5
  }, {
    name: "Hot Snake Postcastle",
    after: ["Copperhead Start", "Giant/Ground"],
    ready: () => shenItem(template_string_$item(level11_palindome_templateObject17 || (level11_palindome_templateObject17 = level11_palindome_taggedTemplateLiteral(["Murphy's Rancid Black Flag"])))) && step("questL10Garbage") >= 10,
    completed: () => step("questL11Shen") === 999 || lib_have(template_string_$item(level11_palindome_templateObject18 || (level11_palindome_templateObject18 = level11_palindome_taggedTemplateLiteral(["Murphy's Rancid Black Flag"])))),
    do: $location(level11_palindome_templateObject19 || (level11_palindome_templateObject19 = level11_palindome_taggedTemplateLiteral(["The Castle in the Clouds in the Sky (Top Floor)"]))),
    outfit: {
      modifier: "+combat"
    },
    combat: new combat_CombatStrategy().killHard($monster(level11_palindome_templateObject20 || (level11_palindome_templateObject20 = level11_palindome_taggedTemplateLiteral(["Burning Snake of Fire"])))),
    limit: {
      soft: 10
    },
    delay: 5
  }, {
    name: "Sleaze Star Snake",
    after: ["Copperhead Start", "Giant/Unlock HITS"],
    ready: () => shenItem(template_string_$item(level11_palindome_templateObject21 || (level11_palindome_templateObject21 = level11_palindome_taggedTemplateLiteral(["The Eye of the Stars"])))),
    completed: () => step("questL11Shen") === 999 || lib_have(template_string_$item(level11_palindome_templateObject22 || (level11_palindome_templateObject22 = level11_palindome_taggedTemplateLiteral(["The Eye of the Stars"])))),
    do: $location(level11_palindome_templateObject23 || (level11_palindome_templateObject23 = level11_palindome_taggedTemplateLiteral(["The Hole in the Sky"]))),
    combat: new combat_CombatStrategy().killHard($monster(level11_palindome_templateObject24 || (level11_palindome_templateObject24 = level11_palindome_taggedTemplateLiteral(["The Snake With Like Ten Heads"])))),
    limit: {
      soft: 10
    },
    delay: 5
  }, {
    name: "Sleaze Frat Snake",
    after: ["Copperhead Start"],
    ready: () => shenItem(template_string_$item(level11_palindome_templateObject25 || (level11_palindome_templateObject25 = level11_palindome_taggedTemplateLiteral(["The Lacrosse Stick of Lacoronado"])))),
    completed: () => step("questL11Shen") === 999 || lib_have(template_string_$item(level11_palindome_templateObject26 || (level11_palindome_templateObject26 = level11_palindome_taggedTemplateLiteral(["The Lacrosse Stick of Lacoronado"])))),
    do: $location(level11_palindome_templateObject27 || (level11_palindome_templateObject27 = level11_palindome_taggedTemplateLiteral(["The Smut Orc Logging Camp"]))),
    combat: new combat_CombatStrategy().killHard($monster(level11_palindome_templateObject28 || (level11_palindome_templateObject28 = level11_palindome_taggedTemplateLiteral(["The Frattlesnake"])))),
    limit: {
      soft: 10
    },
    delay: 5
  }, {
    name: "Spooky Snake Precrypt",
    after: ["Copperhead Start"],
    ready: () => shenItem(template_string_$item(level11_palindome_templateObject29 || (level11_palindome_templateObject29 = level11_palindome_taggedTemplateLiteral(["The Shield of Brook"])))) && step("questL07Cyrptic") < 999,
    completed: () => step("questL11Shen") === 999 || lib_have(template_string_$item(level11_palindome_templateObject30 || (level11_palindome_templateObject30 = level11_palindome_taggedTemplateLiteral(["The Shield of Brook"])))),
    do: $location(level11_palindome_templateObject31 || (level11_palindome_templateObject31 = level11_palindome_taggedTemplateLiteral(["The Unquiet Garves"]))),
    combat: new combat_CombatStrategy().killHard($monster(level11_palindome_templateObject32 || (level11_palindome_templateObject32 = level11_palindome_taggedTemplateLiteral(["Snakeleton"])))),
    limit: {
      soft: 10
    },
    delay: 5
  }, {
    name: "Spooky Snake Postcrypt",
    after: ["Copperhead Start"],
    ready: () => shenItem(template_string_$item(level11_palindome_templateObject33 || (level11_palindome_templateObject33 = level11_palindome_taggedTemplateLiteral(["The Shield of Brook"])))) && step("questL07Cyrptic") === 999,
    completed: () => step("questL11Shen") === 999 || lib_have(template_string_$item(level11_palindome_templateObject34 || (level11_palindome_templateObject34 = level11_palindome_taggedTemplateLiteral(["The Shield of Brook"])))),
    do: $location(level11_palindome_templateObject35 || (level11_palindome_templateObject35 = level11_palindome_taggedTemplateLiteral(["The VERY Unquiet Garves"]))),
    combat: new combat_CombatStrategy().killHard($monster(level11_palindome_templateObject36 || (level11_palindome_templateObject36 = level11_palindome_taggedTemplateLiteral(["Snakeleton"])))),
    limit: {
      soft: 10
    },
    delay: 5
  }];
  var Zepplin = [{
    name: "Protesters Start",
    after: ["Macguffin/Diary"],
    completed: () => step("questL11Ron") >= 1,
    do: $location(level11_palindome_templateObject37 || (level11_palindome_templateObject37 = level11_palindome_taggedTemplateLiteral(["A Mob of Zeppelin Protesters"]))),
    combat: new combat_CombatStrategy().killHard($monster(level11_palindome_templateObject38 || (level11_palindome_templateObject38 = level11_palindome_taggedTemplateLiteral(["The Nuge"])))),
    choices: {
      856: 1,
      857: 1,
      858: 1,
      866: 2,
      1432: 1
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Protesters",
    after: ["Protesters Start"],
    completed: () => property_get("zeppelinProtestors") >= 80,
    acquire: [{
      item: template_string_$item(level11_palindome_templateObject39 || (level11_palindome_templateObject39 = level11_palindome_taggedTemplateLiteral(["11-leaf clover"])))
    }],
    prepare: () => {
      if (property_get("zeppelinProtestors") < 80) {
        if (lib_have(template_string_$skill(level11_palindome_templateObject40 || (level11_palindome_templateObject40 = level11_palindome_taggedTemplateLiteral(["Bend Hell"])))) && !property_get("_bendHellUsed")) ensureEffect(template_string_$effect(level11_palindome_templateObject41 || (level11_palindome_templateObject41 = level11_palindome_taggedTemplateLiteral(["Bendin' Hell"]))));
        (0,external_kolmafia_namespaceObject.use)(template_string_$item(level11_palindome_templateObject42 || (level11_palindome_templateObject42 = level11_palindome_taggedTemplateLiteral(["11-leaf clover"]))));
      }
    },
    do: $location(level11_palindome_templateObject43 || (level11_palindome_templateObject43 = level11_palindome_taggedTemplateLiteral(["A Mob of Zeppelin Protesters"]))),
    combat: new combat_CombatStrategy().killHard($monster(level11_palindome_templateObject44 || (level11_palindome_templateObject44 = level11_palindome_taggedTemplateLiteral(["The Nuge"])))),
    choices: {
      856: 1,
      857: 1,
      858: 1,
      866: 2,
      1432: 1
    },
    outfit: {
      modifier: "sleaze dmg, sleaze spell dmg",
      familiar: template_string_$familiar(level11_palindome_templateObject45 || (level11_palindome_templateObject45 = level11_palindome_taggedTemplateLiteral(["Left-Hand Man"])))
    },
    freeaction: true,
    // fully maximize outfit
    limit: {
      tries: 5,
      message: "Maybe your available sleaze damage is too low."
    }
  }, {
    name: "Protesters Finish",
    after: ["Protesters"],
    completed: () => step("questL11Ron") >= 2,
    do: $location(level11_palindome_templateObject46 || (level11_palindome_templateObject46 = level11_palindome_taggedTemplateLiteral(["A Mob of Zeppelin Protesters"]))),
    combat: new combat_CombatStrategy().killHard($monster(level11_palindome_templateObject47 || (level11_palindome_templateObject47 = level11_palindome_taggedTemplateLiteral(["The Nuge"])))),
    choices: {
      856: 1,
      857: 1,
      858: 1,
      866: 2,
      1432: 1
    },
    limit: {
      tries: 2
    },
    // If clovers were used before the intro adventure, we need to clear both the intro and closing advs here.
    freeaction: true
  }, {
    name: "Zepplin",
    after: ["Protesters Finish"],
    acquire: [{
      item: template_string_$item(level11_palindome_templateObject48 || (level11_palindome_templateObject48 = level11_palindome_taggedTemplateLiteral(["glark cable"]))),
      useful: () => property_get("_glarkCableUses") < 5
    }, {
      item: template_string_$item(level11_palindome_templateObject49 || (level11_palindome_templateObject49 = level11_palindome_taggedTemplateLiteral(["Red Zeppelin ticket"])))
    }],
    completed: () => step("questL11Ron") >= 5,
    do: $location(level11_palindome_templateObject50 || (level11_palindome_templateObject50 = level11_palindome_taggedTemplateLiteral(["The Red Zeppelin"]))),
    combat: new combat_CombatStrategy().kill($monster(level11_palindome_templateObject51 || (level11_palindome_templateObject51 = level11_palindome_taggedTemplateLiteral(["Ron \"The Weasel\" Copperhead"])))).macro(() => {
      if (property_get("_glarkCableUses") < 5) return new Macro().tryItem(template_string_$item(level11_palindome_templateObject52 || (level11_palindome_templateObject52 = level11_palindome_taggedTemplateLiteral(["glark cable"]))));else return new Macro();
    }, $monsters(level11_palindome_templateObject53 || (level11_palindome_templateObject53 = level11_palindome_taggedTemplateLiteral(["man with the red buttons, red skeleton, red butler, Red Fox"])))).banish($monsters(level11_palindome_templateObject54 || (level11_palindome_templateObject54 = level11_palindome_taggedTemplateLiteral(["Red Herring, Red Snapper"])))).kill($monsters(level11_palindome_templateObject55 || (level11_palindome_templateObject55 = level11_palindome_taggedTemplateLiteral(["man with the red buttons, red skeleton, red butler, Red Fox"])))),
    limit: {
      soft: 12
    }
  }];
  var Dome = [{
    name: "Talisman",
    after: ["Copperhead", "Zepplin", "Bat Snake", "Cold Snake", "Hot Snake Precastle", "Hot Snake Postcastle"],
    completed: () => lib_have(template_string_$item(level11_palindome_templateObject56 || (level11_palindome_templateObject56 = level11_palindome_taggedTemplateLiteral(["Talisman o' Namsilat"])))),
    do: () => (0,external_kolmafia_namespaceObject.create)(template_string_$item(level11_palindome_templateObject57 || (level11_palindome_templateObject57 = level11_palindome_taggedTemplateLiteral(["Talisman o' Namsilat"])))),
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Palindome Dog",
    after: ["Talisman"],
    acquire: [{
      item: template_string_$item(level11_palindome_templateObject58 || (level11_palindome_templateObject58 = level11_palindome_taggedTemplateLiteral(["disposable instant camera"])))
    }],
    completed: () => lib_have(template_string_$item(level11_palindome_templateObject59 || (level11_palindome_templateObject59 = level11_palindome_taggedTemplateLiteral(["photograph of a dog"])))) || step("questL11Palindome") >= 3,
    do: $location(level11_palindome_templateObject60 || (level11_palindome_templateObject60 = level11_palindome_taggedTemplateLiteral(["Inside the Palindome"]))),
    outfit: {
      equip: template_string_$items(level11_palindome_templateObject61 || (level11_palindome_templateObject61 = level11_palindome_taggedTemplateLiteral(["Talisman o' Namsilat"]))),
      modifier: "-combat"
    },
    combat: new combat_CombatStrategy().banish($monsters(level11_palindome_templateObject62 || (level11_palindome_templateObject62 = level11_palindome_taggedTemplateLiteral(["Evil Olive, Flock of Stab-bats, Taco Cat, Tan Gnat"])))).macro(new Macro().item(template_string_$item(level11_palindome_templateObject63 || (level11_palindome_templateObject63 = level11_palindome_taggedTemplateLiteral(["disposable instant camera"])))), $monsters(level11_palindome_templateObject64 || (level11_palindome_templateObject64 = level11_palindome_taggedTemplateLiteral(["Bob Racecar, Racecar Bob"])))).kill($monsters(level11_palindome_templateObject65 || (level11_palindome_templateObject65 = level11_palindome_taggedTemplateLiteral(["Bob Racecar, Racecar Bob, Drab Bard, Remarkable Elba Kramer"])))),
    limit: {
      soft: 20
    }
  }, {
    name: "Palindome Dudes",
    after: ["Palindome Dog"],
    completed: () => lib_have(external_kolmafia_namespaceObject.Item.get(7262)) || step("questL11Palindome") >= 3,
    do: $location(level11_palindome_templateObject66 || (level11_palindome_templateObject66 = level11_palindome_taggedTemplateLiteral(["Inside the Palindome"]))),
    outfit: {
      equip: template_string_$items(level11_palindome_templateObject67 || (level11_palindome_templateObject67 = level11_palindome_taggedTemplateLiteral(["Talisman o' Namsilat"]))),
      modifier: "-combat"
    },
    combat: new combat_CombatStrategy().banish($monsters(level11_palindome_templateObject68 || (level11_palindome_templateObject68 = level11_palindome_taggedTemplateLiteral(["Evil Olive, Flock of Stab-bats, Taco Cat, Tan Gnat"])))).kill($monsters(level11_palindome_templateObject69 || (level11_palindome_templateObject69 = level11_palindome_taggedTemplateLiteral(["Bob Racecar, Racecar Bob, Drab Bard, Remarkable Elba Kramer"])))),
    limit: {
      soft: 20
    }
  }, {
    name: "Palindome Photos",
    after: ["Palindome Dudes"],
    completed: () => lib_have(template_string_$item(level11_palindome_templateObject70 || (level11_palindome_templateObject70 = level11_palindome_taggedTemplateLiteral(["photograph of a red nugget"])))) && lib_have(template_string_$item(level11_palindome_templateObject71 || (level11_palindome_templateObject71 = level11_palindome_taggedTemplateLiteral(["photograph of God"])))) && lib_have(template_string_$item(level11_palindome_templateObject72 || (level11_palindome_templateObject72 = level11_palindome_taggedTemplateLiteral(["photograph of an ostrich egg"])))) || step("questL11Palindome") >= 3,
    do: $location(level11_palindome_templateObject73 || (level11_palindome_templateObject73 = level11_palindome_taggedTemplateLiteral(["Inside the Palindome"]))),
    outfit: {
      equip: template_string_$items(_templateObject74 || (_templateObject74 = level11_palindome_taggedTemplateLiteral(["Talisman o' Namsilat"]))),
      modifier: "-combat"
    },
    limit: {
      soft: 20
    }
  }, {
    name: "Alarm Gem",
    after: ["Palindome Photos"],
    completed: () => step("questL11Palindome") >= 3,
    do: () => {
      if (lib_have(external_kolmafia_namespaceObject.Item.get(7262))) (0,external_kolmafia_namespaceObject.use)(external_kolmafia_namespaceObject.Item.get(7262));
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=palindome&action=pal_droffice");
      (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?pwd=".concat((0,external_kolmafia_namespaceObject.myHash)(), "&whichchoice=872&option=1&photo1=2259&photo2=7264&photo3=7263&photo4=7265"));
      (0,external_kolmafia_namespaceObject.use)(1, external_kolmafia_namespaceObject.Item.get(7270));
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=palindome&action=pal_mroffice");
      (0,external_kolmafia_namespaceObject.visitUrl)("clan_viplounge.php?action=hottub");
      uneffect(template_string_$effect(_templateObject75 || (_templateObject75 = level11_palindome_taggedTemplateLiteral(["Beaten Up"]))));
    },
    outfit: {
      equip: template_string_$items(_templateObject76 || (_templateObject76 = level11_palindome_taggedTemplateLiteral(["Talisman o' Namsilat"])))
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Open Alarm",
    after: ["Alarm Gem"],
    completed: () => step("questL11Palindome") >= 5,
    do: () => {
      if (!lib_have(template_string_$item(_templateObject77 || (_templateObject77 = level11_palindome_taggedTemplateLiteral(["wet stunt nut stew"]))))) (0,external_kolmafia_namespaceObject.create)(template_string_$item(_templateObject78 || (_templateObject78 = level11_palindome_taggedTemplateLiteral(["wet stunt nut stew"]))));
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=palindome&action=pal_mrlabel");
    },
    outfit: {
      equip: template_string_$items(_templateObject79 || (_templateObject79 = level11_palindome_taggedTemplateLiteral(["Talisman o' Namsilat"])))
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }];
  var PalindomeQuest = {
    name: "Palindome",
    tasks: [].concat(Copperhead, Zepplin, Dome, [{
      name: "Boss",
      after: ["Open Alarm"],
      completed: () => step("questL11Palindome") === 999,
      do: () => {
        (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=palindome&action=pal_drlabel");
        (0,external_kolmafia_namespaceObject.runChoice)(-1);
      },
      outfit: {
        equip: template_string_$items(_templateObject80 || (_templateObject80 = level11_palindome_taggedTemplateLiteral(["Talisman o' Namsilat, Mega Gem"])))
      },
      choices: {
        131: 1
      },
      boss: true,
      combat: new combat_CombatStrategy().kill(),
      limit: {
        tries: 1
      }
    }])
  };
  ;// CONCATENATED MODULE: ./src/tasks/level10.ts
  var level10_templateObject, level10_templateObject2, level10_templateObject3, level10_templateObject4, level10_templateObject5, level10_templateObject6, level10_templateObject7, level10_templateObject8, level10_templateObject9, level10_templateObject10, level10_templateObject11, level10_templateObject12, level10_templateObject13, level10_templateObject14, level10_templateObject15, level10_templateObject16, level10_templateObject17, level10_templateObject18, level10_templateObject19, level10_templateObject20, level10_templateObject21;
  
  function level10_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  
  var GiantQuest = {
    name: "Giant",
    tasks: [{
      name: "Start",
      after: ["Toot/Finish"],
      ready: () => (0,external_kolmafia_namespaceObject.myLevel)() >= 10,
      completed: () => step("questL10Garbage") !== -1,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Grow Beanstalk",
      after: ["Start"],
      acquire: [{
        item: template_string_$item(level10_templateObject || (level10_templateObject = level10_taggedTemplateLiteral(["enchanted bean"])))
      }],
      completed: () => step("questL10Garbage") >= 1,
      do: () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(level10_templateObject2 || (level10_templateObject2 = level10_taggedTemplateLiteral(["enchanted bean"])))),
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Airship",
      after: ["Grow Beanstalk"],
      completed: () => lib_have(template_string_$item(level10_templateObject3 || (level10_templateObject3 = level10_taggedTemplateLiteral(["S.O.C.K."])))),
      do: $location(level10_templateObject4 || (level10_templateObject4 = level10_taggedTemplateLiteral(["The Penultimate Fantasy Airship"]))),
      choices: {
        178: 2,
        182: 1
      },
      post: () => {
        if (lib_have(template_string_$effect(level10_templateObject5 || (level10_templateObject5 = level10_taggedTemplateLiteral(["Temporary Amnesia"]))))) (0,external_kolmafia_namespaceObject.cliExecute)("uneffect Temporary Amnesia");
      },
      outfit: {
        modifier: "-combat"
      },
      limit: {
        soft: 50
      },
      delay: () => lib_have(template_string_$item(level10_templateObject6 || (level10_templateObject6 = level10_taggedTemplateLiteral(["Plastic Wrap Immateria"])))) ? 25 : lib_have(template_string_$item(level10_templateObject7 || (level10_templateObject7 = level10_taggedTemplateLiteral(["Gauze Immateria"])))) ? 20 : 15 // After that, just look for noncombats
  
    }, {
      name: "Basement Search",
      after: ["Airship"],
      completed: () => (0,external_kolmafia_namespaceObject.containsText)($location(level10_templateObject8 || (level10_templateObject8 = level10_taggedTemplateLiteral(["The Castle in the Clouds in the Sky (Basement)"]))).noncombatQueue, "Mess Around with Gym") || step("questL10Garbage") >= 8,
      do: $location(level10_templateObject9 || (level10_templateObject9 = level10_taggedTemplateLiteral(["The Castle in the Clouds in the Sky (Basement)"]))),
      outfit: {
        modifier: "-combat"
      },
      limit: {
        soft: 20
      },
      choices: {
        670: 5,
        669: 1,
        671: 4
      }
    }, {
      name: "Basement Finish",
      after: ["Basement Search"],
      acquire: [{
        item: template_string_$item(level10_templateObject10 || (level10_templateObject10 = level10_taggedTemplateLiteral(["amulet of extreme plot significance"])))
      }],
      completed: () => step("questL10Garbage") >= 8,
      do: $location(level10_templateObject11 || (level10_templateObject11 = level10_taggedTemplateLiteral(["The Castle in the Clouds in the Sky (Basement)"]))),
      outfit: {
        equip: template_string_$items(level10_templateObject12 || (level10_templateObject12 = level10_taggedTemplateLiteral(["amulet of extreme plot significance"])))
      },
      choices: {
        670: 4
      },
      limit: {
        tries: 1
      }
    }, {
      name: "Ground",
      after: ["Basement Finish"],
      completed: () => step("questL10Garbage") >= 9,
      do: $location(level10_templateObject13 || (level10_templateObject13 = level10_taggedTemplateLiteral(["The Castle in the Clouds in the Sky (Ground Floor)"]))),
      choices: {
        672: 3,
        673: 3,
        674: 3,
        1026: 3
      },
      limit: {
        turns: 11
      },
      delay: 10
    }, {
      name: "Top Floor",
      after: ["Ground"],
      acquire: [{
        item: template_string_$item(level10_templateObject14 || (level10_templateObject14 = level10_taggedTemplateLiteral(["Mohawk wig"])))
      }],
      completed: () => step("questL10Garbage") >= 10,
      do: $location(level10_templateObject15 || (level10_templateObject15 = level10_taggedTemplateLiteral(["The Castle in the Clouds in the Sky (Top Floor)"]))),
      outfit: {
        equip: template_string_$items(level10_templateObject16 || (level10_templateObject16 = level10_taggedTemplateLiteral(["Mohawk wig"]))),
        modifier: "-combat"
      },
      combat: new combat_CombatStrategy().killHard($monster(level10_templateObject17 || (level10_templateObject17 = level10_taggedTemplateLiteral(["Burning Snake of Fire"])))),
      choices: {
        675: 4,
        676: 4,
        677: 4,
        678: 1,
        679: 1,
        1431: 4
      },
      limit: {
        soft: 20
      }
    }, {
      name: "Unlock HITS",
      after: ["Top Floor"],
      ready: () => shenItem(template_string_$item(level10_templateObject18 || (level10_templateObject18 = level10_taggedTemplateLiteral(["The Eye of the Stars"])))),
      completed: () => lib_have(template_string_$item(level10_templateObject19 || (level10_templateObject19 = level10_taggedTemplateLiteral(["steam-powered model rocketship"])))),
      do: $location(level10_templateObject20 || (level10_templateObject20 = level10_taggedTemplateLiteral(["The Castle in the Clouds in the Sky (Top Floor)"]))),
      outfit: {
        modifier: "-combat"
      },
      combat: new combat_CombatStrategy().killHard($monster(level10_templateObject21 || (level10_templateObject21 = level10_taggedTemplateLiteral(["Burning Snake of Fire"])))),
      choices: {
        675: 4,
        676: 4,
        677: 2,
        678: 3,
        679: 1,
        1431: 4
      },
      limit: {
        soft: 20
      }
    }, {
      name: "Finish",
      after: ["Top Floor"],
      completed: () => step("questL10Garbage") === 999,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        soft: 10
      },
      freeaction: true
    }]
  };
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2017/AsdonMartin.js
  var AsdonMartin_templateObject, AsdonMartin_templateObject2, AsdonMartin_templateObject3, AsdonMartin_templateObject4, AsdonMartin_templateObject5, AsdonMartin_templateObject6, AsdonMartin_templateObject7, AsdonMartin_templateObject8, AsdonMartin_templateObject9, AsdonMartin_templateObject10, AsdonMartin_templateObject11, AsdonMartin_templateObject12, AsdonMartin_templateObject13;
  
  function AsdonMartin_slicedToArray(arr, i) { return AsdonMartin_arrayWithHoles(arr) || AsdonMartin_iterableToArrayLimit(arr, i) || AsdonMartin_unsupportedIterableToArray(arr, i) || AsdonMartin_nonIterableRest(); }
  
  function AsdonMartin_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function AsdonMartin_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return AsdonMartin_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return AsdonMartin_arrayLikeToArray(o, minLen); }
  
  function AsdonMartin_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function AsdonMartin_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
  
  function AsdonMartin_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
  
  function AsdonMartin_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  var PriceAge;
  
  (function (PriceAge) {
    PriceAge[PriceAge["HISTORICAL"] = 0] = "HISTORICAL";
    PriceAge[PriceAge["RECENT"] = 1] = "RECENT";
    PriceAge[PriceAge["TODAY"] = 2] = "TODAY";
  })(PriceAge || (PriceAge = {}));
  /**
   * @returns Whether the Asdon is our current active workshed
   */
  
  
  function AsdonMartin_installed() {
    return (0,external_kolmafia_namespaceObject.getWorkshed)() === template_string_$item(AsdonMartin_templateObject || (AsdonMartin_templateObject = AsdonMartin_taggedTemplateLiteral(["Asdon Martin keyfob (on ring)"])));
  }
  /**
   * @returns `true` if we `have` the Asdon or if it's installed
   */
  
  function AsdonMartin_have() {
    return AsdonMartin_installed() || haveItem($item(AsdonMartin_templateObject2 || (AsdonMartin_templateObject2 = AsdonMartin_taggedTemplateLiteral(["Asdon Martin keyfob (on ring)"]))));
  }
  var fuelSkiplist = template_string_$items(AsdonMartin_templateObject3 || (AsdonMartin_templateObject3 = AsdonMartin_taggedTemplateLiteral(["cup of \"tea\", thermos of \"whiskey\", Lucky Lindy, Bee's Knees, Sockdollager, Ish Kabibble, Hot Socks, Phonus Balonus, Flivver, Sloppy Jalopy, glass of \"milk\""])));
  /**
   * Internal function used to determine whether a historical price is recent enough
   *
   * @param item The item to check
   * @returns Whether a price is too old to trust
   */
  
  function priceTooOld(item) {
    return (0,external_kolmafia_namespaceObject.historicalPrice)(item) === 0 || (0,external_kolmafia_namespaceObject.historicalAge)(item) >= 7;
  }
  /**
   * @param item The item in question
   * @returns Mall max if historicalPrice is -1; otherwise, the historical price
   */
  
  
  function historicalPriceOrMax(item) {
    var historical = (0,external_kolmafia_namespaceObject.historicalPrice)(item);
    return historical < 0 ? 999999999 : historical;
  }
  /**
   * @param item The item in question
   * @returns Mall max if historicalPrice is -1; otherwise, the mall price
   */
  
  
  function mallPriceOrMax(item) {
    var mall = (0,external_kolmafia_namespaceObject.mallPrice)(item);
    return mall < 0 ? 999999999 : mall;
  }
  /**
   * Combined internal function to determine the price of an item
   *
   * @param item The item in question
   * @param priceAge How do we decide when to use historical vs real mall prices?
   * @returns The price of the item in question
   */
  
  
  function price(item, priceAge) {
    switch (priceAge) {
      case PriceAge.HISTORICAL:
        {
          var historical = historicalPriceOrMax(item);
          return historical === 0 ? mallPriceOrMax(item) : historical;
        }
  
      case PriceAge.RECENT:
        return priceTooOld(item) ? mallPriceOrMax(item) : historicalPriceOrMax(item);
  
      case PriceAge.TODAY:
        return mallPriceOrMax(item);
    }
  }
  
  function inventoryItems() {
    return external_kolmafia_namespaceObject.Item.all().filter(isFuelItem).filter(item => lib_have(item) && [100, (0,external_kolmafia_namespaceObject.autosellPrice)(item)].includes(price(item, PriceAge.RECENT)));
  }
  /**
   * @param it The item in question
   * @param priceAge The PriceAge option to apply
   * @returns Meat per fuel of an item
   */
  
  
  function calculateFuelUnitCost(it) {
    var priceAge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PriceAge.RECENT;
    var units = getAverageAdventures(it);
    return price(it, priceAge) / units;
  }
  /**
   * @param it the item in question
   * @returns Can `it` be used as Asdon fuel?
   */
  
  
  function isFuelItem(it) {
    return !(0,external_kolmafia_namespaceObject.isNpcItem)(it) && it.fullness + it.inebriety > 0 && getAverageAdventures(it) > 0 && it.tradeable && it.discardable && !fuelSkiplist.includes(it);
  }
  /**
   * @returns The best fuel options available to us at this time
   */
  
  function getBestFuels() {
    // Three stages.
    // 1. Filter to reasonable items using historical cost (within 5x of historical best).
    var allFuel = external_kolmafia_namespaceObject.Item.all().filter(isFuelItem);
  
    if (allFuel.filter(item => (0,external_kolmafia_namespaceObject.historicalPrice)(item) === 0).length > 100) {
      (0,external_kolmafia_namespaceObject.mallPrices)("food");
      (0,external_kolmafia_namespaceObject.mallPrices)("booze");
    }
  
    var keyHistorical = item => calculateFuelUnitCost(item, PriceAge.HISTORICAL);
  
    allFuel.sort((x, y) => keyHistorical(x) - keyHistorical(y));
    var bestUnitCost = keyHistorical(allFuel[0]);
    var firstBadIndex = allFuel.findIndex(item => keyHistorical(item) > 5 * bestUnitCost);
    var potentialFuel = firstBadIndex > 0 ? allFuel.slice(0, firstBadIndex) : allFuel; // 2. Filter to top 10 candidates using prices at most a week old.
  
    if (potentialFuel.filter(item => priceTooOld(item)).length > 100) {
      (0,external_kolmafia_namespaceObject.mallPrices)("food");
      (0,external_kolmafia_namespaceObject.mallPrices)("booze");
    }
  
    var key1 = item => -getAverageAdventures(item);
  
    var key2 = item => calculateFuelUnitCost(item, PriceAge.RECENT);
  
    potentialFuel.sort((x, y) => key1(x) - key1(y));
    potentialFuel.sort((x, y) => key2(x) - key2(y)); // 3. Find result using precise price for those top candidates.
  
    var candidates = potentialFuel.slice(0, 10);
  
    var key3 = item => calculateFuelUnitCost(item, PriceAge.TODAY);
  
    candidates.sort((x, y) => key3(x) - key3(y));
  
    if (calculateFuelUnitCost(candidates[0], PriceAge.TODAY) > 100) {
      throw new Error("Could not identify any fuel with efficiency better than 100 meat per fuel. " + "This means something went wrong.");
    }
  
    return candidates;
  }
  /**
   * Fuel your Asdon Martin with a given quantity of a given item
   *
   * @param it Item to fuel with.
   * @param quantity Number of items to fuel with.
   * @returns Whether we succeeded at fueling with the given items.
   */
  
  
  function insertFuel(it) {
    var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var result = (0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=fuelconvertor&pwd&qty=".concat(quantity, "&iid=").concat(it.id, "&go=Convert%21"));
    return result.includes("The display updates with a");
  }
  /**
   * Fill your Asdon Martin to the given fuel level in the cheapest way possible
   *
   * @param targetUnits Fuel level to attempt to reach.
   * @returns Whether we succeeded at filling to the target fuel level.
   */
  
  function fillTo(targetUnits) {
    if (!AsdonMartin_installed()) return false;
  
    while ((0,external_kolmafia_namespaceObject.getFuel)() < targetUnits) {
      // if in Hardcore/ronin, skip the price calculation and just use soda bread
      var _ref = (0,external_kolmafia_namespaceObject.canInteract)() ? getBestFuels() : [template_string_$item(AsdonMartin_templateObject4 || (AsdonMartin_templateObject4 = AsdonMartin_taggedTemplateLiteral(["loaf of soda bread"]))), undefined],
          _ref2 = AsdonMartin_slicedToArray(_ref, 2),
          bestFuel = _ref2[0],
          secondBest = _ref2[1];
  
      var count = Math.ceil(targetUnits / getAverageAdventures(bestFuel));
      var ceiling = undefined;
  
      if (secondBest) {
        var efficiencyOfSecondBest = (0,external_kolmafia_namespaceObject.mallPrice)(secondBest) / getAverageAdventures(secondBest);
        ceiling = Math.ceil(efficiencyOfSecondBest * getAverageAdventures(bestFuel));
      }
  
      if (!(0,external_kolmafia_namespaceObject.canInteract)()) (0,external_kolmafia_namespaceObject.retrieveItem)(count, bestFuel);else if (ceiling) (0,external_kolmafia_namespaceObject.buy)(count, bestFuel, ceiling);else (0,external_kolmafia_namespaceObject.buy)(count, bestFuel);
  
      if (!insertFuel(bestFuel, Math.min((0,external_kolmafia_namespaceObject.itemAmount)(bestFuel), count))) {
        throw new Error("Failed to fuel Asdon Martin.");
      }
    }
  
    return (0,external_kolmafia_namespaceObject.getFuel)() >= targetUnits;
  }
  /**
   * @param targetUnits The fuel level we aim to achieve
   * @returns Whether we successfully filled our Asdon's tank
   */
  
  function fillWithBestInventoryItem(targetUnits) {
    var options = inventoryItems().sort((a, b) => getAverageAdventures(b) / (0,external_kolmafia_namespaceObject.autosellPrice)(b) - getAverageAdventures(a) / (0,external_kolmafia_namespaceObject.autosellPrice)(a));
    if (options.length === 0) return false;
    var best = options[0];
    if ((0,external_kolmafia_namespaceObject.autosellPrice)(best) / getAverageAdventures(best) > 100) return false;
    var amountToUse = utils_clamp(Math.ceil(targetUnits / getAverageAdventures(best)), 0, (0,external_kolmafia_namespaceObject.itemAmount)(best));
    return insertFuel(best, amountToUse);
  }
  /**
   * Fill your Asdon Martin by prioritizing mallmin items in your inventory. Default to the behavior of fillTo.
   *
   * @param targetUnits Fuel level to attempt to reach.
   * @returns Whether we succeeded at filling to the target fuel level.
   */
  
  
  function fillWithInventoryTo(targetUnits) {
    if (!AsdonMartin_installed()) return false;
    var continueFuelingFromInventory = true;
  
    while ((0,external_kolmafia_namespaceObject.getFuel)() < targetUnits && continueFuelingFromInventory) {
      continueFuelingFromInventory && (continueFuelingFromInventory = fillWithBestInventoryItem(targetUnits));
    }
  
    return fillTo(targetUnits);
  }
  /**
   * Object consisting of the various Asdon driving styles
   */
  
  var Driving = {
    Obnoxiously: template_string_$effect(AsdonMartin_templateObject5 || (AsdonMartin_templateObject5 = AsdonMartin_taggedTemplateLiteral(["Driving Obnoxiously"]))),
    Stealthily: template_string_$effect(AsdonMartin_templateObject6 || (AsdonMartin_templateObject6 = AsdonMartin_taggedTemplateLiteral(["Driving Stealthily"]))),
    Wastefully: template_string_$effect(AsdonMartin_templateObject7 || (AsdonMartin_templateObject7 = AsdonMartin_taggedTemplateLiteral(["Driving Wastefully"]))),
    Safely: template_string_$effect(AsdonMartin_templateObject8 || (AsdonMartin_templateObject8 = AsdonMartin_taggedTemplateLiteral(["Driving Safely"]))),
    Recklessly: template_string_$effect(AsdonMartin_templateObject9 || (AsdonMartin_templateObject9 = AsdonMartin_taggedTemplateLiteral(["Driving Recklessly"]))),
    Intimidatingly: template_string_$effect(AsdonMartin_templateObject10 || (AsdonMartin_templateObject10 = AsdonMartin_taggedTemplateLiteral(["Driving Intimidatingly"]))),
    Quickly: template_string_$effect(AsdonMartin_templateObject11 || (AsdonMartin_templateObject11 = AsdonMartin_taggedTemplateLiteral(["Driving Quickly"]))),
    Observantly: template_string_$effect(AsdonMartin_templateObject12 || (AsdonMartin_templateObject12 = AsdonMartin_taggedTemplateLiteral(["Driving Observantly"]))),
    Waterproofly: template_string_$effect(AsdonMartin_templateObject13 || (AsdonMartin_templateObject13 = AsdonMartin_taggedTemplateLiteral(["Driving Waterproofly"])))
  };
  /**
   * Attempt to drive with a particular style for a particular number of turns.
   *
   * @param style The driving style to use.
   * @param turns The number of turns to attempt to get.
   * @param preferInventory Whether we should preferentially value items currently in our inventory.
   * @returns Whether we have at least as many turns as requested of said driving style.
   */
  
  function drive(style) {
    var turns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var preferInventory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (!Object.values(Driving).includes(style)) return false;
    if (!AsdonMartin_installed()) return false;
    if ((0,external_kolmafia_namespaceObject.haveEffect)(style) >= turns) return true;
    var fuelNeeded = 37 * Math.ceil((turns - (0,external_kolmafia_namespaceObject.haveEffect)(style)) / 30);
    (preferInventory ? fillWithInventoryTo : fillTo)(fuelNeeded);
  
    while ((0,external_kolmafia_namespaceObject.getFuel)() >= 37 && (0,external_kolmafia_namespaceObject.haveEffect)(style) < turns) {
      (0,external_kolmafia_namespaceObject.cliExecute)("asdonmartin drive ".concat(style.name.replace("Driving ", "")));
    }
  
    return (0,external_kolmafia_namespaceObject.haveEffect)(style) >= turns;
  }
  ;// CONCATENATED MODULE: ./src/lib.ts
  
  function debug(message, color) {
    if (color) {
      (0,external_kolmafia_namespaceObject.print)(message, color);
    } else {
      (0,external_kolmafia_namespaceObject.print)(message);
    }
  } // From phccs
  
  function convertMilliseconds(milliseconds) {
    var seconds = milliseconds / 1000;
    var minutes = Math.floor(seconds / 60);
    var secondsLeft = Math.round((seconds - minutes * 60) * 1000) / 1000;
    var hours = Math.floor(minutes / 60);
    var minutesLeft = Math.round(minutes - hours * 60);
    return (hours !== 0 ? "".concat(hours, " hours, ") : "") + (minutesLeft !== 0 ? "".concat(minutesLeft, " minutes, ") : "") + (secondsLeft !== 0 ? "".concat(secondsLeft, " seconds") : "");
  }
  ;// CONCATENATED MODULE: ./src/engine/resources.ts
  var resources_templateObject, resources_templateObject2, resources_templateObject3, resources_templateObject4, resources_templateObject5, resources_templateObject6, resources_templateObject7, resources_templateObject8, resources_templateObject9, resources_templateObject10, resources_templateObject11, resources_templateObject12, resources_templateObject13, resources_templateObject14, resources_templateObject15, resources_templateObject16, resources_templateObject17, resources_templateObject18, resources_templateObject19, resources_templateObject20, resources_templateObject21, resources_templateObject22, resources_templateObject23, resources_templateObject24, resources_templateObject25, resources_templateObject26, resources_templateObject27, resources_templateObject28, resources_templateObject29, resources_templateObject30, resources_templateObject31, resources_templateObject32, resources_templateObject33, resources_templateObject34, resources_templateObject35, resources_templateObject36, resources_templateObject37, resources_templateObject38, resources_templateObject39, resources_templateObject40, resources_templateObject41, resources_templateObject42, resources_templateObject43, resources_templateObject44, resources_templateObject45, resources_templateObject46, resources_templateObject47, resources_templateObject48, resources_templateObject49, resources_templateObject50, resources_templateObject51, resources_templateObject52, resources_templateObject53, resources_templateObject54, resources_templateObject55, resources_templateObject56, resources_templateObject57, resources_templateObject58, resources_templateObject59, resources_templateObject60, resources_templateObject61, resources_templateObject62, resources_templateObject63, resources_templateObject64, resources_templateObject65, resources_templateObject66, resources_templateObject67, resources_templateObject68, resources_templateObject69, resources_templateObject70, resources_templateObject71, resources_templateObject72, resources_templateObject73, resources_templateObject74, resources_templateObject75, resources_templateObject76, resources_templateObject77, resources_templateObject78, resources_templateObject79, resources_templateObject80, _templateObject81, _templateObject82, _templateObject83, _templateObject84, _templateObject85, _templateObject86, _templateObject87, _templateObject88, _templateObject89, _templateObject90, _templateObject91, _templateObject92, _templateObject93, _templateObject94, _templateObject95, _templateObject96, _templateObject97, _templateObject98, _templateObject99, _templateObject100, _templateObject101, _templateObject102, _templateObject103, _templateObject104, _templateObject105, _templateObject106, _templateObject107, _templateObject108, _templateObject109, _templateObject110, _templateObject111, _templateObject112, _templateObject113, _templateObject114, _templateObject115, _templateObject116, _templateObject117, _templateObject118, _templateObject119, _templateObject120, _templateObject121, _templateObject122, _templateObject123, _templateObject124, _templateObject125, _templateObject126, _templateObject127, _templateObject128, _templateObject129, _templateObject130, _templateObject131, _templateObject132, _templateObject133, _templateObject134, _templateObject135, _templateObject136, _templateObject137, _templateObject138, _templateObject139, _templateObject140, _templateObject141, _templateObject142, _templateObject143, _templateObject144, _templateObject145, _templateObject146, _templateObject147, _templateObject148, _templateObject149, _templateObject150, _templateObject151, _templateObject152, _templateObject153, _templateObject154, _templateObject155, _templateObject156, _templateObject157, _templateObject158, _templateObject159, _templateObject160, _templateObject161, _templateObject162, _templateObject163, _templateObject164, _templateObject165, _templateObject166, _templateObject167, _templateObject168, _templateObject169, _templateObject170, _templateObject171, _templateObject172, _templateObject173, _templateObject174;
  
  function resources_toConsumableArray(arr) { return resources_arrayWithoutHoles(arr) || resources_iterableToArray(arr) || resources_unsupportedIterableToArray(arr) || resources_nonIterableSpread(); }
  
  function resources_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function resources_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return resources_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return resources_arrayLikeToArray(o, minLen); }
  
  function resources_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  
  function resources_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return resources_arrayLikeToArray(arr); }
  
  function resources_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function resources_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  var banishSources = [{
    name: "Bowl Curveball",
    available: () => lib_have(template_string_$item(resources_templateObject || (resources_templateObject = resources_taggedTemplateLiteral(["cosmic bowling ball"])))),
    do: template_string_$skill(resources_templateObject2 || (resources_templateObject2 = resources_taggedTemplateLiteral(["Bowl a Curveball"])))
  }, {
    name: "Asdon Martin",
    available: () => {
      // From libram
      if (!AsdonMartin_installed()) return false;
      var banishes = property_get("banishedMonsters").split(":");
      var bumperIndex = banishes.map(string => string.toLowerCase()).indexOf("spring-loaded front bumper");
      if (bumperIndex === -1) return true;
      return (0,external_kolmafia_namespaceObject.myTurncount)() - parseInt(banishes[bumperIndex + 1]) > 30;
    },
    prepare: () => fillTo(50),
    do: template_string_$skill(resources_templateObject3 || (resources_templateObject3 = resources_taggedTemplateLiteral(["Asdon Martin: Spring-Loaded Front Bumper"])))
  }, {
    name: "Feel Hatred",
    available: () => property_get("_feelHatredUsed") < 3 && lib_have(template_string_$skill(resources_templateObject4 || (resources_templateObject4 = resources_taggedTemplateLiteral(["Emotionally Chipped"])))),
    do: template_string_$skill(resources_templateObject5 || (resources_templateObject5 = resources_taggedTemplateLiteral(["Feel Hatred"])))
  }, {
    name: "Reflex Hammer",
    available: () => property_get("_reflexHammerUsed") < 3 && lib_have(template_string_$item(resources_templateObject6 || (resources_templateObject6 = resources_taggedTemplateLiteral(["Lil' Doctor\u2122 bag"])))),
    do: template_string_$skill(resources_templateObject7 || (resources_templateObject7 = resources_taggedTemplateLiteral(["Reflex Hammer"]))),
    equip: template_string_$item(resources_templateObject8 || (resources_templateObject8 = resources_taggedTemplateLiteral(["Lil' Doctor\u2122 bag"])))
  }, {
    name: "Snokebomb",
    available: () => property_get("_snokebombUsed") < 3 && lib_have(template_string_$skill(resources_templateObject9 || (resources_templateObject9 = resources_taggedTemplateLiteral(["Snokebomb"])))),
    do: template_string_$skill(resources_templateObject10 || (resources_templateObject10 = resources_taggedTemplateLiteral(["Snokebomb"])))
  }, {
    name: "KGB dart",
    available: () => property_get("_kgbTranquilizerDartUses") < 3 && lib_have(template_string_$item(resources_templateObject11 || (resources_templateObject11 = resources_taggedTemplateLiteral(["Kremlin's Greatest Briefcase"])))),
    do: template_string_$skill(resources_templateObject12 || (resources_templateObject12 = resources_taggedTemplateLiteral(["KGB tranquilizer dart"]))),
    equip: template_string_$item(resources_templateObject13 || (resources_templateObject13 = resources_taggedTemplateLiteral(["Kremlin's Greatest Briefcase"])))
  }, {
    name: "Latte",
    available: () => (!property_get("_latteBanishUsed") || property_get("_latteRefillsUsed") < 2) && // Save one refil for aftercore
    lib_have(template_string_$item(resources_templateObject14 || (resources_templateObject14 = resources_taggedTemplateLiteral(["latte lovers member's mug"])))),
    prepare: () => {
      if (property_get("_latteBanishUsed")) (0,external_kolmafia_namespaceObject.cliExecute)("latte refill cinnamon pumpkin vanilla"); // Always unlocked
    },
    do: template_string_$skill(resources_templateObject15 || (resources_templateObject15 = resources_taggedTemplateLiteral(["Throw Latte on Opponent"]))),
    equip: template_string_$item(resources_templateObject16 || (resources_templateObject16 = resources_taggedTemplateLiteral(["latte lovers member's mug"])))
  }, {
    name: "Middle Finger",
    available: () => !property_get("_mafiaMiddleFingerRingUsed") && lib_have(template_string_$item(resources_templateObject17 || (resources_templateObject17 = resources_taggedTemplateLiteral(["mafia middle finger ring"])))),
    do: template_string_$skill(resources_templateObject18 || (resources_templateObject18 = resources_taggedTemplateLiteral(["Show them your ring"]))),
    equip: template_string_$item(resources_templateObject19 || (resources_templateObject19 = resources_taggedTemplateLiteral(["mafia middle finger ring"])))
  }, // If needed, use banishers from the mall
  {
    name: "Louder Than Bomb",
    prepare: () => {
      (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(resources_templateObject20 || (resources_templateObject20 = resources_taggedTemplateLiteral(["Louder Than Bomb"]))));
    },
    available: () => true,
    do: template_string_$item(resources_templateObject21 || (resources_templateObject21 = resources_taggedTemplateLiteral(["Louder Than Bomb"])))
  }, {
    name: "Tennis Ball",
    prepare: () => {
      (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(resources_templateObject22 || (resources_templateObject22 = resources_taggedTemplateLiteral(["tennis ball"]))));
    },
    available: () => true,
    do: template_string_$item(resources_templateObject23 || (resources_templateObject23 = resources_taggedTemplateLiteral(["tennis ball"])))
  }, {
    name: "Divine Champagne Popper",
    prepare: () => {
      (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(resources_templateObject24 || (resources_templateObject24 = resources_taggedTemplateLiteral(["divine champagne popper"]))));
    },
    available: () => true,
    do: template_string_$item(resources_templateObject25 || (resources_templateObject25 = resources_taggedTemplateLiteral(["divine champagne popper"])))
  }, // Turn-taking banishes: lowest priority
  {
    name: "Crystal Skull",
    prepare: () => {
      (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(resources_templateObject26 || (resources_templateObject26 = resources_taggedTemplateLiteral(["crystal skull"]))));
    },
    available: () => true,
    do: template_string_$item(resources_templateObject27 || (resources_templateObject27 = resources_taggedTemplateLiteral(["crystal skull"])))
  }];
  function unusedBanishes(to_banish) {
    var used_banishes = new Set();
    var already_banished = new Map(Array.from(getBanishedMonsters(), entry => [entry[1], entry[0]])); // Record monsters that still need to be banished, and the banishes used
  
    var not_yet_banished = [];
    to_banish.forEach(monster => {
      var banished_with = already_banished.get(monster);
  
      if (banished_with === undefined) {
        not_yet_banished.push(monster);
      } else {
        used_banishes.add(banished_with); // Map strange banish tracking to our resources
  
        if (banished_with === template_string_$item(resources_templateObject28 || (resources_templateObject28 = resources_taggedTemplateLiteral(["training scroll:  Snokebomb"])))) used_banishes.add(template_string_$skill(resources_templateObject29 || (resources_templateObject29 = resources_taggedTemplateLiteral(["Snokebomb"]))));
        if (banished_with === template_string_$item(resources_templateObject30 || (resources_templateObject30 = resources_taggedTemplateLiteral(["tomayohawk-style reflex hammer"])))) used_banishes.add(template_string_$skill(resources_templateObject31 || (resources_templateObject31 = resources_taggedTemplateLiteral(["Reflex Hammer"]))));
      }
    });
    if (not_yet_banished.length === 0) return []; // All monsters banished.
  
    debug("Banish targets: ".concat(not_yet_banished.join(", ")));
    debug("Banishes used: ".concat(Array.from(used_banishes).join(", ")));
    return banishSources.filter(banish => banish.available() && !used_banishes.has(banish.do));
  }
  var wandererSources = [{
    name: "Voted Legs",
    available: () => lib_have(template_string_$item(resources_templateObject32 || (resources_templateObject32 = resources_taggedTemplateLiteral(["\"I Voted!\" sticker"])))) && (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() % 11 === 1 && property_get("lastVoteMonsterTurn") < (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() && property_get("_voteFreeFights") < 3 && (0,external_kolmafia_namespaceObject.myLevel)() >= 10 && lib_have(template_string_$item(resources_templateObject33 || (resources_templateObject33 = resources_taggedTemplateLiteral(["mutant legs"])))),
    equip: template_string_$items(resources_templateObject34 || (resources_templateObject34 = resources_taggedTemplateLiteral(["\"I Voted!\" sticker, mutant legs"]))),
    monsters: [$monster(resources_templateObject35 || (resources_templateObject35 = resources_taggedTemplateLiteral(["government bureaucrat"]))), $monster(resources_templateObject36 || (resources_templateObject36 = resources_taggedTemplateLiteral(["terrible mutant"]))), $monster(resources_templateObject37 || (resources_templateObject37 = resources_taggedTemplateLiteral(["angry ghost"]))), $monster(resources_templateObject38 || (resources_templateObject38 = resources_taggedTemplateLiteral(["annoyed snake"]))), $monster(resources_templateObject39 || (resources_templateObject39 = resources_taggedTemplateLiteral(["slime blob"])))],
    chance: () => 1 // when available
  
  }, {
    name: "Voted Arm",
    available: () => lib_have(template_string_$item(resources_templateObject40 || (resources_templateObject40 = resources_taggedTemplateLiteral(["\"I Voted!\" sticker"])))) && (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() % 11 === 1 && property_get("lastVoteMonsterTurn") < (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() && property_get("_voteFreeFights") < 3 && (0,external_kolmafia_namespaceObject.myLevel)() >= 10 && lib_have(template_string_$item(resources_templateObject41 || (resources_templateObject41 = resources_taggedTemplateLiteral(["mutant arm"])))),
    equip: template_string_$items(resources_templateObject42 || (resources_templateObject42 = resources_taggedTemplateLiteral(["\"I Voted!\" sticker, mutant arm"]))),
    monsters: [$monster(resources_templateObject43 || (resources_templateObject43 = resources_taggedTemplateLiteral(["government bureaucrat"]))), $monster(resources_templateObject44 || (resources_templateObject44 = resources_taggedTemplateLiteral(["terrible mutant"]))), $monster(resources_templateObject45 || (resources_templateObject45 = resources_taggedTemplateLiteral(["angry ghost"]))), $monster(resources_templateObject46 || (resources_templateObject46 = resources_taggedTemplateLiteral(["annoyed snake"]))), $monster(resources_templateObject47 || (resources_templateObject47 = resources_taggedTemplateLiteral(["slime blob"])))],
    chance: () => 1 // when available
  
  }, {
    name: "Voted",
    available: () => lib_have(template_string_$item(resources_templateObject48 || (resources_templateObject48 = resources_taggedTemplateLiteral(["\"I Voted!\" sticker"])))) && (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() % 11 === 1 && property_get("lastVoteMonsterTurn") < (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() && property_get("_voteFreeFights") < 3 && (0,external_kolmafia_namespaceObject.myLevel)() >= 10,
    equip: template_string_$item(resources_templateObject49 || (resources_templateObject49 = resources_taggedTemplateLiteral(["\"I Voted!\" sticker"]))),
    monsters: [$monster(resources_templateObject50 || (resources_templateObject50 = resources_taggedTemplateLiteral(["government bureaucrat"]))), $monster(resources_templateObject51 || (resources_templateObject51 = resources_taggedTemplateLiteral(["terrible mutant"]))), $monster(resources_templateObject52 || (resources_templateObject52 = resources_taggedTemplateLiteral(["angry ghost"]))), $monster(resources_templateObject53 || (resources_templateObject53 = resources_taggedTemplateLiteral(["annoyed snake"]))), $monster(resources_templateObject54 || (resources_templateObject54 = resources_taggedTemplateLiteral(["slime blob"])))],
    chance: () => 1 // when available
  
  }, {
    name: "Cursed Magnifying Glass",
    available: () => lib_have(template_string_$item(resources_templateObject55 || (resources_templateObject55 = resources_taggedTemplateLiteral(["cursed magnifying glass"])))) && property_get("_voidFreeFights") < 5 && property_get("cursedMagnifyingGlassCount") >= 13,
    equip: template_string_$item(resources_templateObject56 || (resources_templateObject56 = resources_taggedTemplateLiteral(["cursed magnifying glass"]))),
    monsters: [$monster(resources_templateObject57 || (resources_templateObject57 = resources_taggedTemplateLiteral(["void guy"]))), $monster(resources_templateObject58 || (resources_templateObject58 = resources_taggedTemplateLiteral(["void slab"]))), $monster(resources_templateObject59 || (resources_templateObject59 = resources_taggedTemplateLiteral(["void spider"])))],
    chance: () => 1 // when available
  
  }, {
    name: "Goth",
    available: () => lib_have(template_string_$familiar(resources_templateObject60 || (resources_templateObject60 = resources_taggedTemplateLiteral(["Artistic Goth Kid"])))) && property_get("_hipsterAdv") < 7,
    equip: template_string_$familiar(resources_templateObject61 || (resources_templateObject61 = resources_taggedTemplateLiteral(["Artistic Goth Kid"]))),
    monsters: [$monster(resources_templateObject62 || (resources_templateObject62 = resources_taggedTemplateLiteral(["Black Crayon Beast"]))), $monster(resources_templateObject63 || (resources_templateObject63 = resources_taggedTemplateLiteral(["Black Crayon Beetle"]))), $monster(resources_templateObject64 || (resources_templateObject64 = resources_taggedTemplateLiteral(["Black Crayon Constellation"]))), $monster(resources_templateObject65 || (resources_templateObject65 = resources_taggedTemplateLiteral(["Black Crayon Golem"]))), $monster(resources_templateObject66 || (resources_templateObject66 = resources_taggedTemplateLiteral(["Black Crayon Demon"]))), $monster(resources_templateObject67 || (resources_templateObject67 = resources_taggedTemplateLiteral(["Black Crayon Man"]))), $monster(resources_templateObject68 || (resources_templateObject68 = resources_taggedTemplateLiteral(["Black Crayon Elemental"]))), $monster(resources_templateObject69 || (resources_templateObject69 = resources_taggedTemplateLiteral(["Black Crayon Crimbo Elf"]))), $monster(resources_templateObject70 || (resources_templateObject70 = resources_taggedTemplateLiteral(["Black Crayon Fish"]))), $monster(resources_templateObject71 || (resources_templateObject71 = resources_taggedTemplateLiteral(["Black Crayon Goblin"]))), $monster(resources_templateObject72 || (resources_templateObject72 = resources_taggedTemplateLiteral(["Black Crayon Hippy"]))), $monster(resources_templateObject73 || (resources_templateObject73 = resources_taggedTemplateLiteral(["Black Crayon Hobo"]))), $monster(resources_templateObject74 || (resources_templateObject74 = resources_taggedTemplateLiteral(["Black Crayon Shambling Monstrosity"]))), $monster(resources_templateObject75 || (resources_templateObject75 = resources_taggedTemplateLiteral(["Black Crayon Manloid"]))), $monster(resources_templateObject76 || (resources_templateObject76 = resources_taggedTemplateLiteral(["Black Crayon Mer-kin"]))), $monster(resources_templateObject77 || (resources_templateObject77 = resources_taggedTemplateLiteral(["Black Crayon Frat Orc"]))), $monster(resources_templateObject78 || (resources_templateObject78 = resources_taggedTemplateLiteral(["Black Crayon Penguin"]))), $monster(resources_templateObject79 || (resources_templateObject79 = resources_taggedTemplateLiteral(["Black Crayon Pirate"]))), $monster(resources_templateObject80 || (resources_templateObject80 = resources_taggedTemplateLiteral(["Black Crayon Flower"]))), $monster(_templateObject81 || (_templateObject81 = resources_taggedTemplateLiteral(["Black Crayon Slime"]))), $monster(_templateObject82 || (_templateObject82 = resources_taggedTemplateLiteral(["Black Crayon Undead Thing"]))), $monster(_templateObject83 || (_templateObject83 = resources_taggedTemplateLiteral(["Black Crayon Spiraling Shape"])))],
    chance: () => [0.5, 0.4, 0.3, 0.2, 0.1, 0.1, 0.1, 0][property_get("_hipsterAdv")]
  }, {
    name: "Hipster",
    available: () => lib_have(template_string_$familiar(_templateObject84 || (_templateObject84 = resources_taggedTemplateLiteral(["Mini-Hipster"])))) && property_get("_hipsterAdv") < 7,
    equip: template_string_$familiar(_templateObject85 || (_templateObject85 = resources_taggedTemplateLiteral(["Mini-Hipster"]))),
    monsters: [$monster(_templateObject86 || (_templateObject86 = resources_taggedTemplateLiteral(["angry bassist"]))), $monster(_templateObject87 || (_templateObject87 = resources_taggedTemplateLiteral(["blue-haired girl"]))), $monster(_templateObject88 || (_templateObject88 = resources_taggedTemplateLiteral(["evil ex-girlfriend"]))), $monster(_templateObject89 || (_templateObject89 = resources_taggedTemplateLiteral(["peeved roommate"]))), $monster(_templateObject90 || (_templateObject90 = resources_taggedTemplateLiteral(["random scenester"])))],
    chance: () => [0.5, 0.4, 0.3, 0.2, 0.1, 0.1, 0.1, 0][property_get("_hipsterAdv")]
  }, {
    name: "Kramco (Drones)",
    available: () => lib_have(template_string_$item(_templateObject91 || (_templateObject91 = resources_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"])))) && (0,external_kolmafia_namespaceObject.myLevel)() >= 10 && lib_have(template_string_$familiar(_templateObject92 || (_templateObject92 = resources_taggedTemplateLiteral(["Grey Goose"])))) && (0,external_kolmafia_namespaceObject.familiarWeight)(template_string_$familiar(_templateObject93 || (_templateObject93 = resources_taggedTemplateLiteral(["Grey Goose"])))) >= 6 && getKramcoWandererChance() === 1,
    equip: {
      offhand: template_string_$item(_templateObject94 || (_templateObject94 = resources_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"]))),
      familiar: template_string_$familiar(_templateObject95 || (_templateObject95 = resources_taggedTemplateLiteral(["Grey Goose"]))),
      // Get 11 famexp at the end of the fight, to maintain goose weight
      weapon: template_string_$item(_templateObject96 || (_templateObject96 = resources_taggedTemplateLiteral(["yule hatchet"]))),
      famequip: template_string_$item(_templateObject97 || (_templateObject97 = resources_taggedTemplateLiteral(["grey down vest"]))),
      acc1: template_string_$item(_templateObject98 || (_templateObject98 = resources_taggedTemplateLiteral(["teacher's pen"]))),
      acc2: template_string_$item(_templateObject99 || (_templateObject99 = resources_taggedTemplateLiteral(["teacher's pen"]))),
      acc3: template_string_$item(_templateObject100 || (_templateObject100 = resources_taggedTemplateLiteral(["teacher's pen"])))
    },
    monsters: [$monster(_templateObject101 || (_templateObject101 = resources_taggedTemplateLiteral(["sausage goblin"])))],
    chance: () => getKramcoWandererChance(),
    macro: new Macro().trySkill(template_string_$skill(_templateObject102 || (_templateObject102 = resources_taggedTemplateLiteral(["Emit Matter Duplicating Drones"]))))
  }, {
    name: "Kramco",
    available: () => lib_have(template_string_$item(_templateObject103 || (_templateObject103 = resources_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"])))) && (0,external_kolmafia_namespaceObject.myLevel)() >= 10,
    equip: template_string_$item(_templateObject104 || (_templateObject104 = resources_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"]))),
    monsters: [$monster(_templateObject105 || (_templateObject105 = resources_taggedTemplateLiteral(["sausage goblin"])))],
    chance: () => getKramcoWandererChance()
  }];
  function canChargeVoid() {
    return property_get("_voidFreeFights") < 5 && property_get("cursedMagnifyingGlassCount") < 13;
  }
  // Gear and familiar to use for runaways (i.e., Bandersnatch or Stomping Boots)
  var familiarPants = template_string_$items(_templateObject106 || (_templateObject106 = resources_taggedTemplateLiteral(["repaid diaper, Great Wolf's beastly trousers, Greaves of the Murk Lord"]))).find(item => lib_have(item));
  var familiarEquip = lib_have(template_string_$item(_templateObject107 || (_templateObject107 = resources_taggedTemplateLiteral(["astral pet sweater"])))) ? template_string_$item(_templateObject108 || (_templateObject108 = resources_taggedTemplateLiteral(["astral pet sweater"]))) : lib_have(template_string_$familiar(_templateObject109 || (_templateObject109 = resources_taggedTemplateLiteral(["Cornbeefadon"])))) ? template_string_$item(_templateObject110 || (_templateObject110 = resources_taggedTemplateLiteral(["amulet coin"]))) : lib_have(template_string_$familiar(_templateObject111 || (_templateObject111 = resources_taggedTemplateLiteral(["Mu"])))) ? template_string_$item(_templateObject112 || (_templateObject112 = resources_taggedTemplateLiteral(["luck incense"]))) : null;
  var familiarGear = [].concat(resources_toConsumableArray(template_string_$items(_templateObject113 || (_templateObject113 = resources_taggedTemplateLiteral(["Daylight Shavings Helmet, Buddy Bjorn, Stephen's lab coat, hewn moon-rune spoon"])))), resources_toConsumableArray(familiarEquip ? [familiarEquip] : []), resources_toConsumableArray(familiarPants ? [familiarPants] : []));
  var familiarGearBonus = 5 + utils_sum(familiarGear, item => modifier_get("Familiar Weight", item));
  var familiarEffectBonus = 15;
  var runawayFamiliar = lib_have(template_string_$familiar(_templateObject114 || (_templateObject114 = resources_taggedTemplateLiteral(["Frumious Bandersnatch"])))) ? template_string_$familiar(_templateObject115 || (_templateObject115 = resources_taggedTemplateLiteral(["Frumious Bandersnatch"]))) : lib_have(template_string_$familiar(_templateObject116 || (_templateObject116 = resources_taggedTemplateLiteral(["Pair of Stomping Boots"])))) ? template_string_$familiar(_templateObject117 || (_templateObject117 = resources_taggedTemplateLiteral(["Pair of Stomping Boots"]))) : template_string_$familiar(_templateObject118 || (_templateObject118 = resources_taggedTemplateLiteral(["none"])));
  
  function availableFamiliarRunaways(otherBonus) {
    if (runawayFamiliar === template_string_$familiar(_templateObject119 || (_templateObject119 = resources_taggedTemplateLiteral(["none"])))) return 0;
    return (0,external_kolmafia_namespaceObject.floor)(((0,external_kolmafia_namespaceObject.familiarWeight)(runawayFamiliar) + familiarEffectBonus + familiarGearBonus + otherBonus + (lib_have(template_string_$effect(_templateObject120 || (_templateObject120 = resources_taggedTemplateLiteral(["Open Heart Surgery"])))) ? 10 : 0)) / 5);
  }
  
  var runawayValue = lib_have(template_string_$item(_templateObject121 || (_templateObject121 = resources_taggedTemplateLiteral(["Greatest American Pants"])))) || lib_have(template_string_$item(_templateObject122 || (_templateObject122 = resources_taggedTemplateLiteral(["navel ring of navel gazing"])))) ? 0.8 * property_get("valueOfAdventure") : property_get("valueOfAdventure");
  var runawaySources = [{
    name: "Bowl Curveball",
    available: () => lib_have(template_string_$item(_templateObject123 || (_templateObject123 = resources_taggedTemplateLiteral(["cosmic bowling ball"])))),
    do: new Macro().skill(template_string_$skill(_templateObject124 || (_templateObject124 = resources_taggedTemplateLiteral(["Bowl a Curveball"])))),
    chance: () => 1,
    banishes: true
  }, {
    name: "Asdon Martin",
    available: () => {
      // From libram
      if (!AsdonMartin_installed()) return false;
      var banishes = property_get("banishedMonsters").split(":");
      var bumperIndex = banishes.map(string => string.toLowerCase()).indexOf("spring-loaded front bumper");
      if (bumperIndex === -1) return true;
      return (0,external_kolmafia_namespaceObject.myTurncount)() - parseInt(banishes[bumperIndex + 1]) > 30;
    },
    prepare: () => fillTo(50),
    do: new Macro().skill(template_string_$skill(_templateObject125 || (_templateObject125 = resources_taggedTemplateLiteral(["Asdon Martin: Spring-Loaded Front Bumper"])))),
    chance: () => 1,
    banishes: true
  }, {
    name: "Familiar Runaways",
    available: () => runawayFamiliar !== template_string_$familiar(_templateObject126 || (_templateObject126 = resources_taggedTemplateLiteral(["none"]))) && lib_have(runawayFamiliar) && availableFamiliarRunaways(5) > property_get("_banderRunaways"),
    // 5 from iFlail
    prepare: () => {
      (0,external_kolmafia_namespaceObject.bjornifyFamiliar)(template_string_$familiar(_templateObject127 || (_templateObject127 = resources_taggedTemplateLiteral(["Gelatinous Cubeling"]))));
  
      if ((0,external_kolmafia_namespaceObject.floor)(((0,external_kolmafia_namespaceObject.familiarWeight)(runawayFamiliar) + (0,external_kolmafia_namespaceObject.weightAdjustment)()) / 5) <= property_get("_banderRunaways")) {
        throw "Trying to use Bandersnatch or Stomping Boots, but weight was overestimated.";
      }
  
      if (runawayFamiliar === template_string_$familiar(_templateObject128 || (_templateObject128 = resources_taggedTemplateLiteral(["Frumious Bandersnatch"])))) {
        ensureEffect(template_string_$effect(_templateObject129 || (_templateObject129 = resources_taggedTemplateLiteral(["Ode to Booze"]))), 5);
      }
    },
    equip: {
      familiar: runawayFamiliar,
      equip: [].concat(resources_toConsumableArray(familiarGear), [template_string_$item(_templateObject130 || (_templateObject130 = resources_taggedTemplateLiteral(["iFlail"])))])
    },
    do: new Macro().runaway(),
    chance: () => 1,
    banishes: false
  }, {
    name: "Familiar Runaways (with offhand)",
    // Use the potted plant as long as possible
    available: () => runawayFamiliar !== template_string_$familiar(_templateObject131 || (_templateObject131 = resources_taggedTemplateLiteral(["none"]))) && lib_have(runawayFamiliar) && availableFamiliarRunaways(10) > property_get("_banderRunaways"),
    // 10 from iFlails
    prepare: () => {
      (0,external_kolmafia_namespaceObject.bjornifyFamiliar)(template_string_$familiar(_templateObject132 || (_templateObject132 = resources_taggedTemplateLiteral(["Gelatinous Cubeling"]))));
  
      if ((0,external_kolmafia_namespaceObject.floor)(((0,external_kolmafia_namespaceObject.familiarWeight)(runawayFamiliar) + (0,external_kolmafia_namespaceObject.weightAdjustment)()) / 5) <= property_get("_banderRunaways")) {
        throw "Trying to use last Bandersnatch or Stomping Boots, but weight was overestimated.";
      }
  
      if (runawayFamiliar === template_string_$familiar(_templateObject133 || (_templateObject133 = resources_taggedTemplateLiteral(["Frumious Bandersnatch"])))) {
        ensureEffect(template_string_$effect(_templateObject134 || (_templateObject134 = resources_taggedTemplateLiteral(["Ode to Booze"]))), 5);
      }
    },
    equip: {
      familiar: runawayFamiliar,
      equip: [].concat(resources_toConsumableArray(familiarGear), [template_string_$item(_templateObject135 || (_templateObject135 = resources_taggedTemplateLiteral(["iFlail"]))), template_string_$item(_templateObject136 || (_templateObject136 = resources_taggedTemplateLiteral(["familiar scrapbook"])))])
    },
    do: new Macro().runaway(),
    chance: () => 1,
    banishes: false
  }, {
    name: "Blank-Out",
    prepare: () => {
      if (!lib_have(template_string_$item(_templateObject137 || (_templateObject137 = resources_taggedTemplateLiteral(["glob of Blank-Out"]))))) {
        if (!lib_have(template_string_$item(_templateObject138 || (_templateObject138 = resources_taggedTemplateLiteral(["bottle of Blank-Out"]))))) {
          (0,external_kolmafia_namespaceObject.buy)(1, template_string_$item(_templateObject139 || (_templateObject139 = resources_taggedTemplateLiteral(["bottle of Blank-Out"]))), 5 * runawayValue);
        }
  
        (0,external_kolmafia_namespaceObject.use)(template_string_$item(_templateObject140 || (_templateObject140 = resources_taggedTemplateLiteral(["bottle of Blank-Out"]))));
      }
    },
    available: () => lib_have(template_string_$item(_templateObject141 || (_templateObject141 = resources_taggedTemplateLiteral(["glob of Blank-Out"])))) || (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(_templateObject142 || (_templateObject142 = resources_taggedTemplateLiteral(["bottle of Blank-Out"])))) < 5 * runawayValue && !property_get("_blankoutUsed"),
    do: new Macro().tryItem(template_string_$item(_templateObject143 || (_templateObject143 = resources_taggedTemplateLiteral(["glob of Blank-Out"])))),
    chance: () => 1,
    banishes: false
  }, {
    name: "GAP",
    available: () => lib_have(template_string_$item(_templateObject144 || (_templateObject144 = resources_taggedTemplateLiteral(["Greatest American Pants"])))),
    equip: template_string_$item(_templateObject145 || (_templateObject145 = resources_taggedTemplateLiteral(["Greatest American Pants"]))),
    do: new Macro().runaway(),
    chance: () => property_get("_navelRunaways") < 3 ? 1 : 0.2,
    banishes: false
  }, {
    name: "Navel Ring",
    available: () => lib_have(template_string_$item(_templateObject146 || (_templateObject146 = resources_taggedTemplateLiteral(["navel ring of navel gazing"])))),
    equip: template_string_$item(_templateObject147 || (_templateObject147 = resources_taggedTemplateLiteral(["navel ring of navel gazing"]))),
    do: new Macro().runaway(),
    chance: () => property_get("_navelRunaways") < 3 ? 1 : 0.2,
    banishes: false
  }, {
    name: "Peppermint Parasol",
    available: () => lib_have(template_string_$item(_templateObject148 || (_templateObject148 = resources_taggedTemplateLiteral(["peppermint parasol"])))) || (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(_templateObject149 || (_templateObject149 = resources_taggedTemplateLiteral(["peppermint parasol"])))) < 10 * property_get("valueOfAdventure"),
    prepare: () => {
      if (lib_have(template_string_$item(_templateObject150 || (_templateObject150 = resources_taggedTemplateLiteral(["peppermint parasol"]))))) return;
  
      if ((0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(_templateObject151 || (_templateObject151 = resources_taggedTemplateLiteral(["peppermint sprout"])))) >= 5) {
        (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(_templateObject152 || (_templateObject152 = resources_taggedTemplateLiteral(["peppermint parasol"]))));
      } else if ((0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(_templateObject153 || (_templateObject153 = resources_taggedTemplateLiteral(["peppermint parasol"])))) < 5 * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(_templateObject154 || (_templateObject154 = resources_taggedTemplateLiteral(["peppermint sprout"]))))) {
        (0,external_kolmafia_namespaceObject.buy)(template_string_$item(_templateObject155 || (_templateObject155 = resources_taggedTemplateLiteral(["peppermint parasol"]))), 1, (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(_templateObject156 || (_templateObject156 = resources_taggedTemplateLiteral(["peppermint parasol"])))));
      } else {
        (0,external_kolmafia_namespaceObject.buy)(template_string_$item(_templateObject157 || (_templateObject157 = resources_taggedTemplateLiteral(["peppermint sprout"]))), 5 - (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(_templateObject158 || (_templateObject158 = resources_taggedTemplateLiteral(["peppermint sprout"])))), (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(_templateObject159 || (_templateObject159 = resources_taggedTemplateLiteral(["peppermint sprout"])))));
        (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(_templateObject160 || (_templateObject160 = resources_taggedTemplateLiteral(["peppermint parasol"]))));
      }
    },
    do: new Macro().item(template_string_$item(_templateObject161 || (_templateObject161 = resources_taggedTemplateLiteral(["peppermint parasol"])))),
    chance: () => property_get("_navelRunaways") < 3 ? 1 : 0.2,
    banishes: false
  }];
  var freekillSources = [{
    name: "Lil' Doctor™ bag",
    available: () => lib_have(template_string_$item(_templateObject162 || (_templateObject162 = resources_taggedTemplateLiteral(["Lil' Doctor\u2122 bag"])))) && property_get("_chestXRayUsed") < 3,
    do: template_string_$skill(_templateObject163 || (_templateObject163 = resources_taggedTemplateLiteral(["Chest X-Ray"]))),
    equip: template_string_$item(_templateObject164 || (_templateObject164 = resources_taggedTemplateLiteral(["Lil' Doctor\u2122 bag"])))
  }, {
    name: "Gingerbread Mob Hit",
    available: () => lib_have(template_string_$skill(_templateObject165 || (_templateObject165 = resources_taggedTemplateLiteral(["Gingerbread Mob Hit"])))) && !property_get("_gingerbreadMobHitUsed"),
    do: template_string_$skill(_templateObject166 || (_templateObject166 = resources_taggedTemplateLiteral(["Gingerbread Mob Hit"])))
  }, {
    name: "Shattering Punch",
    available: () => lib_have(template_string_$skill(_templateObject167 || (_templateObject167 = resources_taggedTemplateLiteral(["Shattering Punch"])))) && property_get("_shatteringPunchUsed") < 3,
    do: template_string_$skill(_templateObject168 || (_templateObject168 = resources_taggedTemplateLiteral(["Shattering Punch"])))
  }, {
    name: "Replica bat-oomerang",
    available: () => lib_have(template_string_$item(_templateObject169 || (_templateObject169 = resources_taggedTemplateLiteral(["replica bat-oomerang"])))) && property_get("_usedReplicaBatoomerang") < 3,
    do: template_string_$item(_templateObject170 || (_templateObject170 = resources_taggedTemplateLiteral(["replica bat-oomerang"])))
  }, {
    name: "The Jokester's gun",
    available: () => lib_have(template_string_$item(_templateObject171 || (_templateObject171 = resources_taggedTemplateLiteral(["The Jokester's gun"])))) && !property_get("_firedJokestersGun"),
    do: template_string_$skill(_templateObject172 || (_templateObject172 = resources_taggedTemplateLiteral(["Fire the Jokester's Gun"]))),
    equip: template_string_$item(_templateObject173 || (_templateObject173 = resources_taggedTemplateLiteral(["The Jokester's gun"])))
  }, {
    name: "Asdon Martin: Missile Launcher",
    available: () => AsdonMartin_installed() && !property_get("_missileLauncherUsed"),
    prepare: () => fillTo(100),
    do: template_string_$skill(_templateObject174 || (_templateObject174 = resources_taggedTemplateLiteral(["Asdon Martin: Missile Launcher"])))
  }];
  ;// CONCATENATED MODULE: ./src/tasks/level11_hidden.ts
  var level11_hidden_templateObject, level11_hidden_templateObject2, level11_hidden_templateObject3, level11_hidden_templateObject4, level11_hidden_templateObject5, level11_hidden_templateObject6, level11_hidden_templateObject7, level11_hidden_templateObject8, level11_hidden_templateObject9, level11_hidden_templateObject10, level11_hidden_templateObject11, level11_hidden_templateObject12, level11_hidden_templateObject13, level11_hidden_templateObject14, level11_hidden_templateObject15, level11_hidden_templateObject16, level11_hidden_templateObject17, level11_hidden_templateObject18, level11_hidden_templateObject19, level11_hidden_templateObject20, level11_hidden_templateObject21, level11_hidden_templateObject22, level11_hidden_templateObject23, level11_hidden_templateObject24, level11_hidden_templateObject25, level11_hidden_templateObject26, level11_hidden_templateObject27, level11_hidden_templateObject28, level11_hidden_templateObject29, level11_hidden_templateObject30, level11_hidden_templateObject31, level11_hidden_templateObject32, level11_hidden_templateObject33, level11_hidden_templateObject34, level11_hidden_templateObject35, level11_hidden_templateObject36, level11_hidden_templateObject37, level11_hidden_templateObject38, level11_hidden_templateObject39, level11_hidden_templateObject40, level11_hidden_templateObject41, level11_hidden_templateObject42, level11_hidden_templateObject43, level11_hidden_templateObject44, level11_hidden_templateObject45, level11_hidden_templateObject46, level11_hidden_templateObject47, level11_hidden_templateObject48, level11_hidden_templateObject49, level11_hidden_templateObject50, level11_hidden_templateObject51, level11_hidden_templateObject52, level11_hidden_templateObject53, level11_hidden_templateObject54, level11_hidden_templateObject55, level11_hidden_templateObject56, level11_hidden_templateObject57, level11_hidden_templateObject58, level11_hidden_templateObject59, level11_hidden_templateObject60, level11_hidden_templateObject61, level11_hidden_templateObject62, level11_hidden_templateObject63, level11_hidden_templateObject64, level11_hidden_templateObject65, level11_hidden_templateObject66, level11_hidden_templateObject67, level11_hidden_templateObject68, level11_hidden_templateObject69, level11_hidden_templateObject70, level11_hidden_templateObject71, level11_hidden_templateObject72, level11_hidden_templateObject73, level11_hidden_templateObject74, level11_hidden_templateObject75, level11_hidden_templateObject76, level11_hidden_templateObject77, level11_hidden_templateObject78, level11_hidden_templateObject79, level11_hidden_templateObject80, level11_hidden_templateObject81, level11_hidden_templateObject82, level11_hidden_templateObject83;
  
  function level11_hidden_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  
  
  function manualChoice(whichchoice, option) {
    return (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=".concat(whichchoice, "&pwd=").concat((0,external_kolmafia_namespaceObject.myHash)(), "&option=").concat(option));
  }
  
  var Temple = [{
    name: "Forest Coin",
    after: ["Mosquito/Burn Delay"],
    completed: () => lib_have(template_string_$item(level11_hidden_templateObject || (level11_hidden_templateObject = level11_hidden_taggedTemplateLiteral(["tree-holed coin"])))) || lib_have(template_string_$item(level11_hidden_templateObject2 || (level11_hidden_templateObject2 = level11_hidden_taggedTemplateLiteral(["Spooky Temple map"])))) || step("questM16Temple") === 999,
    do: $location(level11_hidden_templateObject3 || (level11_hidden_templateObject3 = level11_hidden_taggedTemplateLiteral(["The Spooky Forest"]))),
    choices: {
      502: 2,
      505: 2,
      334: 1
    },
    outfit: {
      modifier: "-combat"
    },
    limit: {
      soft: 10
    }
  }, {
    name: "Forest Map",
    after: ["Forest Coin"],
    completed: () => lib_have(template_string_$item(level11_hidden_templateObject4 || (level11_hidden_templateObject4 = level11_hidden_taggedTemplateLiteral(["Spooky Temple map"])))) || step("questM16Temple") === 999,
    do: $location(level11_hidden_templateObject5 || (level11_hidden_templateObject5 = level11_hidden_taggedTemplateLiteral(["The Spooky Forest"]))),
    choices: {
      502: 3,
      506: 3,
      507: 1,
      334: 1
    },
    outfit: {
      modifier: "-combat"
    },
    limit: {
      soft: 10
    }
  }, {
    name: "Forest Sapling",
    after: ["Mosquito/Burn Delay"],
    completed: () => lib_have(template_string_$item(level11_hidden_templateObject6 || (level11_hidden_templateObject6 = level11_hidden_taggedTemplateLiteral(["spooky sapling"])))) || step("questM16Temple") === 999,
    do: $location(level11_hidden_templateObject7 || (level11_hidden_templateObject7 = level11_hidden_taggedTemplateLiteral(["The Spooky Forest"]))),
    choices: {
      502: 1,
      503: 3,
      504: 3,
      334: 1
    },
    outfit: {
      modifier: "-combat"
    },
    limit: {
      soft: 10
    }
  }, {
    name: "Open Temple",
    after: ["Forest Coin", "Forest Map", "Forest Sapling"],
    acquire: [{
      item: template_string_$item(level11_hidden_templateObject8 || (level11_hidden_templateObject8 = level11_hidden_taggedTemplateLiteral(["Spooky-Gro fertilizer"])))
    }],
    completed: () => step("questM16Temple") === 999,
    do: () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(level11_hidden_templateObject9 || (level11_hidden_templateObject9 = level11_hidden_taggedTemplateLiteral(["Spooky Temple map"])))),
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Temple Nostril",
    after: ["Open Temple"],
    acquire: [{
      item: template_string_$item(level11_hidden_templateObject10 || (level11_hidden_templateObject10 = level11_hidden_taggedTemplateLiteral(["stone wool"])))
    }],
    completed: () => lib_have(template_string_$item(level11_hidden_templateObject11 || (level11_hidden_templateObject11 = level11_hidden_taggedTemplateLiteral(["the Nostril of the Serpent"])))) || step("questL11Worship") >= 3,
    do: $location(level11_hidden_templateObject12 || (level11_hidden_templateObject12 = level11_hidden_taggedTemplateLiteral(["The Hidden Temple"]))),
    choices: {
      579: 2,
      582: 1
    },
    effects: $effects(level11_hidden_templateObject13 || (level11_hidden_templateObject13 = level11_hidden_taggedTemplateLiteral(["Stone-Faced"]))),
    limit: {
      tries: 1
    }
  }, {
    name: "Open City",
    after: ["Temple Nostril", "Macguffin/Diary"],
    acquire: [{
      item: template_string_$item(level11_hidden_templateObject14 || (level11_hidden_templateObject14 = level11_hidden_taggedTemplateLiteral(["stone wool"])))
    }],
    completed: () => step("questL11Worship") >= 3,
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("adventure.php?snarfblat=280");
      manualChoice(582, 2);
      manualChoice(580, 2);
      manualChoice(584, 4);
      manualChoice(580, 1);
      manualChoice(123, 2);
      (0,external_kolmafia_namespaceObject.visitUrl)("choice.php");
      (0,external_kolmafia_namespaceObject.cliExecute)("dvorak");
      manualChoice(125, 3);
    },
    effects: $effects(level11_hidden_templateObject15 || (level11_hidden_templateObject15 = level11_hidden_taggedTemplateLiteral(["Stone-Faced"]))),
    limit: {
      tries: 1
    }
  }];
  var use_writ = new Macro().if_( // eslint-disable-next-line libram/verify-constants
  "!haseffect ".concat((0,external_kolmafia_namespaceObject.toInt)(template_string_$effect(level11_hidden_templateObject16 || (level11_hidden_templateObject16 = level11_hidden_taggedTemplateLiteral(["Everything Looks Green"]))))), Macro.tryItem(template_string_$item(level11_hidden_templateObject17 || (level11_hidden_templateObject17 = level11_hidden_taggedTemplateLiteral(["short writ of habeas corpus"])))));
  var Apartment = [{
    name: "Open Apartment",
    after: ["Open City"],
    completed: () => property_get("hiddenApartmentProgress") >= 1,
    do: $location(level11_hidden_templateObject18 || (level11_hidden_templateObject18 = level11_hidden_taggedTemplateLiteral(["An Overgrown Shrine (Northwest)"]))),
    outfit: {
      equip: template_string_$items(level11_hidden_templateObject19 || (level11_hidden_templateObject19 = level11_hidden_taggedTemplateLiteral(["antique machete"])))
    },
    choices: {
      781: 1
    },
    limit: {
      tries: 4
    },
    freecombat: true,
    acquire: [{
      item: template_string_$item(level11_hidden_templateObject20 || (level11_hidden_templateObject20 = level11_hidden_taggedTemplateLiteral(["antique machete"])))
    }]
  }, {
    name: "Apartment Files",
    // Get the last McClusky files here if needed, as a backup plan
    after: ["Office Files"],
    completed: () => lib_have(template_string_$item(level11_hidden_templateObject21 || (level11_hidden_templateObject21 = level11_hidden_taggedTemplateLiteral(["McClusky file (page 5)"])))) || lib_have(template_string_$item(level11_hidden_templateObject22 || (level11_hidden_templateObject22 = level11_hidden_taggedTemplateLiteral(["McClusky file (complete)"])))) || property_get("hiddenOfficeProgress") >= 7,
    do: $location(level11_hidden_templateObject23 || (level11_hidden_templateObject23 = level11_hidden_taggedTemplateLiteral(["The Hidden Apartment Building"]))),
    combat: new combat_CombatStrategy().killHard($monster(level11_hidden_templateObject24 || (level11_hidden_templateObject24 = level11_hidden_taggedTemplateLiteral(["ancient protector spirit (The Hidden Apartment Building)"])))).kill($monster(level11_hidden_templateObject25 || (level11_hidden_templateObject25 = level11_hidden_taggedTemplateLiteral(["pygmy witch accountant"])))).banish($monsters(level11_hidden_templateObject26 || (level11_hidden_templateObject26 = level11_hidden_taggedTemplateLiteral(["pygmy janitor, pygmy witch lawyer"])))).macro(new Macro().step(use_writ), $monster(level11_hidden_templateObject27 || (level11_hidden_templateObject27 = level11_hidden_taggedTemplateLiteral(["pygmy shaman"])))).ignoreNoBanish($monster(level11_hidden_templateObject28 || (level11_hidden_templateObject28 = level11_hidden_taggedTemplateLiteral(["pygmy shaman"])))).ignore(),
    limit: {
      tries: 9
    },
    choices: {
      780: 1
    }
  }, {
    name: "Apartment",
    after: ["Open Apartment", "Apartment Files"],
    // Wait until after all needed pygmy witch lawyers are done
    completed: () => property_get("hiddenApartmentProgress") >= 7,
    acquire: [{
      item: template_string_$item(level11_hidden_templateObject29 || (level11_hidden_templateObject29 = level11_hidden_taggedTemplateLiteral(["short writ of habeas corpus"]))),
      num: 1,
      price: runawayValue,
      optional: true
    }],
    do: $location(level11_hidden_templateObject30 || (level11_hidden_templateObject30 = level11_hidden_taggedTemplateLiteral(["The Hidden Apartment Building"]))),
    combat: new combat_CombatStrategy().killHard($monster(level11_hidden_templateObject31 || (level11_hidden_templateObject31 = level11_hidden_taggedTemplateLiteral(["ancient protector spirit (The Hidden Apartment Building)"])))).banish($monsters(level11_hidden_templateObject32 || (level11_hidden_templateObject32 = level11_hidden_taggedTemplateLiteral(["pygmy janitor, pygmy witch lawyer, pygmy witch accountant"])))).macro(new Macro().step(use_writ), $monster(level11_hidden_templateObject33 || (level11_hidden_templateObject33 = level11_hidden_taggedTemplateLiteral(["pygmy shaman"])))).ignoreNoBanish($monster(level11_hidden_templateObject34 || (level11_hidden_templateObject34 = level11_hidden_taggedTemplateLiteral(["pygmy shaman"])))).ignore(),
    choices: {
      780: 1
    },
    limit: {
      tries: 9
    }
  }, {
    name: "Finish Apartment",
    after: ["Apartment"],
    completed: () => property_get("hiddenApartmentProgress") >= 8,
    do: $location(level11_hidden_templateObject35 || (level11_hidden_templateObject35 = level11_hidden_taggedTemplateLiteral(["An Overgrown Shrine (Northwest)"]))),
    choices: {
      781: 2
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }];
  var Office = [{
    name: "Open Office",
    after: ["Open City"],
    completed: () => property_get("hiddenOfficeProgress") >= 1,
    do: $location(level11_hidden_templateObject36 || (level11_hidden_templateObject36 = level11_hidden_taggedTemplateLiteral(["An Overgrown Shrine (Northeast)"]))),
    outfit: {
      equip: template_string_$items(level11_hidden_templateObject37 || (level11_hidden_templateObject37 = level11_hidden_taggedTemplateLiteral(["antique machete"])))
    },
    choices: {
      785: 1
    },
    limit: {
      tries: 4
    },
    freecombat: true,
    acquire: [{
      item: template_string_$item(level11_hidden_templateObject38 || (level11_hidden_templateObject38 = level11_hidden_taggedTemplateLiteral(["antique machete"])))
    }]
  }, {
    name: "Office Files",
    after: ["Open Office"],
    completed: () => lib_have(template_string_$item(level11_hidden_templateObject39 || (level11_hidden_templateObject39 = level11_hidden_taggedTemplateLiteral(["McClusky file (page 1)"])))) && lib_have(template_string_$item(level11_hidden_templateObject40 || (level11_hidden_templateObject40 = level11_hidden_taggedTemplateLiteral(["McClusky file (page 2)"])))) && lib_have(template_string_$item(level11_hidden_templateObject41 || (level11_hidden_templateObject41 = level11_hidden_taggedTemplateLiteral(["McClusky file (page 3)"])))) && lib_have(template_string_$item(level11_hidden_templateObject42 || (level11_hidden_templateObject42 = level11_hidden_taggedTemplateLiteral(["McClusky file (page 4)"])))) && lib_have(template_string_$item(level11_hidden_templateObject43 || (level11_hidden_templateObject43 = level11_hidden_taggedTemplateLiteral(["McClusky file (page 5)"])))) || lib_have(template_string_$item(level11_hidden_templateObject44 || (level11_hidden_templateObject44 = level11_hidden_taggedTemplateLiteral(["McClusky file (complete)"])))) || property_get("hiddenOfficeProgress") >= 7 || $location(level11_hidden_templateObject45 || (level11_hidden_templateObject45 = level11_hidden_taggedTemplateLiteral(["The Hidden Office Building"]))).turnsSpent >= 10,
    do: $location(level11_hidden_templateObject46 || (level11_hidden_templateObject46 = level11_hidden_taggedTemplateLiteral(["The Hidden Office Building"]))),
    combat: new combat_CombatStrategy().kill($monster(level11_hidden_templateObject47 || (level11_hidden_templateObject47 = level11_hidden_taggedTemplateLiteral(["pygmy witch accountant"])))).banish($monsters(level11_hidden_templateObject48 || (level11_hidden_templateObject48 = level11_hidden_taggedTemplateLiteral(["pygmy janitor, pygmy headhunter, pygmy witch lawyer"])))),
    choices: {
      786: 2
    },
    limit: {
      tries: 10
    }
  }, {
    name: "Office Clip",
    after: ["Office Files", "Apartment Files"],
    acquire: [{
      item: template_string_$item(level11_hidden_templateObject49 || (level11_hidden_templateObject49 = level11_hidden_taggedTemplateLiteral(["short writ of habeas corpus"]))),
      num: 1,
      price: runawayValue,
      optional: true
    }],
    completed: () => lib_have(template_string_$item(level11_hidden_templateObject50 || (level11_hidden_templateObject50 = level11_hidden_taggedTemplateLiteral(["boring binder clip"])))) || lib_have(template_string_$item(level11_hidden_templateObject51 || (level11_hidden_templateObject51 = level11_hidden_taggedTemplateLiteral(["McClusky file (complete)"])))) || property_get("hiddenOfficeProgress") >= 7,
    do: $location(level11_hidden_templateObject52 || (level11_hidden_templateObject52 = level11_hidden_taggedTemplateLiteral(["The Hidden Office Building"]))),
    choices: {
      786: 2
    },
    combat: new combat_CombatStrategy().macro(use_writ, $monsters(level11_hidden_templateObject53 || (level11_hidden_templateObject53 = level11_hidden_taggedTemplateLiteral(["pygmy witch accountant, pygmy janitor, pygmy headhunter, pygmy witch lawyer"])))).ignore(),
    limit: {
      tries: 6
    }
  }, {
    name: "Office Boss",
    after: ["Office Clip"],
    acquire: [{
      item: template_string_$item(level11_hidden_templateObject54 || (level11_hidden_templateObject54 = level11_hidden_taggedTemplateLiteral(["short writ of habeas corpus"]))),
      num: 1,
      price: runawayValue,
      optional: true
    }],
    completed: () => property_get("hiddenOfficeProgress") >= 7,
    do: $location(level11_hidden_templateObject55 || (level11_hidden_templateObject55 = level11_hidden_taggedTemplateLiteral(["The Hidden Office Building"]))),
    choices: {
      786: 1
    },
    combat: new combat_CombatStrategy().killHard($monster(level11_hidden_templateObject56 || (level11_hidden_templateObject56 = level11_hidden_taggedTemplateLiteral(["ancient protector spirit (The Hidden Office Building)"])))).macro(use_writ, $monsters(level11_hidden_templateObject57 || (level11_hidden_templateObject57 = level11_hidden_taggedTemplateLiteral(["pygmy witch accountant, pygmy janitor, pygmy headhunter, pygmy witch lawyer"])))).ignore(),
    limit: {
      tries: 5
    }
  }, {
    name: "Finish Office",
    after: ["Office Boss"],
    completed: () => property_get("hiddenOfficeProgress") >= 8,
    do: $location(level11_hidden_templateObject58 || (level11_hidden_templateObject58 = level11_hidden_taggedTemplateLiteral(["An Overgrown Shrine (Northeast)"]))),
    choices: {
      785: 2
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }];
  var Hospital = [{
    name: "Open Hospital",
    after: ["Open City"],
    completed: () => property_get("hiddenHospitalProgress") >= 1,
    do: $location(level11_hidden_templateObject59 || (level11_hidden_templateObject59 = level11_hidden_taggedTemplateLiteral(["An Overgrown Shrine (Southwest)"]))),
    outfit: {
      equip: template_string_$items(level11_hidden_templateObject60 || (level11_hidden_templateObject60 = level11_hidden_taggedTemplateLiteral(["antique machete"])))
    },
    choices: {
      783: 1
    },
    limit: {
      tries: 4
    },
    freecombat: true,
    acquire: [{
      item: template_string_$item(level11_hidden_templateObject61 || (level11_hidden_templateObject61 = level11_hidden_taggedTemplateLiteral(["antique machete"])))
    }]
  }, {
    name: "Hospital",
    after: ["Open Hospital"],
    acquire: [{
      item: template_string_$item(level11_hidden_templateObject62 || (level11_hidden_templateObject62 = level11_hidden_taggedTemplateLiteral(["short writ of habeas corpus"]))),
      num: 1,
      price: runawayValue,
      optional: true
    }, {
      item: template_string_$item(level11_hidden_templateObject63 || (level11_hidden_templateObject63 = level11_hidden_taggedTemplateLiteral(["half-size scalpel"])))
    }, {
      item: template_string_$item(level11_hidden_templateObject64 || (level11_hidden_templateObject64 = level11_hidden_taggedTemplateLiteral(["head mirror"])))
    }, {
      item: template_string_$item(level11_hidden_templateObject65 || (level11_hidden_templateObject65 = level11_hidden_taggedTemplateLiteral(["surgical mask"])))
    }, {
      item: template_string_$item(level11_hidden_templateObject66 || (level11_hidden_templateObject66 = level11_hidden_taggedTemplateLiteral(["surgical apron"])))
    }, {
      item: template_string_$item(level11_hidden_templateObject67 || (level11_hidden_templateObject67 = level11_hidden_taggedTemplateLiteral(["bloodied surgical dungarees"])))
    }],
    completed: () => property_get("hiddenHospitalProgress") >= 7,
    do: $location(level11_hidden_templateObject68 || (level11_hidden_templateObject68 = level11_hidden_taggedTemplateLiteral(["The Hidden Hospital"]))),
    combat: new combat_CombatStrategy().killHard($monster(level11_hidden_templateObject69 || (level11_hidden_templateObject69 = level11_hidden_taggedTemplateLiteral(["ancient protector spirit (The Hidden Hospital)"])))).macro(use_writ, $monsters(level11_hidden_templateObject70 || (level11_hidden_templateObject70 = level11_hidden_taggedTemplateLiteral(["pygmy orderlies, pygmy janitor, pygmy witch nurse, pygmy witch surgeon"])))).ignore(),
    outfit: {
      equip: template_string_$items(level11_hidden_templateObject71 || (level11_hidden_templateObject71 = level11_hidden_taggedTemplateLiteral(["half-size scalpel, head mirror, surgical mask, surgical apron, bloodied surgical dungarees"])))
    },
    choices: {
      784: 1
    },
    limit: {
      soft: 10
    }
  }, {
    name: "Finish Hospital",
    after: ["Hospital"],
    completed: () => property_get("hiddenHospitalProgress") >= 8,
    do: $location(level11_hidden_templateObject72 || (level11_hidden_templateObject72 = level11_hidden_taggedTemplateLiteral(["An Overgrown Shrine (Southwest)"]))),
    choices: {
      783: 2
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }];
  var Bowling = [{
    name: "Open Bowling",
    after: ["Open City"],
    completed: () => property_get("hiddenBowlingAlleyProgress") >= 1,
    do: $location(level11_hidden_templateObject73 || (level11_hidden_templateObject73 = level11_hidden_taggedTemplateLiteral(["An Overgrown Shrine (Southeast)"]))),
    outfit: {
      equip: template_string_$items(level11_hidden_templateObject74 || (level11_hidden_templateObject74 = level11_hidden_taggedTemplateLiteral(["antique machete"])))
    },
    choices: {
      787: 1
    },
    limit: {
      tries: 4
    },
    freecombat: true,
    acquire: [{
      item: template_string_$item(level11_hidden_templateObject75 || (level11_hidden_templateObject75 = level11_hidden_taggedTemplateLiteral(["antique machete"])))
    }]
  }, {
    name: "Bowling",
    after: ["Open Bowling"],
    acquire: [{
      item: template_string_$item(level11_hidden_templateObject76 || (level11_hidden_templateObject76 = level11_hidden_taggedTemplateLiteral(["bowling ball"])))
    }],
    completed: () => property_get("hiddenBowlingAlleyProgress") >= 7,
    do: $location(level11_hidden_templateObject77 || (level11_hidden_templateObject77 = level11_hidden_taggedTemplateLiteral(["The Hidden Bowling Alley"]))),
    combat: new combat_CombatStrategy().killHard($monster(level11_hidden_templateObject78 || (level11_hidden_templateObject78 = level11_hidden_taggedTemplateLiteral(["ancient protector spirit (The Hidden Bowling Alley)"])))),
    choices: {
      788: 1
    },
    limit: {
      tries: 5
    }
  }, {
    name: "Finish Bowling",
    after: ["Bowling"],
    completed: () => property_get("hiddenBowlingAlleyProgress") >= 8,
    do: $location(level11_hidden_templateObject79 || (level11_hidden_templateObject79 = level11_hidden_taggedTemplateLiteral(["An Overgrown Shrine (Southeast)"]))),
    choices: {
      787: 2
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }];
  var HiddenQuest = {
    name: "Hidden City",
    tasks: [].concat(Temple, Office, Apartment, Hospital, Bowling, [{
      name: "Boss",
      after: ["Finish Office", "Finish Apartment", "Finish Hospital", "Finish Bowling"],
      completed: () => step("questL11Worship") === 999,
      do: $location(level11_hidden_templateObject80 || (level11_hidden_templateObject80 = level11_hidden_taggedTemplateLiteral(["A Massive Ziggurat"]))),
      outfit: {
        equip: template_string_$items(level11_hidden_templateObject81 || (level11_hidden_templateObject81 = level11_hidden_taggedTemplateLiteral(["antique machete"])))
      },
      choices: {
        791: 1
      },
      boss: true,
      combat: new combat_CombatStrategy().kill($monsters(level11_hidden_templateObject82 || (level11_hidden_templateObject82 = level11_hidden_taggedTemplateLiteral(["dense liana, Protector Spectre"])))),
      limit: {
        tries: 4
      },
      acquire: [{
        item: template_string_$item(level11_hidden_templateObject83 || (level11_hidden_templateObject83 = level11_hidden_taggedTemplateLiteral(["antique machete"])))
      }]
    }])
  };
  ;// CONCATENATED MODULE: ./src/tasks/level11_manor.ts
  var level11_manor_templateObject, level11_manor_templateObject2, level11_manor_templateObject3, level11_manor_templateObject4, level11_manor_templateObject5, level11_manor_templateObject6, level11_manor_templateObject7, level11_manor_templateObject8, level11_manor_templateObject9, level11_manor_templateObject10, level11_manor_templateObject11, level11_manor_templateObject12, level11_manor_templateObject13, level11_manor_templateObject14, level11_manor_templateObject15, level11_manor_templateObject16, level11_manor_templateObject17, level11_manor_templateObject18, level11_manor_templateObject19, level11_manor_templateObject20, level11_manor_templateObject21, level11_manor_templateObject22, level11_manor_templateObject23, level11_manor_templateObject24, level11_manor_templateObject25, level11_manor_templateObject26, level11_manor_templateObject27, level11_manor_templateObject28, level11_manor_templateObject29, level11_manor_templateObject30, level11_manor_templateObject31, level11_manor_templateObject32, level11_manor_templateObject33, level11_manor_templateObject34, level11_manor_templateObject35, level11_manor_templateObject36, level11_manor_templateObject37, level11_manor_templateObject38, level11_manor_templateObject39, level11_manor_templateObject40, level11_manor_templateObject41, level11_manor_templateObject42, level11_manor_templateObject43, level11_manor_templateObject44, level11_manor_templateObject45, level11_manor_templateObject46, level11_manor_templateObject47, level11_manor_templateObject48, level11_manor_templateObject49, level11_manor_templateObject50, level11_manor_templateObject51, level11_manor_templateObject52, level11_manor_templateObject53, level11_manor_templateObject54, level11_manor_templateObject55, level11_manor_templateObject56, level11_manor_templateObject57, level11_manor_templateObject58, level11_manor_templateObject59, level11_manor_templateObject60, level11_manor_templateObject61, level11_manor_templateObject62, level11_manor_templateObject63, level11_manor_templateObject64, level11_manor_templateObject65, level11_manor_templateObject66, level11_manor_templateObject67, level11_manor_templateObject68, level11_manor_templateObject69, level11_manor_templateObject70, level11_manor_templateObject71, level11_manor_templateObject72, level11_manor_templateObject73, level11_manor_templateObject74, level11_manor_templateObject75, level11_manor_templateObject76, level11_manor_templateObject77;
  
  function level11_manor_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  var Manor1 = [{
    name: "Kitchen",
    after: ["Start"],
    priority: () => property_get("hasAutumnaton") && $location(level11_manor_templateObject || (level11_manor_templateObject = level11_manor_taggedTemplateLiteral(["The Haunted Kitchen"]))).turnsSpent === 0,
    completed: () => step("questM20Necklace") >= 1,
    do: $location(level11_manor_templateObject2 || (level11_manor_templateObject2 = level11_manor_taggedTemplateLiteral(["The Haunted Kitchen"]))),
    outfit: {
      modifier: "stench res, hot res"
    },
    choices: {
      893: 2
    },
    combat: new combat_CombatStrategy().kill(),
    limit: {
      turns: 7
    }
  }, {
    name: "Billiards",
    after: ["Kitchen"],
    completed: () => step("questM20Necklace") >= 3,
    prepare: () => {
      if (!lib_have(template_string_$item(level11_manor_templateObject3 || (level11_manor_templateObject3 = level11_manor_taggedTemplateLiteral(["government-issued eyeshade"]))))) ensureEffect(template_string_$effect(level11_manor_templateObject4 || (level11_manor_templateObject4 = level11_manor_taggedTemplateLiteral(["Influence of Sphere"]))));
    },
    acquire: [{
      item: template_string_$item(level11_manor_templateObject5 || (level11_manor_templateObject5 = level11_manor_taggedTemplateLiteral(["T.U.R.D.S. Key"]))),
      num: 1,
      price: 4000,
      optional: true
    }],
    ready: () => (0,external_kolmafia_namespaceObject.myInebriety)() <= 15,
    // Nonnegative contribution
    do: $location(level11_manor_templateObject6 || (level11_manor_templateObject6 = level11_manor_taggedTemplateLiteral(["The Haunted Billiards Room"]))),
    choices: {
      875: 1,
      900: 2,
      1436: 2
    },
    outfit: () => {
      return {
        equip: lib_have(template_string_$item(level11_manor_templateObject7 || (level11_manor_templateObject7 = level11_manor_taggedTemplateLiteral(["government-issued eyeshade"])))) ? template_string_$items(level11_manor_templateObject8 || (level11_manor_templateObject8 = level11_manor_taggedTemplateLiteral(["government-issued eyeshade"]))) : [],
        modifier: "-combat"
      };
    },
    combat: new combat_CombatStrategy().ignore().banish($monster(level11_manor_templateObject9 || (level11_manor_templateObject9 = level11_manor_taggedTemplateLiteral(["pooltergeist"])))).macro(new Macro().tryItem(template_string_$item(level11_manor_templateObject10 || (level11_manor_templateObject10 = level11_manor_taggedTemplateLiteral(["T.U.R.D.S. Key"])))), $monster(level11_manor_templateObject11 || (level11_manor_templateObject11 = level11_manor_taggedTemplateLiteral(["chalkdust wraith"])))).kill($monster(level11_manor_templateObject12 || (level11_manor_templateObject12 = level11_manor_taggedTemplateLiteral(["pooltergeist (ultra-rare)"])))),
    effects: $effects(level11_manor_templateObject13 || (level11_manor_templateObject13 = level11_manor_taggedTemplateLiteral(["Chalky Hand"]))),
    limit: {
      soft: 10
    }
  }, {
    name: "Library",
    after: ["Billiards"],
    completed: () => step("questM20Necklace") >= 4,
    do: $location(level11_manor_templateObject14 || (level11_manor_templateObject14 = level11_manor_taggedTemplateLiteral(["The Haunted Library"]))),
    combat: new combat_CombatStrategy().banish($monsters(level11_manor_templateObject15 || (level11_manor_templateObject15 = level11_manor_taggedTemplateLiteral(["banshee librarian, bookbat"])))).kill($monster(level11_manor_templateObject16 || (level11_manor_templateObject16 = level11_manor_taggedTemplateLiteral(["writing desk"])))),
    choices: {
      163: 4,
      888: 4,
      889: 5,
      894: 1
    },
    limit: {
      soft: 10
    }
  }, {
    name: "Finish Floor1",
    after: ["Library"],
    completed: () => step("questM20Necklace") === 999,
    do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=manor1&action=manor1_ladys"),
    limit: {
      tries: 1
    },
    freeaction: true
  }];
  var Manor2 = [{
    name: "Start Floor2",
    after: ["Finish Floor1"],
    completed: () => step("questM21Dance") >= 1,
    do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=manor2&action=manor2_ladys"),
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Gallery Delay",
    after: ["Start Floor2"],
    completed: () => $location(level11_manor_templateObject17 || (level11_manor_templateObject17 = level11_manor_taggedTemplateLiteral(["The Haunted Gallery"]))).turnsSpent >= 5 || step("questM21Dance") >= 2,
    do: $location(level11_manor_templateObject18 || (level11_manor_templateObject18 = level11_manor_taggedTemplateLiteral(["The Haunted Gallery"]))),
    choices: {
      89: 6,
      896: 1
    },
    // TODO: louvre
    limit: {
      turns: 5
    },
    delay: 5
  }, {
    name: "Gallery",
    after: ["Gallery Delay"],
    completed: () => lib_have(template_string_$item(level11_manor_templateObject19 || (level11_manor_templateObject19 = level11_manor_taggedTemplateLiteral(["Lady Spookyraven's dancing shoes"])))) || step("questM21Dance") >= 2,
    do: $location(level11_manor_templateObject20 || (level11_manor_templateObject20 = level11_manor_taggedTemplateLiteral(["The Haunted Gallery"]))),
    choices: {
      89: 6,
      896: 1
    },
    // TODO: louvre
    outfit: {
      modifier: "-combat"
    },
    limit: {
      soft: 10
    }
  }, {
    name: "Bathroom Delay",
    after: ["Start Floor2"],
    completed: () => $location(level11_manor_templateObject21 || (level11_manor_templateObject21 = level11_manor_taggedTemplateLiteral(["The Haunted Bathroom"]))).turnsSpent >= 5 || step("questM21Dance") >= 2,
    do: $location(level11_manor_templateObject22 || (level11_manor_templateObject22 = level11_manor_taggedTemplateLiteral(["The Haunted Bathroom"]))),
    choices: {
      881: 1,
      105: 1,
      892: 1
    },
    combat: new combat_CombatStrategy().kill($monster(level11_manor_templateObject23 || (level11_manor_templateObject23 = level11_manor_taggedTemplateLiteral(["cosmetics wraith"])))),
    limit: {
      turns: 5
    },
    delay: 5
  }, {
    name: "Bathroom",
    after: ["Bathroom Delay"],
    completed: () => lib_have(template_string_$item(level11_manor_templateObject24 || (level11_manor_templateObject24 = level11_manor_taggedTemplateLiteral(["Lady Spookyraven's powder puff"])))) || step("questM21Dance") >= 2,
    do: $location(level11_manor_templateObject25 || (level11_manor_templateObject25 = level11_manor_taggedTemplateLiteral(["The Haunted Bathroom"]))),
    choices: {
      881: 1,
      105: 1,
      892: 1
    },
    outfit: {
      modifier: "-combat"
    },
    combat: new combat_CombatStrategy().kill($monster(level11_manor_templateObject26 || (level11_manor_templateObject26 = level11_manor_taggedTemplateLiteral(["cosmetics wraith"])))),
    limit: {
      soft: 10
    }
  }, {
    name: "Bedroom",
    after: ["Start Floor2"],
    completed: () => lib_have(template_string_$item(level11_manor_templateObject27 || (level11_manor_templateObject27 = level11_manor_taggedTemplateLiteral(["Lady Spookyraven's finest gown"])))) || step("questM21Dance") >= 2,
    do: $location(level11_manor_templateObject28 || (level11_manor_templateObject28 = level11_manor_taggedTemplateLiteral(["The Haunted Bedroom"]))),
    choices: {
      876: 1,
      877: 1,
      878: 3,
      879: 1,
      880: 1,
      897: 2
    },
    combat: new combat_CombatStrategy().kill($monsters(level11_manor_templateObject29 || (level11_manor_templateObject29 = level11_manor_taggedTemplateLiteral(["elegant animated nightstand, animated ornate nightstand"])))) // kill ornate nightstand if banish fails
    .macro(new Macro().trySkill(template_string_$skill(level11_manor_templateObject30 || (level11_manor_templateObject30 = level11_manor_taggedTemplateLiteral(["Batter Up!"])))).trySkill(template_string_$skill(level11_manor_templateObject31 || (level11_manor_templateObject31 = level11_manor_taggedTemplateLiteral(["Talk About Politics"])))), $monster(level11_manor_templateObject32 || (level11_manor_templateObject32 = level11_manor_taggedTemplateLiteral(["animated ornate nightstand"])))).banish($monsters(level11_manor_templateObject33 || (level11_manor_templateObject33 = level11_manor_taggedTemplateLiteral(["animated mahogany nightstand, animated rustic nightstand, Wardr\xF6b nightstand"])))).ignore($monster(level11_manor_templateObject34 || (level11_manor_templateObject34 = level11_manor_taggedTemplateLiteral(["tumbleweed"])))),
    outfit: () => {
      if ((0,external_kolmafia_namespaceObject.myClass)() === $class(level11_manor_templateObject35 || (level11_manor_templateObject35 = level11_manor_taggedTemplateLiteral(["Seal Clubber"]))) && lib_have(template_string_$skill(level11_manor_templateObject36 || (level11_manor_templateObject36 = level11_manor_taggedTemplateLiteral(["Batter Up!"])))) && (0,external_kolmafia_namespaceObject.myFury)() >= 5) return {
        equip: template_string_$items(level11_manor_templateObject37 || (level11_manor_templateObject37 = level11_manor_taggedTemplateLiteral(["Meat Tenderizer is Murder"])))
      };else return {
        equip: template_string_$items(level11_manor_templateObject38 || (level11_manor_templateObject38 = level11_manor_taggedTemplateLiteral(["Pantsgiving"])))
      };
    },
    delay: () => lib_have(template_string_$item(level11_manor_templateObject39 || (level11_manor_templateObject39 = level11_manor_taggedTemplateLiteral(["Lord Spookyraven's spectacles"])))) ? 5 : 0,
    limit: {
      soft: 10
    }
  }, {
    name: "Open Ballroom",
    after: ["Gallery", "Bathroom", "Bedroom"],
    completed: () => step("questM21Dance") >= 3,
    do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=manor2&action=manor2_ladys"),
    limit: {
      tries: 1
    }
  }, {
    name: "Finish Floor2",
    after: ["Open Ballroom"],
    completed: () => step("questM21Dance") >= 4,
    do: $location(level11_manor_templateObject40 || (level11_manor_templateObject40 = level11_manor_taggedTemplateLiteral(["The Haunted Ballroom"]))),
    limit: {
      turns: 1
    }
  }];
  var ManorBasement = [{
    name: "Ballroom Delay",
    after: ["Macguffin/Diary", "Finish Floor2"],
    completed: () => $location(level11_manor_templateObject41 || (level11_manor_templateObject41 = level11_manor_taggedTemplateLiteral(["The Haunted Ballroom"]))).turnsSpent >= 5 || step("questL11Manor") >= 1,
    do: $location(level11_manor_templateObject42 || (level11_manor_templateObject42 = level11_manor_taggedTemplateLiteral(["The Haunted Ballroom"]))),
    choices: {
      90: 3,
      106: 4,
      921: 1
    },
    limit: {
      turns: 5
    },
    delay: 5
  }, {
    name: "Ballroom",
    after: ["Ballroom Delay"],
    completed: () => step("questL11Manor") >= 1,
    do: $location(level11_manor_templateObject43 || (level11_manor_templateObject43 = level11_manor_taggedTemplateLiteral(["The Haunted Ballroom"]))),
    outfit: {
      modifier: "-combat"
    },
    choices: {
      90: 3,
      106: 4,
      921: 1
    },
    limit: {
      soft: 10
    }
  }, {
    name: "Learn Recipe",
    after: ["Ballroom"],
    completed: () => property_get("spookyravenRecipeUsed") === "with_glasses",
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=manor4&action=manor4_chamberwall");
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(level11_manor_templateObject44 || (level11_manor_templateObject44 = level11_manor_taggedTemplateLiteral(["recipe: mortar-dissolving solution"]))));
    },
    outfit: {
      equip: template_string_$items(level11_manor_templateObject45 || (level11_manor_templateObject45 = level11_manor_taggedTemplateLiteral(["Lord Spookyraven's spectacles"])))
    },
    limit: {
      tries: 1
    }
  }, {
    name: "Wine Cellar",
    after: ["Learn Recipe"],
    completed: () => lib_have(template_string_$item(level11_manor_templateObject46 || (level11_manor_templateObject46 = level11_manor_taggedTemplateLiteral(["bottle of Chateau de Vinegar"])))) || lib_have(template_string_$item(level11_manor_templateObject47 || (level11_manor_templateObject47 = level11_manor_taggedTemplateLiteral(["unstable fulminate"])))) || lib_have(template_string_$item(level11_manor_templateObject48 || (level11_manor_templateObject48 = level11_manor_taggedTemplateLiteral(["wine bomb"])))) || step("questL11Manor") >= 3,
    priority: () => lib_have(template_string_$effect(level11_manor_templateObject49 || (level11_manor_templateObject49 = level11_manor_taggedTemplateLiteral(["Steely-Eyed Squint"])))),
    prepare: () => {
      if (!property_get("_steelyEyedSquintUsed")) (0,external_kolmafia_namespaceObject.useSkill)(template_string_$skill(level11_manor_templateObject50 || (level11_manor_templateObject50 = level11_manor_taggedTemplateLiteral(["Steely-Eyed Squint"]))));
    },
    do: $location(level11_manor_templateObject51 || (level11_manor_templateObject51 = level11_manor_taggedTemplateLiteral(["The Haunted Wine Cellar"]))),
    outfit: {
      equip: template_string_$items(level11_manor_templateObject52 || (level11_manor_templateObject52 = level11_manor_taggedTemplateLiteral(["A Light that Never Goes Out, Lil' Doctor\u2122 bag"]))),
      modifier: "item, booze drop",
      skipDefaults: true
    },
    effects: $effects(level11_manor_templateObject53 || (level11_manor_templateObject53 = level11_manor_taggedTemplateLiteral(["Merry Smithsness"]))),
    choices: {
      901: 2
    },
    combat: new combat_CombatStrategy().macro(new Macro().trySkill(template_string_$skill(level11_manor_templateObject54 || (level11_manor_templateObject54 = level11_manor_taggedTemplateLiteral(["Otoscope"])))), $monster(level11_manor_templateObject55 || (level11_manor_templateObject55 = level11_manor_taggedTemplateLiteral(["possessed wine rack"])))).banish($monsters(level11_manor_templateObject56 || (level11_manor_templateObject56 = level11_manor_taggedTemplateLiteral(["mad wino, skeletal sommelier"])))).killFree(),
    limit: {
      soft: 10
    }
  }, {
    name: "Laundry Room",
    after: ["Learn Recipe"],
    priority: () => lib_have(template_string_$effect(level11_manor_templateObject57 || (level11_manor_templateObject57 = level11_manor_taggedTemplateLiteral(["Steely-Eyed Squint"])))),
    completed: () => lib_have(template_string_$item(level11_manor_templateObject58 || (level11_manor_templateObject58 = level11_manor_taggedTemplateLiteral(["blasting soda"])))) || lib_have(template_string_$item(level11_manor_templateObject59 || (level11_manor_templateObject59 = level11_manor_taggedTemplateLiteral(["unstable fulminate"])))) || lib_have(template_string_$item(level11_manor_templateObject60 || (level11_manor_templateObject60 = level11_manor_taggedTemplateLiteral(["wine bomb"])))) || step("questL11Manor") >= 3,
    prepare: () => {
      if (!property_get("_steelyEyedSquintUsed")) (0,external_kolmafia_namespaceObject.useSkill)(template_string_$skill(level11_manor_templateObject61 || (level11_manor_templateObject61 = level11_manor_taggedTemplateLiteral(["Steely-Eyed Squint"]))));
    },
    do: $location(level11_manor_templateObject62 || (level11_manor_templateObject62 = level11_manor_taggedTemplateLiteral(["The Haunted Laundry Room"]))),
    outfit: {
      equip: template_string_$items(level11_manor_templateObject63 || (level11_manor_templateObject63 = level11_manor_taggedTemplateLiteral(["A Light that Never Goes Out, Lil' Doctor\u2122 bag"]))),
      modifier: "item, food drop",
      skipDefaults: true
    },
    effects: $effects(level11_manor_templateObject64 || (level11_manor_templateObject64 = level11_manor_taggedTemplateLiteral(["Merry Smithsness"]))),
    choices: {
      891: 2
    },
    combat: new combat_CombatStrategy().macro(new Macro().trySkill(template_string_$skill(level11_manor_templateObject65 || (level11_manor_templateObject65 = level11_manor_taggedTemplateLiteral(["Otoscope"])))).trySkill(template_string_$skill(level11_manor_templateObject66 || (level11_manor_templateObject66 = level11_manor_taggedTemplateLiteral(["Chest X-Ray"])))), $monster(level11_manor_templateObject67 || (level11_manor_templateObject67 = level11_manor_taggedTemplateLiteral(["cabinet of Dr. Limpieza"])))).banish($monsters(level11_manor_templateObject68 || (level11_manor_templateObject68 = level11_manor_taggedTemplateLiteral(["plaid ghost, possessed laundry press"])))).killFree(),
    limit: {
      soft: 10
    }
  }, {
    name: "Fulminate",
    after: ["Wine Cellar", "Laundry Room"],
    completed: () => lib_have(template_string_$item(level11_manor_templateObject69 || (level11_manor_templateObject69 = level11_manor_taggedTemplateLiteral(["unstable fulminate"])))) || lib_have(template_string_$item(level11_manor_templateObject70 || (level11_manor_templateObject70 = level11_manor_taggedTemplateLiteral(["wine bomb"])))) || step("questL11Manor") >= 3,
    do: () => (0,external_kolmafia_namespaceObject.create)(template_string_$item(level11_manor_templateObject71 || (level11_manor_templateObject71 = level11_manor_taggedTemplateLiteral(["unstable fulminate"])))),
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Boiler Room",
    after: ["Fulminate"],
    completed: () => lib_have(template_string_$item(level11_manor_templateObject72 || (level11_manor_templateObject72 = level11_manor_taggedTemplateLiteral(["wine bomb"])))) || step("questL11Manor") >= 3,
    do: $location(level11_manor_templateObject73 || (level11_manor_templateObject73 = level11_manor_taggedTemplateLiteral(["The Haunted Boiler Room"]))),
    outfit: {
      modifier: "ML",
      equip: template_string_$items(level11_manor_templateObject74 || (level11_manor_templateObject74 = level11_manor_taggedTemplateLiteral(["unstable fulminate"])))
    },
    choices: {
      902: 2
    },
    combat: new combat_CombatStrategy().kill($monster(level11_manor_templateObject75 || (level11_manor_templateObject75 = level11_manor_taggedTemplateLiteral(["monstrous boiler"])))).banish($monsters(level11_manor_templateObject76 || (level11_manor_templateObject76 = level11_manor_taggedTemplateLiteral(["coaltergeist, steam elemental"])))),
    limit: {
      soft: 10
    }
  }, {
    name: "Blow Wall",
    after: ["Boiler Room"],
    completed: () => step("questL11Manor") >= 3,
    do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=manor4&action=manor4_chamberwall"),
    limit: {
      tries: 1
    },
    freeaction: true
  }];
  var ManorQuest = {
    name: "Manor",
    tasks: [{
      name: "Start",
      after: [],
      completed: () => step("questM20Necklace") >= 0,
      do: () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(level11_manor_templateObject77 || (level11_manor_templateObject77 = level11_manor_taggedTemplateLiteral(["telegram from Lady Spookyraven"])))),
      limit: {
        tries: 1
      },
      freeaction: true
    }].concat(Manor1, Manor2, ManorBasement, [{
      name: "Boss",
      after: ["Blow Wall"],
      completed: () => step("questL11Manor") >= 999,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=manor4&action=manor4_chamberboss"),
      boss: true,
      combat: new combat_CombatStrategy().kill(),
      limit: {
        tries: 1
      }
    }])
  };
  ;// CONCATENATED MODULE: ./src/tasks/level11.ts
  var level11_templateObject, level11_templateObject2, level11_templateObject3, level11_templateObject4, level11_templateObject5, level11_templateObject6, level11_templateObject7, level11_templateObject8, level11_templateObject9, level11_templateObject10, level11_templateObject11, level11_templateObject12, level11_templateObject13, level11_templateObject14, level11_templateObject15, level11_templateObject16, level11_templateObject17, level11_templateObject18, level11_templateObject19, level11_templateObject20, level11_templateObject21, level11_templateObject22, level11_templateObject23, level11_templateObject24, level11_templateObject25, level11_templateObject26, level11_templateObject27, level11_templateObject28, level11_templateObject29, level11_templateObject30, level11_templateObject31, level11_templateObject32, level11_templateObject33, level11_templateObject34, level11_templateObject35, level11_templateObject36, level11_templateObject37, level11_templateObject38, level11_templateObject39, level11_templateObject40, level11_templateObject41, level11_templateObject42, level11_templateObject43;
  
  function level11_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  var Diary = [{
    name: "Forest",
    after: ["Start"],
    acquire: [{
      item: template_string_$item(level11_templateObject || (level11_templateObject = level11_taggedTemplateLiteral(["blackberry galoshes"])))
    }],
    completed: () => step("questL11Black") >= 2,
    do: $location(level11_templateObject2 || (level11_templateObject2 = level11_taggedTemplateLiteral(["The Black Forest"]))),
    outfit: {
      equip: template_string_$items(level11_templateObject3 || (level11_templateObject3 = level11_taggedTemplateLiteral(["blackberry galoshes"]))),
      familiar: template_string_$familiar(level11_templateObject4 || (level11_templateObject4 = level11_taggedTemplateLiteral(["Reassembled Blackbird"]))),
      modifier: "+combat"
    },
    choices: {
      923: 1,
      924: 1
    },
    combat: new combat_CombatStrategy().ignore($monster(level11_templateObject5 || (level11_templateObject5 = level11_taggedTemplateLiteral(["blackberry bush"])))).kill(),
    limit: {
      soft: 15
    }
  }, {
    name: "Buy Documents",
    after: ["Forest"],
    completed: () => lib_have(template_string_$item(level11_templateObject6 || (level11_templateObject6 = level11_taggedTemplateLiteral(["forged identification documents"])))) || step("questL11Black") >= 4,
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("woods.php");
      (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=blackmarket");
      (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=blackmarket&action=buyitem&whichrow=281&ajax=1&quantity=1");
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Diary",
    after: ["Buy Documents", "Misc/Unlock Beach"],
    completed: () => step("questL11Black") >= 4,
    do: $location(level11_templateObject7 || (level11_templateObject7 = level11_taggedTemplateLiteral(["The Shore, Inc. Travel Agency"]))),
    choices: {
      793: 1
    },
    limit: {
      tries: 1
    }
  }];
  var Desert = [{
    name: "Scrip",
    after: ["Misc/Unlock Beach"],
    completed: () => lib_have(template_string_$item(level11_templateObject8 || (level11_templateObject8 = level11_taggedTemplateLiteral(["Shore Inc. Ship Trip Scrip"])))) || lib_have(template_string_$item(level11_templateObject9 || (level11_templateObject9 = level11_taggedTemplateLiteral(["UV-resistant compass"])))),
    do: $location(level11_templateObject10 || (level11_templateObject10 = level11_taggedTemplateLiteral(["The Shore, Inc. Travel Agency"]))),
    choices: {
      793: 1
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Compass",
    after: ["Misc/Unlock Beach", "Scrip"],
    completed: () => lib_have(template_string_$item(level11_templateObject11 || (level11_templateObject11 = level11_taggedTemplateLiteral(["UV-resistant compass"])))),
    do: () => (0,external_kolmafia_namespaceObject.buy)($coinmaster(level11_templateObject12 || (level11_templateObject12 = level11_taggedTemplateLiteral(["The Shore, Inc. Gift Shop"]))), 1, template_string_$item(level11_templateObject13 || (level11_templateObject13 = level11_taggedTemplateLiteral(["UV-resistant compass"])))),
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Desert",
    after: ["Diary", "Compass"],
    acquire: [{
      item: template_string_$item(level11_templateObject14 || (level11_templateObject14 = level11_taggedTemplateLiteral(["can of black paint"]))),
      useful: () => (property_get("gnasirProgress") & 2) === 0
    }, {
      item: template_string_$item(level11_templateObject15 || (level11_templateObject15 = level11_taggedTemplateLiteral(["killing jar"]))),
      useful: () => (property_get("gnasirProgress") & 4) === 0
    }, {
      item: template_string_$item(level11_templateObject16 || (level11_templateObject16 = level11_taggedTemplateLiteral(["drum machine"]))),
      useful: () => (property_get("gnasirProgress") & 16) === 0
    }],
    completed: () => property_get("desertExploration") >= 100,
    do: $location(level11_templateObject17 || (level11_templateObject17 = level11_taggedTemplateLiteral(["The Arid, Extra-Dry Desert"]))),
    outfit: () => {
      var handItems = template_string_$items(level11_templateObject18 || (level11_templateObject18 = level11_taggedTemplateLiteral(["survival knife, UV-resistant compass"]))).filter(it => lib_have(it));
      if (lib_have(template_string_$item(level11_templateObject19 || (level11_templateObject19 = level11_taggedTemplateLiteral(["industrial fire extinguisher"])))) && property_get("_fireExtinguisherCharge") >= 20 && !property_get("fireExtinguisherDesertUsed") && lib_have(template_string_$effect(level11_templateObject20 || (level11_templateObject20 = level11_taggedTemplateLiteral(["Ultrahydrated"]))))) handItems.unshift(template_string_$item(level11_templateObject21 || (level11_templateObject21 = level11_taggedTemplateLiteral(["industrial fire extinguisher"]))));
      return {
        equip: handItems.slice(0, 2),
        familiar: template_string_$familiar(level11_templateObject22 || (level11_templateObject22 = level11_taggedTemplateLiteral(["Melodramedary"]))),
        famequip: template_string_$item(level11_templateObject23 || (level11_templateObject23 = level11_taggedTemplateLiteral(["dromedary drinking helmet"])))
      };
    },
    combat: new combat_CombatStrategy().macro(() => {
      if (lib_have(template_string_$effect(level11_templateObject24 || (level11_templateObject24 = level11_taggedTemplateLiteral(["Ultrahydrated"])))) && !(0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(level11_templateObject25 || (level11_templateObject25 = level11_taggedTemplateLiteral(["\"I Voted!\" sticker"]))))) return new Macro().trySkill(template_string_$skill(level11_templateObject26 || (level11_templateObject26 = level11_taggedTemplateLiteral(["Fire Extinguisher: Zone Specific"]))));else return new Macro();
    }).kill(),
    post: () => {
      if (!$location(level11_templateObject27 || (level11_templateObject27 = level11_taggedTemplateLiteral(["The Arid, Extra-Dry Desert"]))).noncombatQueue.includes("A Sietch in Time")) return;
      if ((property_get("gnasirProgress") & 16) > 0) return;
  
      if ((0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(level11_templateObject28 || (level11_templateObject28 = level11_taggedTemplateLiteral(["worm-riding manual page"])))) >= 15 || (property_get("gnasirProgress") & 2) === 0 || (property_get("gnasirProgress") & 4) === 0) {
        var res = (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=desertbeach&action=db_gnasir");
  
        while (res.includes("value=2")) {
          res = (0,external_kolmafia_namespaceObject.runChoice)(2);
        }
  
        (0,external_kolmafia_namespaceObject.runChoice)(1);
      }
  
      (0,external_kolmafia_namespaceObject.cliExecute)("use * desert sightseeing pamphlet");
      if (lib_have(template_string_$item(level11_templateObject29 || (level11_templateObject29 = level11_taggedTemplateLiteral(["worm-riding hooks"]))))) (0,external_kolmafia_namespaceObject.use)(template_string_$item(level11_templateObject30 || (level11_templateObject30 = level11_taggedTemplateLiteral(["drum machine"]))));
    },
    limit: {
      soft: 30
    },
    delay: 25,
    choices: {
      805: 1
    }
  }];
  
  function rotatePyramid(goal) {
    var ratchets = (goal - property_get("pyramidPosition") + 5) % 5;
    var to_buy = ratchets - (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(level11_templateObject31 || (level11_templateObject31 = level11_taggedTemplateLiteral(["tomb ratchet"])))) - (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(level11_templateObject32 || (level11_templateObject32 = level11_taggedTemplateLiteral(["crumbling wooden wheel"]))));
  
    if (to_buy > 0) {
      (0,external_kolmafia_namespaceObject.buy)(template_string_$item(level11_templateObject33 || (level11_templateObject33 = level11_taggedTemplateLiteral(["tomb ratchet"]))), to_buy);
    }
  
    (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=pyramid&action=pyramid_control");
  
    for (var i = 0; i < ratchets; i++) {
      if (lib_have(template_string_$item(level11_templateObject34 || (level11_templateObject34 = level11_taggedTemplateLiteral(["crumbling wooden wheel"]))))) {
        (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=929&option=1&pwd");
      } else {
        (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=929&option=2&pwd");
      }
    }
  
    if (property_get("pyramidPosition") !== goal) throw "Failed to rotate pyramid to ".concat(goal);
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=929&option=5&pwd");
  }
  
  var Pyramid = [{
    name: "Open Pyramid",
    after: ["Desert", "Manor/Boss", "Palindome/Boss", "Hidden City/Boss"],
    completed: () => step("questL11Pyramid") >= 0,
    do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=desertbeach&action=db_pyramid1"),
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Upper Chamber",
    after: ["Open Pyramid"],
    completed: () => step("questL11Pyramid") >= 1,
    do: $location(level11_templateObject35 || (level11_templateObject35 = level11_taggedTemplateLiteral(["The Upper Chamber"]))),
    outfit: {
      modifier: "+combat"
    },
    limit: {
      turns: 6
    }
  }, {
    name: "Middle Chamber",
    after: ["Upper Chamber"],
    completed: () => property_get("controlRoomUnlock"),
    do: $location(level11_templateObject36 || (level11_templateObject36 = level11_taggedTemplateLiteral(["The Middle Chamber"]))),
    limit: {
      turns: 11
    },
    delay: 9
  }, {
    name: "Get Token",
    acquire: [{
      item: template_string_$item(level11_templateObject37 || (level11_templateObject37 = level11_taggedTemplateLiteral(["tomb ratchet"]))),
      num: 3
    }],
    after: ["Middle Chamber"],
    completed: () => lib_have(template_string_$item(level11_templateObject38 || (level11_templateObject38 = level11_taggedTemplateLiteral(["ancient bronze token"])))) || lib_have(template_string_$item(level11_templateObject39 || (level11_templateObject39 = level11_taggedTemplateLiteral(["ancient bomb"])))) || property_get("pyramidBombUsed"),
    do: () => rotatePyramid(4),
    limit: {
      tries: 1
    }
  }, {
    name: "Get Bomb",
    acquire: [{
      item: template_string_$item(level11_templateObject40 || (level11_templateObject40 = level11_taggedTemplateLiteral(["tomb ratchet"]))),
      num: 4
    }],
    after: ["Get Token"],
    completed: () => lib_have(template_string_$item(level11_templateObject41 || (level11_templateObject41 = level11_taggedTemplateLiteral(["ancient bomb"])))) || property_get("pyramidBombUsed"),
    do: () => rotatePyramid(3),
    limit: {
      tries: 1
    }
  }, {
    name: "Use Bomb",
    acquire: [{
      item: template_string_$item(level11_templateObject42 || (level11_templateObject42 = level11_taggedTemplateLiteral(["tomb ratchet"]))),
      num: 3
    }],
    after: ["Get Bomb"],
    completed: () => property_get("pyramidBombUsed"),
    do: () => rotatePyramid(1),
    limit: {
      tries: 1
    }
  }, {
    name: "Boss",
    after: ["Use Bomb"],
    completed: () => step("questL11Pyramid") === 999,
    do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=pyramid&action=pyramid_state1a"),
    boss: true,
    combat: new combat_CombatStrategy().macro(new Macro().trySkill(template_string_$skill(level11_templateObject43 || (level11_templateObject43 = level11_taggedTemplateLiteral(["Saucegeyser"])))).attack().repeat()).kill(),
    limit: {
      tries: 1
    }
  }];
  var MacguffinQuest = {
    name: "Macguffin",
    tasks: [{
      name: "Start",
      after: ["Toot/Finish"],
      ready: () => (0,external_kolmafia_namespaceObject.myLevel)() >= 11,
      completed: () => step("questL11MacGuffin") !== -1,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        tries: 1
      },
      freeaction: true
    }].concat(Diary, Desert, Pyramid, [{
      name: "Finish",
      after: ["Boss"],
      completed: () => step("questL11MacGuffin") === 999,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        tries: 1
      },
      freeaction: true
    }])
  };
  ;// CONCATENATED MODULE: ./src/tasks/level12.ts
  var level12_templateObject, level12_templateObject2, level12_templateObject3, level12_templateObject4, level12_templateObject5, level12_templateObject6, level12_templateObject7, level12_templateObject8, level12_templateObject9, level12_templateObject10, level12_templateObject11, level12_templateObject12, level12_templateObject13, level12_templateObject14, level12_templateObject15, level12_templateObject16, level12_templateObject17, level12_templateObject18, level12_templateObject19, level12_templateObject20, level12_templateObject21, level12_templateObject22, level12_templateObject23, level12_templateObject24, level12_templateObject25, level12_templateObject26, level12_templateObject27, level12_templateObject28, level12_templateObject29, level12_templateObject30, level12_templateObject31, level12_templateObject32, level12_templateObject33, level12_templateObject34, level12_templateObject35, level12_templateObject36, level12_templateObject37, level12_templateObject38, level12_templateObject39, level12_templateObject40, level12_templateObject41, level12_templateObject42, level12_templateObject43, level12_templateObject44, level12_templateObject45, level12_templateObject46, level12_templateObject47, level12_templateObject48, level12_templateObject49, level12_templateObject50, level12_templateObject51, level12_templateObject52, level12_templateObject53, level12_templateObject54, level12_templateObject55, level12_templateObject56, level12_templateObject57, level12_templateObject58, level12_templateObject59, level12_templateObject60, level12_templateObject61, level12_templateObject62, level12_templateObject63, level12_templateObject64, level12_templateObject65, level12_templateObject66, level12_templateObject67, level12_templateObject68, level12_templateObject69, level12_templateObject70, level12_templateObject71, level12_templateObject72, level12_templateObject73, level12_templateObject74, level12_templateObject75, level12_templateObject76, level12_templateObject77, level12_templateObject78, level12_templateObject79, level12_templateObject80, level12_templateObject81, level12_templateObject82, level12_templateObject83, level12_templateObject84, level12_templateObject85, level12_templateObject86, level12_templateObject87, level12_templateObject88, level12_templateObject89, level12_templateObject90, level12_templateObject91, level12_templateObject92, level12_templateObject93, level12_templateObject94, level12_templateObject95, level12_templateObject96, level12_templateObject97, level12_templateObject98, level12_templateObject99, level12_templateObject100, level12_templateObject101, level12_templateObject102, level12_templateObject103, level12_templateObject104, level12_templateObject105, level12_templateObject106, level12_templateObject107, level12_templateObject108, level12_templateObject109, level12_templateObject110, level12_templateObject111, level12_templateObject112, level12_templateObject113, level12_templateObject114, level12_templateObject115, level12_templateObject116, level12_templateObject117, level12_templateObject118, level12_templateObject119, level12_templateObject120, level12_templateObject121, level12_templateObject122, level12_templateObject123, level12_templateObject124, level12_templateObject125, level12_templateObject126, level12_templateObject127, level12_templateObject128, level12_templateObject129, level12_templateObject130, level12_templateObject131, level12_templateObject132, level12_templateObject133, level12_templateObject134, level12_templateObject135, level12_templateObject136, level12_templateObject137, level12_templateObject138, level12_templateObject139, level12_templateObject140, level12_templateObject141, level12_templateObject142, level12_templateObject143, level12_templateObject144, level12_templateObject145, level12_templateObject146, level12_templateObject147, level12_templateObject148, level12_templateObject149, level12_templateObject150, level12_templateObject151, level12_templateObject152, level12_templateObject153;
  
  function level12_slicedToArray(arr, i) { return level12_arrayWithHoles(arr) || level12_iterableToArrayLimit(arr, i) || level12_unsupportedIterableToArray(arr, i) || level12_nonIterableRest(); }
  
  function level12_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function level12_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return level12_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return level12_arrayLikeToArray(o, minLen); }
  
  function level12_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function level12_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
  
  function level12_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
  
  function level12_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  
  
  
  function ensureFluffers(flufferCount) {
    // From bean-casual
    while ((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(level12_templateObject || (level12_templateObject = level12_taggedTemplateLiteral(["stuffing fluffer"])))) < flufferCount) {
      if ((0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(level12_templateObject2 || (level12_templateObject2 = level12_taggedTemplateLiteral(["cashew"])))) >= 3) {
        (0,external_kolmafia_namespaceObject.create)(1, template_string_$item(level12_templateObject3 || (level12_templateObject3 = level12_taggedTemplateLiteral(["stuffing fluffer"]))));
        continue;
      }
  
      var neededFluffers = flufferCount - (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(level12_templateObject4 || (level12_templateObject4 = level12_taggedTemplateLiteral(["stuffing fluffer"]))));
      var stuffingFlufferSources = [[template_string_$item(level12_templateObject5 || (level12_templateObject5 = level12_taggedTemplateLiteral(["cashew"]))), 3], [template_string_$item(level12_templateObject6 || (level12_templateObject6 = level12_taggedTemplateLiteral(["stuffing fluffer"]))), 1], [template_string_$item(level12_templateObject7 || (level12_templateObject7 = level12_taggedTemplateLiteral(["cornucopia"]))), 1 / 3.5 * 3]];
      stuffingFlufferSources.sort((_ref, _ref2) => {
        var _ref3 = level12_slicedToArray(_ref, 2),
            item1 = _ref3[0],
            mult1 = _ref3[1];
  
        var _ref4 = level12_slicedToArray(_ref2, 2),
            item2 = _ref4[0],
            mult2 = _ref4[1];
  
        return (0,external_kolmafia_namespaceObject.mallPrice)(item1) * mult1 - (0,external_kolmafia_namespaceObject.mallPrice)(item2) * mult2;
      });
  
      var _stuffingFlufferSourc = level12_slicedToArray(stuffingFlufferSources[0], 2),
          stuffingFlufferSource = _stuffingFlufferSourc[0],
          sourceMultiplier = _stuffingFlufferSourc[1];
  
      var neededOfSource = Math.ceil(neededFluffers * sourceMultiplier);
      (0,external_kolmafia_namespaceObject.cliExecute)("acquire ".concat(neededOfSource, " ").concat(stuffingFlufferSource));
  
      if ((0,external_kolmafia_namespaceObject.itemAmount)(stuffingFlufferSource) < neededOfSource) {
        throw "Unable to acquire ".concat(stuffingFlufferSource, "; maybe raising your pricing limit will help?");
      }
  
      if (stuffingFlufferSource === template_string_$item(level12_templateObject8 || (level12_templateObject8 = level12_taggedTemplateLiteral(["cornucopia"])))) {
        (0,external_kolmafia_namespaceObject.use)(neededOfSource, template_string_$item(level12_templateObject9 || (level12_templateObject9 = level12_taggedTemplateLiteral(["cornucopia"]))));
      }
  
      if (stuffingFlufferSource !== template_string_$item(level12_templateObject10 || (level12_templateObject10 = level12_taggedTemplateLiteral(["stuffing fluffer"])))) {
        (0,external_kolmafia_namespaceObject.create)(level12_clamp(Math.floor((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(level12_templateObject11 || (level12_templateObject11 = level12_taggedTemplateLiteral(["cashew"])))) / 3), 0, neededFluffers), template_string_$item(level12_templateObject12 || (level12_templateObject12 = level12_taggedTemplateLiteral(["stuffing fluffer"]))));
      }
    }
  }
  
  function level12_clamp(n, min, max) {
    return Math.max(min, Math.min(n, max));
  }
  
  function flyersDone() {
    return property_get("flyeredML") >= 10000;
  }
  var Flyers = [{
    name: "Flyers Start",
    after: ["Enrage"],
    completed: () => lib_have(template_string_$item(level12_templateObject13 || (level12_templateObject13 = level12_taggedTemplateLiteral(["rock band flyers"])))) || property_get("sidequestArenaCompleted") !== "none" || args.fluffers,
    outfit: {
      equip: template_string_$items(level12_templateObject14 || (level12_templateObject14 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin"])))
    },
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?place=concert&pwd");
    },
    freeaction: true,
    limit: {
      tries: 1
    }
  }, {
    name: "Flyers End",
    after: ["Flyers Start"],
    priority: () => true,
    ready: () => flyersDone(),
    // Buffer for mafia tracking
    completed: () => property_get("sidequestArenaCompleted") !== "none" || args.fluffers,
    outfit: {
      equip: template_string_$items(level12_templateObject15 || (level12_templateObject15 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin"])))
    },
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?place=concert&pwd");
      (0,external_kolmafia_namespaceObject.cliExecute)("refresh inv");
  
      if (lib_have(template_string_$item(level12_templateObject16 || (level12_templateObject16 = level12_taggedTemplateLiteral(["rock band flyers"]))))) {
        debug("Mafia tracking was incorrect for rock band flyers; continuing to flyer...");
        _set("_loopcasual_flyeredML_buffer", property_get("_loopcasual_flyeredML_buffer", 0) + (property_get("flyeredML") - 9900));
        _set("flyeredML", 9900);
      } else if (property_get("_loopcasual_flyeredML_buffer", 0) > 0) {
        debug("Mafia tracking was incorrect for rock band flyers; quest completed at ".concat(property_get("flyeredML") + property_get("_loopcasual_flyeredML_buffer", 0)));
      }
    },
    freeaction: true,
    limit: {
      soft: 10,
      message: "See https://kolmafia.us/threads/flyeredml-tracking-wrong.27567/"
    }
  }];
  var Lighthouse = [// Saber into more lobsterfrogmen
  {
    name: "Lighthouse",
    after: ["Enrage"],
    completed: () => (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(level12_templateObject17 || (level12_templateObject17 = level12_taggedTemplateLiteral(["barrel of gunpowder"])))) >= 5 || property_get("sidequestLighthouseCompleted") !== "none" || !lib_have(template_string_$item(level12_templateObject18 || (level12_templateObject18 = level12_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))) || property_get("hasAutumnaton") || args.fluffers,
    do: $location(level12_templateObject19 || (level12_templateObject19 = level12_taggedTemplateLiteral(["Sonofa Beach"]))),
    outfit: () => {
      if (!lib_have(template_string_$item(level12_templateObject20 || (level12_templateObject20 = level12_taggedTemplateLiteral(["Fourth of May Cosplay Saber"]))))) return {
        modifier: "+combat"
      }; // Look for the first lobsterfrogman
  
      if (property_get("_saberForceMonster") !== $monster(level12_templateObject21 || (level12_templateObject21 = level12_taggedTemplateLiteral(["lobsterfrogman"]))) || property_get("_saberForceMonsterCount") === 0) {
        return {
          modifier: "+combat",
          equip: template_string_$items(level12_templateObject22 || (level12_templateObject22 = level12_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))
        };
      } // Reuse the force to track more lobsterfrogman
  
  
      if (property_get("_saberForceMonsterCount") === 1 && (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(level12_templateObject23 || (level12_templateObject23 = level12_taggedTemplateLiteral(["barrel of gunpowder"])))) < 4) {
        return {
          equip: template_string_$items(level12_templateObject24 || (level12_templateObject24 = level12_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))
        };
      }
  
      return {};
    },
    combat: new combat_CombatStrategy().macro(() => {
      if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(level12_templateObject25 || (level12_templateObject25 = level12_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))) > 0 && property_get("_saberForceUses") < 5 && (property_get("_saberForceMonster") !== $monster(level12_templateObject26 || (level12_templateObject26 = level12_taggedTemplateLiteral(["lobsterfrogman"]))) || property_get("_saberForceMonsterCount") === 0 || property_get("_saberForceMonsterCount") === 1 && (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(level12_templateObject27 || (level12_templateObject27 = level12_taggedTemplateLiteral(["barrel of gunpowder"])))) < 4)) {
        return new Macro().skill(template_string_$skill(level12_templateObject28 || (level12_templateObject28 = level12_taggedTemplateLiteral(["Use the Force"]))));
      }
  
      return new Macro();
    }).kill($monster(level12_templateObject29 || (level12_templateObject29 = level12_taggedTemplateLiteral(["lobsterfrogman"])))),
    choices: {
      1387: 2
    },
    limit: {
      tries: 20
    }
  }, {
    name: "Lighthouse Basic",
    after: ["Enrage", "Lighthouse"],
    completed: () => (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(level12_templateObject30 || (level12_templateObject30 = level12_taggedTemplateLiteral(["barrel of gunpowder"])))) >= 5 || property_get("sidequestLighthouseCompleted") !== "none" || property_get("hasAutumnaton") || args.fluffers,
    do: $location(level12_templateObject31 || (level12_templateObject31 = level12_taggedTemplateLiteral(["Sonofa Beach"]))),
    outfit: {
      modifier: "+combat"
    },
    combat: new combat_CombatStrategy().kill($monster(level12_templateObject32 || (level12_templateObject32 = level12_taggedTemplateLiteral(["lobsterfrogman"])))),
    limit: {
      soft: 40
    }
  }, {
    name: "Lighthouse End",
    after: ["Lighthouse Basic"],
    ready: () => (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(level12_templateObject33 || (level12_templateObject33 = level12_taggedTemplateLiteral(["barrel of gunpowder"])))) >= 5,
    completed: () => property_get("sidequestLighthouseCompleted") !== "none" || args.fluffers,
    outfit: {
      equip: template_string_$items(level12_templateObject34 || (level12_templateObject34 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin"])))
    },
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?place=lighthouse&action=pyro&pwd");
    },
    freeaction: true,
    limit: {
      tries: 1
    }
  }];
  var Junkyard = [{
    name: "Junkyard Start",
    after: ["Enrage"],
    completed: () => lib_have(template_string_$item(level12_templateObject35 || (level12_templateObject35 = level12_taggedTemplateLiteral(["molybdenum magnet"])))) || property_get("sidequestJunkyardCompleted") !== "none" || args.fluffers,
    outfit: {
      equip: template_string_$items(level12_templateObject36 || (level12_templateObject36 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin"])))
    },
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?action=junkman&pwd");
    },
    freeaction: true,
    limit: {
      tries: 1
    }
  }, {
    name: "Junkyard Hammer",
    after: ["Junkyard Start"],
    completed: () => lib_have(template_string_$item(level12_templateObject37 || (level12_templateObject37 = level12_taggedTemplateLiteral(["molybdenum hammer"])))) || property_get("sidequestJunkyardCompleted") !== "none" || args.fluffers,
    acquire: [{
      item: template_string_$item(level12_templateObject38 || (level12_templateObject38 = level12_taggedTemplateLiteral(["seal tooth"])))
    }],
    outfit: {
      equip: template_string_$items(level12_templateObject39 || (level12_templateObject39 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin"])))
    },
    do: $location(level12_templateObject40 || (level12_templateObject40 = level12_taggedTemplateLiteral(["Next to that Barrel with Something Burning in it"]))),
    combat: new combat_CombatStrategy().macro(new Macro().while_("!match whips out && !times 28 && !hpbelow 30", new Macro().item(template_string_$item(level12_templateObject41 || (level12_templateObject41 = level12_taggedTemplateLiteral(["seal tooth"]))))).if_("match whips out", new Macro().item("molybdenum magnet")), $monster(level12_templateObject42 || (level12_templateObject42 = level12_taggedTemplateLiteral(["batwinged gremlin (tool)"])))).banish($monsters(level12_templateObject43 || (level12_templateObject43 = level12_taggedTemplateLiteral(["A.M.C. gremlin, batwinged gremlin, vegetable gremlin"])))).kill($monster(level12_templateObject44 || (level12_templateObject44 = level12_taggedTemplateLiteral(["batwinged gremlin (tool)"])))),
    limit: {
      soft: 15
    }
  }, {
    name: "Junkyard Wrench",
    after: ["Junkyard Start"],
    completed: () => lib_have(template_string_$item(level12_templateObject45 || (level12_templateObject45 = level12_taggedTemplateLiteral(["molybdenum crescent wrench"])))) || property_get("sidequestJunkyardCompleted") !== "none" || args.fluffers,
    acquire: [{
      item: template_string_$item(level12_templateObject46 || (level12_templateObject46 = level12_taggedTemplateLiteral(["seal tooth"])))
    }],
    outfit: {
      equip: template_string_$items(level12_templateObject47 || (level12_templateObject47 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin"])))
    },
    do: $location(level12_templateObject48 || (level12_templateObject48 = level12_taggedTemplateLiteral(["Over Where the Old Tires Are"]))),
    combat: new combat_CombatStrategy().macro(new Macro().while_("!match whips out && !times 28 && !hpbelow 30", new Macro().item(template_string_$item(level12_templateObject49 || (level12_templateObject49 = level12_taggedTemplateLiteral(["seal tooth"]))))).if_("match whips out", new Macro().item("molybdenum magnet")), $monster(level12_templateObject50 || (level12_templateObject50 = level12_taggedTemplateLiteral(["erudite gremlin (tool)"])))).banish($monsters(level12_templateObject51 || (level12_templateObject51 = level12_taggedTemplateLiteral(["A.M.C. gremlin, erudite gremlin, spider gremlin"])))).kill($monster(level12_templateObject52 || (level12_templateObject52 = level12_taggedTemplateLiteral(["erudite gremlin (tool)"])))),
    limit: {
      soft: 15
    }
  }, {
    name: "Junkyard Pliers",
    after: ["Junkyard Start"],
    acquire: [{
      item: template_string_$item(level12_templateObject53 || (level12_templateObject53 = level12_taggedTemplateLiteral(["seal tooth"])))
    }],
    completed: () => lib_have(template_string_$item(level12_templateObject54 || (level12_templateObject54 = level12_taggedTemplateLiteral(["molybdenum pliers"])))) || property_get("sidequestJunkyardCompleted") !== "none" || args.fluffers,
    outfit: {
      equip: template_string_$items(level12_templateObject55 || (level12_templateObject55 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin"])))
    },
    do: $location(level12_templateObject56 || (level12_templateObject56 = level12_taggedTemplateLiteral(["Near an Abandoned Refrigerator"]))),
    combat: new combat_CombatStrategy().macro(new Macro().while_("!match whips out && !times 28 && !hpbelow 30", new Macro().item(template_string_$item(level12_templateObject57 || (level12_templateObject57 = level12_taggedTemplateLiteral(["seal tooth"]))))).if_("match whips out", new Macro().item("molybdenum magnet")), $monster(level12_templateObject58 || (level12_templateObject58 = level12_taggedTemplateLiteral(["spider gremlin (tool)"])))).banish($monsters(level12_templateObject59 || (level12_templateObject59 = level12_taggedTemplateLiteral(["A.M.C. gremlin, batwinged gremlin, spider gremlin"])))).kill($monster(level12_templateObject60 || (level12_templateObject60 = level12_taggedTemplateLiteral(["spider gremlin (tool)"])))),
    limit: {
      soft: 15
    }
  }, {
    name: "Junkyard Screwdriver",
    after: ["Junkyard Start"],
    completed: () => lib_have(template_string_$item(level12_templateObject61 || (level12_templateObject61 = level12_taggedTemplateLiteral(["molybdenum screwdriver"])))) || property_get("sidequestJunkyardCompleted") !== "none" || args.fluffers,
    acquire: [{
      item: template_string_$item(level12_templateObject62 || (level12_templateObject62 = level12_taggedTemplateLiteral(["seal tooth"])))
    }],
    outfit: {
      equip: template_string_$items(level12_templateObject63 || (level12_templateObject63 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin"])))
    },
    do: $location(level12_templateObject64 || (level12_templateObject64 = level12_taggedTemplateLiteral(["Out by that Rusted-Out Car"]))),
    combat: new combat_CombatStrategy().macro(new Macro().while_("!match whips out && !times 28 && !hpbelow 30", new Macro().item(template_string_$item(level12_templateObject65 || (level12_templateObject65 = level12_taggedTemplateLiteral(["seal tooth"]))))).if_("match whips out", new Macro().item("molybdenum magnet")), $monster(level12_templateObject66 || (level12_templateObject66 = level12_taggedTemplateLiteral(["vegetable gremlin (tool)"])))).banish($monsters(level12_templateObject67 || (level12_templateObject67 = level12_taggedTemplateLiteral(["A.M.C. gremlin, erudite gremlin, vegetable gremlin"])))).kill($monster(level12_templateObject68 || (level12_templateObject68 = level12_taggedTemplateLiteral(["vegetable gremlin (tool)"])))),
    limit: {
      soft: 15
    }
  }, {
    name: "Junkyard End",
    after: ["Junkyard Hammer", "Junkyard Wrench", "Junkyard Pliers", "Junkyard Screwdriver"],
    completed: () => property_get("sidequestJunkyardCompleted") !== "none" || args.fluffers,
    outfit: {
      equip: template_string_$items(level12_templateObject69 || (level12_templateObject69 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin"])))
    },
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?action=junkman&pwd");
    },
    freeaction: true,
    limit: {
      tries: 1
    }
  }];
  var Orchard = [{
    name: "Orchard Hatching",
    after: ["Enrage"],
    completed: () => lib_have(template_string_$item(level12_templateObject70 || (level12_templateObject70 = level12_taggedTemplateLiteral(["filthworm hatchling scent gland"])))) || lib_have(template_string_$effect(level12_templateObject71 || (level12_templateObject71 = level12_taggedTemplateLiteral(["Filthworm Larva Stench"])))) || lib_have(template_string_$item(level12_templateObject72 || (level12_templateObject72 = level12_taggedTemplateLiteral(["filthworm drone scent gland"])))) || lib_have(template_string_$effect(level12_templateObject73 || (level12_templateObject73 = level12_taggedTemplateLiteral(["Filthworm Drone Stench"])))) || lib_have(template_string_$item(level12_templateObject74 || (level12_templateObject74 = level12_taggedTemplateLiteral(["filthworm royal guard scent gland"])))) || lib_have(template_string_$effect(level12_templateObject75 || (level12_templateObject75 = level12_taggedTemplateLiteral(["Filthworm Guard Stench"])))) || lib_have(template_string_$item(level12_templateObject76 || (level12_templateObject76 = level12_taggedTemplateLiteral(["heart of the filthworm queen"])))) || property_get("sidequestOrchardCompleted") !== "none" || args.fluffers,
    do: $location(level12_templateObject77 || (level12_templateObject77 = level12_taggedTemplateLiteral(["The Hatching Chamber"]))),
    outfit: () => {
      if (lib_have(template_string_$item(level12_templateObject78 || (level12_templateObject78 = level12_taggedTemplateLiteral(["industrial fire extinguisher"])))) && property_get("_fireExtinguisherCharge") >= 10) return {
        equip: template_string_$items(level12_templateObject79 || (level12_templateObject79 = level12_taggedTemplateLiteral(["industrial fire extinguisher"])))
      };
      if (lib_have(template_string_$item(level12_templateObject80 || (level12_templateObject80 = level12_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))) && property_get("_saberForceUses") < 5) return {
        equip: template_string_$items(level12_templateObject81 || (level12_templateObject81 = level12_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))
      };else return {
        modifier: "item"
      };
    },
    combat: new combat_CombatStrategy().macro(Macro.trySkill(template_string_$skill(level12_templateObject82 || (level12_templateObject82 = level12_taggedTemplateLiteral(["Use the Force"])))).trySkill(template_string_$skill(level12_templateObject83 || (level12_templateObject83 = level12_taggedTemplateLiteral(["Fire Extinguisher: Polar Vortex"])))), $monster(level12_templateObject84 || (level12_templateObject84 = level12_taggedTemplateLiteral(["larval filthworm"])))).kill(),
    choices: {
      1387: 3
    },
    limit: {
      soft: 10
    }
  }, {
    name: "Orchard Feeding",
    after: ["Orchard Hatching"],
    completed: () => lib_have(template_string_$item(level12_templateObject85 || (level12_templateObject85 = level12_taggedTemplateLiteral(["filthworm drone scent gland"])))) || lib_have(template_string_$effect(level12_templateObject86 || (level12_templateObject86 = level12_taggedTemplateLiteral(["Filthworm Drone Stench"])))) || lib_have(template_string_$item(level12_templateObject87 || (level12_templateObject87 = level12_taggedTemplateLiteral(["filthworm royal guard scent gland"])))) || lib_have(template_string_$effect(level12_templateObject88 || (level12_templateObject88 = level12_taggedTemplateLiteral(["Filthworm Guard Stench"])))) || lib_have(template_string_$item(level12_templateObject89 || (level12_templateObject89 = level12_taggedTemplateLiteral(["heart of the filthworm queen"])))) || property_get("sidequestOrchardCompleted") !== "none" || args.fluffers,
    do: $location(level12_templateObject90 || (level12_templateObject90 = level12_taggedTemplateLiteral(["The Feeding Chamber"]))),
    outfit: () => {
      if (lib_have(template_string_$item(level12_templateObject91 || (level12_templateObject91 = level12_taggedTemplateLiteral(["industrial fire extinguisher"])))) && property_get("_fireExtinguisherCharge") >= 10) return {
        equip: template_string_$items(level12_templateObject92 || (level12_templateObject92 = level12_taggedTemplateLiteral(["industrial fire extinguisher"])))
      };
      if (lib_have(template_string_$item(level12_templateObject93 || (level12_templateObject93 = level12_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))) && property_get("_saberForceUses") < 5) return {
        equip: template_string_$items(level12_templateObject94 || (level12_templateObject94 = level12_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))
      };else return {
        modifier: "item"
      };
    },
    combat: new combat_CombatStrategy().macro(Macro.trySkill(template_string_$skill(level12_templateObject95 || (level12_templateObject95 = level12_taggedTemplateLiteral(["Use the Force"])))).trySkill(template_string_$skill(level12_templateObject96 || (level12_templateObject96 = level12_taggedTemplateLiteral(["Fire Extinguisher: Polar Vortex"])))), $monster(level12_templateObject97 || (level12_templateObject97 = level12_taggedTemplateLiteral(["filthworm drone"])))).kill(),
    choices: {
      1387: 3
    },
    effects: $effects(level12_templateObject98 || (level12_templateObject98 = level12_taggedTemplateLiteral(["Filthworm Larva Stench"]))),
    limit: {
      soft: 10
    }
  }, {
    name: "Orchard Guard",
    after: ["Orchard Feeding"],
    completed: () => lib_have(template_string_$item(level12_templateObject99 || (level12_templateObject99 = level12_taggedTemplateLiteral(["filthworm royal guard scent gland"])))) || lib_have(template_string_$effect(level12_templateObject100 || (level12_templateObject100 = level12_taggedTemplateLiteral(["Filthworm Guard Stench"])))) || lib_have(template_string_$item(level12_templateObject101 || (level12_templateObject101 = level12_taggedTemplateLiteral(["heart of the filthworm queen"])))) || property_get("sidequestOrchardCompleted") !== "none" || args.fluffers,
    do: $location(level12_templateObject102 || (level12_templateObject102 = level12_taggedTemplateLiteral(["The Royal Guard Chamber"]))),
    effects: $effects(level12_templateObject103 || (level12_templateObject103 = level12_taggedTemplateLiteral(["Filthworm Drone Stench"]))),
    outfit: () => {
      if (lib_have(template_string_$item(level12_templateObject104 || (level12_templateObject104 = level12_taggedTemplateLiteral(["industrial fire extinguisher"])))) && property_get("_fireExtinguisherCharge") >= 10) return {
        equip: template_string_$items(level12_templateObject105 || (level12_templateObject105 = level12_taggedTemplateLiteral(["industrial fire extinguisher"])))
      };
      if (lib_have(template_string_$item(level12_templateObject106 || (level12_templateObject106 = level12_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))) && property_get("_saberForceUses") < 5) return {
        equip: template_string_$items(level12_templateObject107 || (level12_templateObject107 = level12_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))
      };else return {
        modifier: "item"
      };
    },
    combat: new combat_CombatStrategy().macro(Macro.trySkill(template_string_$skill(level12_templateObject108 || (level12_templateObject108 = level12_taggedTemplateLiteral(["Use the Force"])))).trySkill(template_string_$skill(level12_templateObject109 || (level12_templateObject109 = level12_taggedTemplateLiteral(["Fire Extinguisher: Polar Vortex"])))), $monster(level12_templateObject110 || (level12_templateObject110 = level12_taggedTemplateLiteral(["filthworm royal guard"])))).kill(),
    choices: {
      1387: 3
    },
    limit: {
      soft: 10
    }
  }, {
    name: "Orchard Queen",
    after: ["Orchard Guard"],
    completed: () => lib_have(template_string_$item(level12_templateObject111 || (level12_templateObject111 = level12_taggedTemplateLiteral(["heart of the filthworm queen"])))) || property_get("sidequestOrchardCompleted") !== "none" || args.fluffers,
    do: $location(level12_templateObject112 || (level12_templateObject112 = level12_taggedTemplateLiteral(["The Filthworm Queen's Chamber"]))),
    effects: $effects(level12_templateObject113 || (level12_templateObject113 = level12_taggedTemplateLiteral(["Filthworm Guard Stench"]))),
    combat: new combat_CombatStrategy().kill(),
    limit: {
      tries: 2
    },
    // allow wanderer
    boss: true
  }, {
    name: "Orchard Finish",
    after: ["Orchard Queen", "Open Orchard"],
    completed: () => property_get("sidequestOrchardCompleted") !== "none" || args.fluffers,
    outfit: {
      equip: template_string_$items(level12_templateObject114 || (level12_templateObject114 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin"])))
    },
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?place=orchard&action=stand&pwd");
    },
    freeaction: true,
    limit: {
      tries: 1
    }
  }];
  var Nuns = [{
    name: "Nuns",
    after: ["Open Nuns"],
    completed: () => property_get("sidequestNunsCompleted") !== "none" || args.fluffers,
    priority: () => lib_have(template_string_$effect(level12_templateObject115 || (level12_templateObject115 = level12_taggedTemplateLiteral(["Winklered"])))) ? true : false,
    prepare: () => {
      if (lib_have(template_string_$item(level12_templateObject116 || (level12_templateObject116 = level12_taggedTemplateLiteral(["SongBoom\u2122 BoomBox"])))) && property_get("boomBoxSong") !== "Total Eclipse of Your Meat") (0,external_kolmafia_namespaceObject.cliExecute)("boombox meat");
      if (!property_get("concertVisited")) ensureEffect(template_string_$effect(level12_templateObject117 || (level12_templateObject117 = level12_taggedTemplateLiteral(["Winklered"]))));
    },
    do: $location(level12_templateObject118 || (level12_templateObject118 = level12_taggedTemplateLiteral(["The Themthar Hills"]))),
    outfit: () => {
      if (lib_have(template_string_$familiar(level12_templateObject119 || (level12_templateObject119 = level12_taggedTemplateLiteral(["Trick-or-Treating Tot"])))) && lib_have(template_string_$item(level12_templateObject120 || (level12_templateObject120 = level12_taggedTemplateLiteral(["li'l pirate costume"]))))) {
        return {
          modifier: "meat",
          familiar: template_string_$familiar(level12_templateObject121 || (level12_templateObject121 = level12_taggedTemplateLiteral(["Trick-or-Treating Tot"]))),
          equip: template_string_$items(level12_templateObject122 || (level12_templateObject122 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin, li'l pirate costume"])))
        };
      }
  
      return {
        modifier: "meat",
        familiar: template_string_$familiar(level12_templateObject123 || (level12_templateObject123 = level12_taggedTemplateLiteral(["Hobo Monkey"]))),
        equip: template_string_$items(level12_templateObject124 || (level12_templateObject124 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin, amulet coin"]))) // Use amulet coin (if we have) to avoid using orb
  
      };
    },
    freecombat: true,
    // Do not equip cmg or carn plant
    combat: new combat_CombatStrategy().macro(new Macro().trySkill(template_string_$skill(level12_templateObject125 || (level12_templateObject125 = level12_taggedTemplateLiteral(["Bowl Straight Up"])))).trySkill(template_string_$skill(level12_templateObject126 || (level12_templateObject126 = level12_taggedTemplateLiteral(["Sing Along"]))))).kill(),
    limit: {
      soft: 25
    },
    boss: true
  }];
  var WarQuest = {
    name: "War",
    tasks: [{
      name: "Start",
      after: ["Toot/Finish"],
      ready: () => (0,external_kolmafia_namespaceObject.myLevel)() >= 12,
      completed: () => step("questL12War") !== -1,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Enrage",
      after: ["Start", "Misc/Unlock Island"],
      acquire: [{
        item: template_string_$item(level12_templateObject127 || (level12_templateObject127 = level12_taggedTemplateLiteral(["beer helmet"])))
      }, {
        item: template_string_$item(level12_templateObject128 || (level12_templateObject128 = level12_taggedTemplateLiteral(["distressed denim pants"])))
      }, {
        item: template_string_$item(level12_templateObject129 || (level12_templateObject129 = level12_taggedTemplateLiteral(["bejeweled pledge pin"])))
      }],
      completed: () => step("questL12War") >= 1,
      outfit: {
        equip: template_string_$items(level12_templateObject130 || (level12_templateObject130 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin"]))),
        modifier: "-combat"
      },
      do: $location(level12_templateObject131 || (level12_templateObject131 = level12_taggedTemplateLiteral(["Hippy Camp"]))),
      choices: {
        142: 3,
        1433: 3
      },
      limit: {
        soft: 20
      }
    }, {
      name: "Fluffers",
      after: ["Enrage"],
      completed: () => property_get("hippiesDefeated") >= 1000 || property_get("fratboysDefeated") >= 1000 || !args.fluffers,
      outfit: {
        equip: template_string_$items(level12_templateObject132 || (level12_templateObject132 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin"])))
      },
      do: () => {
        // const count = clamp((1000 - get("hippiesDefeated")) / 46, 0, 24);
        while (property_get("hippiesDefeated") < 1000) {
          ensureFluffers(1);
          (0,external_kolmafia_namespaceObject.use)(template_string_$item(level12_templateObject133 || (level12_templateObject133 = level12_taggedTemplateLiteral(["stuffing fluffer"]))));
        }
      },
      limit: {
        tries: 1
      },
      freeaction: true
    }].concat(Flyers, Lighthouse, Junkyard, [{
      name: "Open Orchard",
      after: ["Flyers End", "Lighthouse End", "Junkyard End"],
      acquire: [{
        item: template_string_$item(level12_templateObject134 || (level12_templateObject134 = level12_taggedTemplateLiteral(["beer helmet"])))
      }, {
        item: template_string_$item(level12_templateObject135 || (level12_templateObject135 = level12_taggedTemplateLiteral(["distressed denim pants"])))
      }, {
        item: template_string_$item(level12_templateObject136 || (level12_templateObject136 = level12_taggedTemplateLiteral(["bejeweled pledge pin"])))
      }],
      completed: () => property_get("hippiesDefeated") >= 64 || args.fluffers,
      outfit: {
        equip: template_string_$items(level12_templateObject137 || (level12_templateObject137 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin"])))
      },
      do: $location(level12_templateObject138 || (level12_templateObject138 = level12_taggedTemplateLiteral(["The Battlefield (Frat Uniform)"]))),
      combat: new combat_CombatStrategy().kill(),
      limit: {
        tries: 10
      }
    }], Orchard, [{
      name: "Open Nuns",
      after: ["Orchard Finish"],
      acquire: [{
        item: template_string_$item(level12_templateObject139 || (level12_templateObject139 = level12_taggedTemplateLiteral(["beer helmet"])))
      }, {
        item: template_string_$item(level12_templateObject140 || (level12_templateObject140 = level12_taggedTemplateLiteral(["distressed denim pants"])))
      }, {
        item: template_string_$item(level12_templateObject141 || (level12_templateObject141 = level12_taggedTemplateLiteral(["bejeweled pledge pin"])))
      }],
      completed: () => property_get("hippiesDefeated") >= 192 || args.fluffers,
      outfit: {
        equip: template_string_$items(level12_templateObject142 || (level12_templateObject142 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin"])))
      },
      do: $location(level12_templateObject143 || (level12_templateObject143 = level12_taggedTemplateLiteral(["The Battlefield (Frat Uniform)"]))),
      combat: new combat_CombatStrategy().kill(),
      limit: {
        tries: 9
      }
    }], Nuns, [{
      name: "Clear",
      after: ["Nuns"],
      acquire: [{
        item: template_string_$item(level12_templateObject144 || (level12_templateObject144 = level12_taggedTemplateLiteral(["beer helmet"])))
      }, {
        item: template_string_$item(level12_templateObject145 || (level12_templateObject145 = level12_taggedTemplateLiteral(["distressed denim pants"])))
      }, {
        item: template_string_$item(level12_templateObject146 || (level12_templateObject146 = level12_taggedTemplateLiteral(["bejeweled pledge pin"])))
      }],
      completed: () => property_get("hippiesDefeated") >= 1000 || args.fluffers,
      outfit: {
        equip: template_string_$items(level12_templateObject147 || (level12_templateObject147 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin"])))
      },
      do: $location(level12_templateObject148 || (level12_templateObject148 = level12_taggedTemplateLiteral(["The Battlefield (Frat Uniform)"]))),
      combat: new combat_CombatStrategy().kill(),
      limit: {
        tries: 30
      }
    }, // Kill whichever side the fluffers finish off first
    {
      name: "Boss Hippie",
      after: ["Fluffers", "Clear"],
      completed: () => step("questL12War") === 999,
      ready: () => property_get("hippiesDefeated") >= 1000,
      outfit: {
        equip: template_string_$items(level12_templateObject149 || (level12_templateObject149 = level12_taggedTemplateLiteral(["beer helmet, distressed denim pants, bejeweled pledge pin"])))
      },
      do: () => {
        (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?place=camp&whichcamp=1&confirm7=1");
        (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?action=bossfight&pwd");
        (0,external_kolmafia_namespaceObject.visitUrl)("main.php");
      },
      post: external_kolmafia_namespaceObject.council,
      boss: true,
      combat: new combat_CombatStrategy().killHard(),
      limit: {
        tries: 1
      }
    }, {
      name: "Boss Frat",
      after: ["Fluffers", "Clear"],
      completed: () => step("questL12War") === 999,
      ready: () => property_get("fratboysDefeated") >= 1000,
      acquire: [{
        item: template_string_$item(level12_templateObject150 || (level12_templateObject150 = level12_taggedTemplateLiteral(["reinforced beaded headband"])))
      }, {
        item: template_string_$item(level12_templateObject151 || (level12_templateObject151 = level12_taggedTemplateLiteral(["bullet-proof corduroys"])))
      }, {
        item: template_string_$item(level12_templateObject152 || (level12_templateObject152 = level12_taggedTemplateLiteral(["round purple sunglasses"])))
      }],
      outfit: {
        equip: template_string_$items(level12_templateObject153 || (level12_templateObject153 = level12_taggedTemplateLiteral(["reinforced beaded headband, bullet-proof corduroys, round purple sunglasses"])))
      },
      do: () => {
        (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?place=camp&whichcamp=2&confirm7=1");
        (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?action=bossfight&pwd");
        (0,external_kolmafia_namespaceObject.visitUrl)("main.php");
      },
      post: external_kolmafia_namespaceObject.council,
      boss: true,
      combat: new combat_CombatStrategy().killHard(),
      limit: {
        tries: 1
      }
    }])
  };
  ;// CONCATENATED MODULE: ./src/tasks/level13.ts
  var level13_templateObject, level13_templateObject2, level13_templateObject3, level13_templateObject4, level13_templateObject5, level13_templateObject6, level13_templateObject7, level13_templateObject8, level13_templateObject9, level13_templateObject10, level13_templateObject11, level13_templateObject12, level13_templateObject13, level13_templateObject14, level13_templateObject15, level13_templateObject16, level13_templateObject17, level13_templateObject18, level13_templateObject19, level13_templateObject20, level13_templateObject21, level13_templateObject22, level13_templateObject23, level13_templateObject24, level13_templateObject25, level13_templateObject26, level13_templateObject27, level13_templateObject28, level13_templateObject29, level13_templateObject30, level13_templateObject31, level13_templateObject32, level13_templateObject33, level13_templateObject34, level13_templateObject35, level13_templateObject36, level13_templateObject37, level13_templateObject38, level13_templateObject39, level13_templateObject40, level13_templateObject41, level13_templateObject42, level13_templateObject43;
  
  function level13_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  var Challenges = [{
    name: "Speed Challenge",
    after: ["Start"],
    completed: () => property_get("nsContestants1") > -1,
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_01_contestbooth");
      (0,external_kolmafia_namespaceObject.runChoice)(1);
      (0,external_kolmafia_namespaceObject.runChoice)(6);
    },
    outfit: {
      familiar: template_string_$familiar(level13_templateObject || (level13_templateObject = level13_taggedTemplateLiteral(["Left-Hand Man"]))),
      modifier: "init"
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Moxie Challenge",
    after: ["Start"],
    ready: () => property_get("nsChallenge1") === $stat(level13_templateObject2 || (level13_templateObject2 = level13_taggedTemplateLiteral(["Moxie"]))),
    completed: () => property_get("nsContestants2") > -1,
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_01_contestbooth");
      (0,external_kolmafia_namespaceObject.runChoice)(2);
      (0,external_kolmafia_namespaceObject.runChoice)(6);
    },
    outfit: {
      familiar: template_string_$familiar(level13_templateObject3 || (level13_templateObject3 = level13_taggedTemplateLiteral(["Left-Hand Man"]))),
      modifier: "moxie"
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Muscle Challenge",
    after: ["Start"],
    ready: () => property_get("nsChallenge1") === $stat(level13_templateObject4 || (level13_templateObject4 = level13_taggedTemplateLiteral(["Muscle"]))),
    completed: () => property_get("nsContestants2") > -1,
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_01_contestbooth");
      (0,external_kolmafia_namespaceObject.runChoice)(2);
      (0,external_kolmafia_namespaceObject.runChoice)(6);
    },
    outfit: {
      familiar: template_string_$familiar(level13_templateObject5 || (level13_templateObject5 = level13_taggedTemplateLiteral(["Left-Hand Man"]))),
      modifier: "muscle"
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Mysticality Challenge",
    after: ["Start"],
    ready: () => property_get("nsChallenge1") === $stat(level13_templateObject6 || (level13_templateObject6 = level13_taggedTemplateLiteral(["Mysticality"]))),
    completed: () => property_get("nsContestants2") > -1,
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_01_contestbooth");
      (0,external_kolmafia_namespaceObject.runChoice)(2);
      (0,external_kolmafia_namespaceObject.runChoice)(6);
    },
    outfit: {
      familiar: template_string_$familiar(level13_templateObject7 || (level13_templateObject7 = level13_taggedTemplateLiteral(["Left-Hand Man"]))),
      modifier: "mysticality"
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Hot Challenge",
    after: ["Start"],
    ready: () => property_get("nsChallenge2") === "hot",
    completed: () => property_get("nsContestants3") > -1,
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_01_contestbooth");
      (0,external_kolmafia_namespaceObject.runChoice)(3);
      (0,external_kolmafia_namespaceObject.runChoice)(6);
    },
    outfit: {
      familiar: template_string_$familiar(level13_templateObject8 || (level13_templateObject8 = level13_taggedTemplateLiteral(["Left-Hand Man"]))),
      modifier: "hot dmg, hot spell dmg"
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Cold Challenge",
    after: ["Start"],
    ready: () => property_get("nsChallenge2") === "cold",
    completed: () => property_get("nsContestants3") > -1,
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_01_contestbooth");
      (0,external_kolmafia_namespaceObject.runChoice)(3);
      (0,external_kolmafia_namespaceObject.runChoice)(6);
    },
    outfit: {
      familiar: template_string_$familiar(level13_templateObject9 || (level13_templateObject9 = level13_taggedTemplateLiteral(["Left-Hand Man"]))),
      modifier: "cold dmg, cold spell dmg"
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Spooky Challenge",
    after: ["Start"],
    ready: () => property_get("nsChallenge2") === "spooky",
    completed: () => property_get("nsContestants3") > -1,
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_01_contestbooth");
      (0,external_kolmafia_namespaceObject.runChoice)(3);
      (0,external_kolmafia_namespaceObject.runChoice)(6);
    },
    outfit: {
      familiar: template_string_$familiar(level13_templateObject10 || (level13_templateObject10 = level13_taggedTemplateLiteral(["Left-Hand Man"]))),
      modifier: "spooky dmg, spooky spell dmg"
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Stench Challenge",
    after: ["Start"],
    ready: () => property_get("nsChallenge2") === "stench",
    completed: () => property_get("nsContestants3") > -1,
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_01_contestbooth");
      (0,external_kolmafia_namespaceObject.runChoice)(3);
      (0,external_kolmafia_namespaceObject.runChoice)(6);
    },
    outfit: {
      familiar: template_string_$familiar(level13_templateObject11 || (level13_templateObject11 = level13_taggedTemplateLiteral(["Left-Hand Man"]))),
      modifier: "stench dmg, stench spell dmg"
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Sleaze Challenge",
    after: ["Start"],
    ready: () => property_get("nsChallenge2") === "sleaze",
    completed: () => property_get("nsContestants3") > -1,
    do: () => {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_01_contestbooth");
      (0,external_kolmafia_namespaceObject.runChoice)(3);
      (0,external_kolmafia_namespaceObject.runChoice)(6);
    },
    outfit: {
      familiar: template_string_$familiar(level13_templateObject12 || (level13_templateObject12 = level13_taggedTemplateLiteral(["Left-Hand Man"]))),
      modifier: "sleaze dmg, sleaze spell dmg"
    },
    limit: {
      tries: 1
    },
    freeaction: true
  }];
  var ChallengeBosses = [{
    name: "Speed Boss",
    after: ["Speed Challenge"],
    completed: () => property_get("nsContestants1") === 0,
    do: $location(level13_templateObject13 || (level13_templateObject13 = level13_taggedTemplateLiteral(["Fastest Adventurer Contest"]))),
    boss: true,
    combat: new combat_CombatStrategy().killHard(),
    limit: {
      tries: 1
    }
  }, {
    name: "Stat Boss",
    after: ["Muscle Challenge", "Moxie Challenge", "Mysticality Challenge"],
    completed: () => property_get("nsContestants2") === 0,
    do: $location(level13_templateObject14 || (level13_templateObject14 = level13_taggedTemplateLiteral(["A Crowd of (Stat) Adventurers"]))),
    boss: true,
    combat: new combat_CombatStrategy().killHard(),
    limit: {
      tries: 1
    }
  }, {
    name: "Element Boss",
    after: ["Hot Challenge", "Cold Challenge", "Spooky Challenge", "Stench Challenge", "Sleaze Challenge"],
    completed: () => property_get("nsContestants3") === 0,
    do: $location(level13_templateObject15 || (level13_templateObject15 = level13_taggedTemplateLiteral(["A Crowd of (Element) Adventurers"]))),
    boss: true,
    combat: new combat_CombatStrategy().killHard(),
    limit: {
      tries: 1
    }
  }];
  var Door = [{
    name: "Boris Lock",
    after: ["Maze", "Keys/Finish"],
    acquire: [{
      item: template_string_$item(level13_templateObject16 || (level13_templateObject16 = level13_taggedTemplateLiteral(["Boris's key"])))
    }],
    completed: () => property_get("nsTowerDoorKeysUsed").includes("Boris"),
    do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower_door&action=ns_lock1"),
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Jarlsberg Lock",
    after: ["Maze", "Keys/Finish"],
    acquire: [{
      item: template_string_$item(level13_templateObject17 || (level13_templateObject17 = level13_taggedTemplateLiteral(["Jarlsberg's key"])))
    }],
    completed: () => property_get("nsTowerDoorKeysUsed").includes("Jarlsberg"),
    do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower_door&action=ns_lock2"),
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Sneaky Pete Lock",
    after: ["Maze", "Keys/Finish"],
    acquire: [{
      item: template_string_$item(level13_templateObject18 || (level13_templateObject18 = level13_taggedTemplateLiteral(["Sneaky Pete's key"])))
    }],
    completed: () => property_get("nsTowerDoorKeysUsed").includes("Sneaky Pete"),
    do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower_door&action=ns_lock3"),
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Star Lock",
    after: ["Maze"],
    acquire: [{
      item: template_string_$item(level13_templateObject19 || (level13_templateObject19 = level13_taggedTemplateLiteral(["Richard's star key"])))
    }],
    completed: () => property_get("nsTowerDoorKeysUsed").includes("Richard's star key"),
    do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower_door&action=ns_lock4"),
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Digital Lock",
    after: ["Maze", "Digital/Key"],
    completed: () => property_get("nsTowerDoorKeysUsed").includes("digital key"),
    do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower_door&action=ns_lock5"),
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Skeleton Lock",
    after: ["Maze"],
    acquire: [{
      item: template_string_$item(level13_templateObject20 || (level13_templateObject20 = level13_taggedTemplateLiteral(["skeleton key"])))
    }],
    completed: () => property_get("nsTowerDoorKeysUsed").includes("skeleton key"),
    do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower_door&action=ns_lock6"),
    limit: {
      tries: 1
    },
    freeaction: true
  }, {
    name: "Door",
    after: ["Boris Lock", "Jarlsberg Lock", "Sneaky Pete Lock", "Star Lock", "Digital Lock", "Skeleton Lock"],
    completed: () => step("questL13Final") > 5,
    do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower_door&action=ns_doorknob"),
    limit: {
      tries: 1
    },
    freeaction: true
  }];
  var TowerQuest = {
    name: "Tower",
    tasks: [{
      name: "Start",
      after: ["Mosquito/Finish", "Tavern/Finish", "Bat/Finish", "Knob/King", "Friar/Finish", "Crypt/Finish", "McLargeHuge/Finish", "Orc Chasm/Finish", "Giant/Finish", "Macguffin/Finish", "War/Boss Hippie", "War/Boss Frat"],
      ready: () => (0,external_kolmafia_namespaceObject.myLevel)() >= 13,
      completed: () => step("questL13Final") !== -1,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php"),
      limit: {
        tries: 1
      },
      freeaction: true
    }].concat(Challenges, ChallengeBosses, [{
      name: "Coronation",
      after: ["Speed Boss", "Stat Boss", "Element Boss"],
      completed: () => step("questL13Final") > 2,
      do: () => {
        (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_01_contestbooth");
        (0,external_kolmafia_namespaceObject.runChoice)(-1);
      },
      choices: {
        1003: 4
      },
      limit: {
        tries: 1
      }
    }, {
      name: "Frank",
      after: ["Coronation"],
      completed: () => step("questL13Final") > 3,
      do: () => {
        (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_02_coronation");
        (0,external_kolmafia_namespaceObject.runChoice)(-1);
      },
      choices: {
        1020: 1,
        1021: 1,
        1022: 1
      },
      limit: {
        tries: 1
      }
    }, {
      name: "Maze",
      after: ["Frank"],
      ready: () => (0,external_kolmafia_namespaceObject.myAdventures)() >= 4,
      completed: () => step("questL13Final") > 4,
      prepare: () => (0,external_kolmafia_namespaceObject.useSkill)(template_string_$skill(level13_templateObject21 || (level13_templateObject21 = level13_taggedTemplateLiteral(["Cannelloni Cocoon"])))),
      do: $location(level13_templateObject22 || (level13_templateObject22 = level13_taggedTemplateLiteral(["The Hedge Maze"]))),
      choices: {
        1004: 1,
        1005: 2,
        1008: 2,
        1011: 2,
        1013: 1,
        1022: 1
      },
      outfit: {
        modifier: "hot res, cold res, stench res, spooky res, sleaze res",
        familiar: template_string_$familiar(level13_templateObject23 || (level13_templateObject23 = level13_taggedTemplateLiteral(["Exotic Parrot"])))
      },
      limit: {
        tries: 1
      }
    }], Door, [{
      name: "Wall of Skin",
      after: ["Door"],
      prepare: () => (0,external_kolmafia_namespaceObject.useSkill)(template_string_$skill(level13_templateObject24 || (level13_templateObject24 = level13_taggedTemplateLiteral(["Cannelloni Cocoon"])))),
      completed: () => step("questL13Final") > 6,
      do: $location(level13_templateObject25 || (level13_templateObject25 = level13_taggedTemplateLiteral(["Tower Level 1"]))),
      effects: $effects(level13_templateObject26 || (level13_templateObject26 = level13_taggedTemplateLiteral(["Spiky Shell, Jalape\xF1o Saucesphere, Psalm of Pointiness, Scarysauce"]))),
      outfit: {
        familiar: template_string_$familiar(level13_templateObject27 || (level13_templateObject27 = level13_taggedTemplateLiteral(["Shorter-Order Cook"]))),
        equip: template_string_$items(level13_templateObject28 || (level13_templateObject28 = level13_taggedTemplateLiteral(["bejeweled cufflinks"])))
      },
      boss: true,
      combat: new combat_CombatStrategy().macro(new Macro().attack().repeat()),
      limit: {
        tries: 1
      }
    }, {
      name: "Wall of Meat",
      after: ["Wall of Skin"],
      prepare: () => (0,external_kolmafia_namespaceObject.useSkill)(template_string_$skill(level13_templateObject29 || (level13_templateObject29 = level13_taggedTemplateLiteral(["Cannelloni Cocoon"])))),
      completed: () => step("questL13Final") > 7,
      do: $location(level13_templateObject30 || (level13_templateObject30 = level13_taggedTemplateLiteral(["Tower Level 2"]))),
      outfit: {
        modifier: "meat",
        skipDefaults: true,
        familiar: template_string_$familiar(level13_templateObject31 || (level13_templateObject31 = level13_taggedTemplateLiteral(["Hobo Monkey"])))
      },
      boss: true,
      combat: new combat_CombatStrategy().killHard(),
      limit: {
        tries: 1
      }
    }, {
      name: "Wall of Bones",
      after: ["Wall of Meat"],
      prepare: () => (0,external_kolmafia_namespaceObject.useSkill)(template_string_$skill(level13_templateObject32 || (level13_templateObject32 = level13_taggedTemplateLiteral(["Cannelloni Cocoon"])))),
      completed: () => step("questL13Final") > 8,
      do: $location(level13_templateObject33 || (level13_templateObject33 = level13_taggedTemplateLiteral(["Tower Level 3"]))),
      outfit: {
        modifier: "spell dmg"
      },
      boss: true,
      combat: new combat_CombatStrategy().macro(new Macro().skill(template_string_$skill(level13_templateObject34 || (level13_templateObject34 = level13_taggedTemplateLiteral(["Garbage Nova"])))).repeat()),
      limit: {
        tries: 1
      }
    }, {
      name: "Mirror",
      after: ["Wall of Bones"],
      acquire: [{
        item: template_string_$item(level13_templateObject35 || (level13_templateObject35 = level13_taggedTemplateLiteral(["Wand of Nagamar"])))
      }],
      completed: () => step("questL13Final") > 9,
      do: $location(level13_templateObject36 || (level13_templateObject36 = level13_taggedTemplateLiteral(["Tower Level 4"]))),
      choices: {
        1015: 2
      },
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Shadow",
      after: ["Mirror"],
      acquire: [{
        item: template_string_$item(level13_templateObject37 || (level13_templateObject37 = level13_taggedTemplateLiteral(["gauze garter"]))),
        num: 6
      }],
      prepare: () => (0,external_kolmafia_namespaceObject.useSkill)(template_string_$skill(level13_templateObject38 || (level13_templateObject38 = level13_taggedTemplateLiteral(["Cannelloni Cocoon"])))),
      completed: () => step("questL13Final") > 10,
      do: $location(level13_templateObject39 || (level13_templateObject39 = level13_taggedTemplateLiteral(["Tower Level 5"]))),
      outfit: {
        modifier: "init"
      },
      boss: true,
      combat: new combat_CombatStrategy().macro(new Macro().item([template_string_$item(level13_templateObject40 || (level13_templateObject40 = level13_taggedTemplateLiteral(["gauze garter"]))), template_string_$item(level13_templateObject41 || (level13_templateObject41 = level13_taggedTemplateLiteral(["gauze garter"])))]).repeat()),
      limit: {
        tries: 1
      }
    }, {
      name: "Naughty Sorceress",
      after: ["Shadow"],
      prepare: () => (0,external_kolmafia_namespaceObject.useSkill)(template_string_$skill(level13_templateObject42 || (level13_templateObject42 = level13_taggedTemplateLiteral(["Cannelloni Cocoon"])))),
      completed: () => step("questL13Final") > 11,
      do: $location(level13_templateObject43 || (level13_templateObject43 = level13_taggedTemplateLiteral(["The Naughty Sorceress' Chamber"]))),
      outfit: {
        modifier: "muscle"
      },
      boss: true,
      combat: new combat_CombatStrategy().kill(),
      limit: {
        tries: 1
      }
    }, {
      name: "Finish",
      after: ["Naughty Sorceress"],
      completed: () => step("questL13Final") === 999,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_11_prism"),
      limit: {
        tries: 1
      },
      freeaction: true,
      noadventures: true
    }])
  };
  // EXTERNAL MODULE: ./node_modules/html-entities/lib/index.js
  var lib = __webpack_require__(805);
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/Clan.js
  function Clan_toConsumableArray(arr) { return Clan_arrayWithoutHoles(arr) || Clan_iterableToArray(arr) || Clan_unsupportedIterableToArray(arr) || Clan_nonIterableSpread(); }
  
  function Clan_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function Clan_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  
  function Clan_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Clan_arrayLikeToArray(arr); }
  
  function Clan_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = Clan_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  
  function Clan_slicedToArray(arr, i) { return Clan_arrayWithHoles(arr) || Clan_iterableToArrayLimit(arr, i) || Clan_unsupportedIterableToArray(arr, i) || Clan_nonIterableRest(); }
  
  function Clan_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function Clan_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Clan_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Clan_arrayLikeToArray(o, minLen); }
  
  function Clan_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function Clan_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
  
  function Clan_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
  
  function Clan_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function Clan_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function Clan_createClass(Constructor, protoProps, staticProps) { if (protoProps) Clan_defineProperties(Constructor.prototype, protoProps); if (staticProps) Clan_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function Clan_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function _wrapRegExp() { _wrapRegExp = function _wrapRegExp(re, groups) { return new BabelRegExp(re, void 0, groups); }; var _super = RegExp.prototype, _groups = new WeakMap(); function BabelRegExp(re, flags, groups) { var _this = new RegExp(re, flags); return _groups.set(_this, groups || _groups.get(re)), Clan_setPrototypeOf(_this, BabelRegExp.prototype); } function buildGroups(result, re) { var g = _groups.get(re); return Object.keys(g).reduce(function (groups, name) { return groups[name] = result[g[name]], groups; }, Object.create(null)); } return Clan_inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); return result && (result.groups = buildGroups(result, this)), result; }, BabelRegExp.prototype[Symbol.replace] = function (str, substitution) { if ("string" == typeof substitution) { var groups = _groups.get(this); return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) { return "$" + groups[name]; })); } if ("function" == typeof substitution) { var _this = this; return _super[Symbol.replace].call(this, str, function () { var args = arguments; return "object" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args); }); } return _super[Symbol.replace].call(this, str, substitution); }, _wrapRegExp.apply(this, arguments); }
  
  function Clan_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Clan_setPrototypeOf(subClass, superClass); }
  
  function Clan_setPrototypeOf(o, p) { Clan_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Clan_setPrototypeOf(o, p); }
  
  
  
  
  
  
  var clanIdCache = {};
  
  var toPlayerId = player => typeof player === "string" ? (0,external_kolmafia_namespaceObject.getPlayerId)(player) : player;
  
  var LOG_FAX_PATTERN = /*#__PURE__*/_wrapRegExp(/(\d{2}\/\d{2}\/\d{2}, \d{2}:\d{2}(?:AM|PM): )<a [^>]+>([^<]+)<\/a>(?: faxed in a (.*?))<br>/, {
    monster: 3
  });
  
  var WHITELIST_DEGREE_PATTERN = /*#__PURE__*/_wrapRegExp(/(.*?) \(\xB0(\d+)\)/, {
    name: 1,
    degree: 2
  });
  
  var Clan = /*#__PURE__*/function () {
    function Clan(id, name) {
      Clan_classCallCheck(this, Clan);
  
      Clan_defineProperty(this, "id", void 0);
  
      Clan_defineProperty(this, "name", void 0);
  
      this.id = id;
      this.name = name;
    }
  
    Clan_createClass(Clan, [{
      key: "_check",
      value: function _check() {
        if (this.id !== (0,external_kolmafia_namespaceObject.getClanId)()) {
          throw new Error("You are no longer a member of this clan");
        }
      }
      /**
       * Join clan
       *
       * @returns Joined clan
       */
  
    }, {
      key: "join",
      value: function join() {
        return Clan.join(this.id);
      }
      /**
       * Check that this clan is the player's current clan
       *
       * @returns Whether this is the current clan
       */
  
    }, {
      key: "check",
      value: function check() {
        return (0,external_kolmafia_namespaceObject.visitUrl)("clan_hall.php").includes("<b>".concat(this.name, "</b>"));
      }
      /**
       * Determine the monster that is currently in the current clan's fax machine if any
       *
       * @returns The current fax monster
       */
  
    }, {
      key: "getCurrentFax",
      value: function getCurrentFax() {
        this._check();
  
        var logs = (0,external_kolmafia_namespaceObject.visitUrl)("clan_log.php");
        var lastFax = logs.match(LOG_FAX_PATTERN);
        if (!lastFax) return null;
  
        var _lastFax = Clan_slicedToArray(lastFax, 4),
            monsterName = _lastFax[3];
  
        if (!monsterName) return null;
        return external_kolmafia_namespaceObject.Monster.get(monsterName);
      }
      /**
       * List available ranks (name, degree and id) from the current clan
       *
       * @returns List of ranks
       */
  
    }, {
      key: "getRanks",
      value: function getRanks() {
        this._check();
  
        var page = (0,external_kolmafia_namespaceObject.visitUrl)("clan_whitelist.php");
        return (0,external_kolmafia_namespaceObject.xpath)(page, '//select[@name="level"]//option').map(option => {
          var validHtml = "<select>".concat(option, "</select>");
          var match = (0,external_kolmafia_namespaceObject.xpath)(validHtml, "//text()")[0].match(WHITELIST_DEGREE_PATTERN);
          var id = (0,external_kolmafia_namespaceObject.xpath)(validHtml, "//@value")[0];
          if (!match || !id) return null;
  
          var _match = Clan_slicedToArray(match, 3),
              encodedName = _match[1],
              degree = _match[2];
  
          return {
            name: (0,lib.decode)(encodedName),
            degree: Number.parseInt(degree),
            id: Number.parseInt(id)
          };
        }).filter(utils_notNull);
      }
      /**
       * Add a player to the current clan's whitelist.
       * If the player is already in the whitelist this will change their rank or title.
       *
       * @param player Player id or name
       * @param rankName Rank to give the player. If not provided they will be given the lowest rank
       * @param title Title to give the player. If not provided, will be blank
       * @returns Success
       */
  
    }, {
      key: "addPlayerToWhitelist",
      value: function addPlayerToWhitelist(player, rankName) {
        var title = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
  
        this._check();
  
        var playerId = toPlayerId(player);
        var ranks = this.getRanks();
        var rank = rankName ? ranks.find(r => r.name === rankName) : ranks.sort((a, b) => a.degree - b.degree)[0];
        if (!rank) return false;
        var result = (0,external_kolmafia_namespaceObject.visitUrl)("clan_whitelist.php?action=add&pwd&addwho=".concat(playerId, "&level=").concat(rank.id, "&title=").concat(title));
        return result.includes("added to whitelist.") || result.includes("That player is already on the whitelist");
      }
      /**
       * Remove a player from the current clan's whitelist
       *
       * @param player Player id or name
       * @returns Success
       */
  
    }, {
      key: "removePlayerFromWhitelist",
      value: function removePlayerFromWhitelist(player) {
        this._check();
  
        var playerId = toPlayerId(player);
        var result = (0,external_kolmafia_namespaceObject.visitUrl)("clan_whitelist.php?action=updatewl&pwd&who=".concat(playerId, "&remove=Remove"));
        return result.includes("Whitelist updated.");
      }
      /**
       * Return the amount of meat in the current clan's coffer
       *
       * @returns Amount of meat
       */
  
    }, {
      key: "getMeatInCoffer",
      value: function getMeatInCoffer() {
        this._check();
  
        var page = (0,external_kolmafia_namespaceObject.visitUrl)("clan_stash.php");
  
        var _ref = page.match(/Your <b>Clan Coffer<\/b> contains ([\d,]+) Meat./) || ["0", "0"],
            _ref2 = Clan_slicedToArray(_ref, 2),
            meat = _ref2[1];
  
        return parseNumber(meat);
      }
      /**
       * Add the given amount of meat to the current clan's coffer.
       *
       * @param amount Amount of meat to put in coffer
       * @returns Success
       */
  
    }, {
      key: "putMeatInCoffer",
      value: function putMeatInCoffer(amount) {
        this._check();
  
        var result = (0,external_kolmafia_namespaceObject.visitUrl)("clan_stash.php?pwd&action=contribute&howmuch=".concat(amount));
        return result.includes("You contributed");
      }
    }, {
      key: "take",
      value: function take(items) {
        this._check();
  
        var map = arrayToCountedMap(items);
        map.forEach((quantity, item) => {
          var needed = Math.max(0, quantity - (0,external_kolmafia_namespaceObject.availableAmount)(item));
  
          if (needed === 0) {
            return map.set(item, 0);
          }
  
          var foldGroup = getFoldGroup(item);
  
          var _iterator = Clan_createForOfIteratorHelper(foldGroup),
              _step;
  
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var foldable = _step.value;
              var quantityToFold = Math.min(needed, (0,external_kolmafia_namespaceObject.availableAmount)(foldable));
  
              for (var _i3 = 0; _i3 < quantityToFold; _i3++) {
                (0,external_kolmafia_namespaceObject.cliExecute)("fold ".concat(item.name));
                needed--;
              }
  
              return map.set(item, needed);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
  
          (0,external_kolmafia_namespaceObject.refreshStash)();
  
          for (var _i2 = 0, _arr2 = [item].concat(Clan_toConsumableArray(foldGroup)); _i2 < _arr2.length; _i2++) {
            var matchingItem = _arr2[_i2];
            var quantityToTake = Math.min(needed, (0,external_kolmafia_namespaceObject.stashAmount)(matchingItem));
            if (quantityToTake === 0) continue; // If we can't take from the stash, there's no sense in iterating through the whole fold group
  
            if (!(0,external_kolmafia_namespaceObject.takeStash)(quantityToTake, matchingItem)) return;
  
            if (matchingItem === item) {
              needed -= quantityToTake;
            } else {
              for (var i = 0; i < quantityToTake; i++) {
                (0,external_kolmafia_namespaceObject.cliExecute)("fold ".concat(matchingItem.name));
                needed--;
              }
            }
          }
        });
        return Array.isArray(items) ? countedMapToArray(map) : map;
      }
    }, {
      key: "put",
      value: function put(items) {
        this._check();
  
        var map = arrayToCountedMap(items);
        if (!this.check()) throw new Error("Wanted to return ".concat(countedMapToString(map), " to ").concat(this.name, " but KoLmafia's clan data is out of sync"));
        map.forEach((quantity, item) => {
          (0,external_kolmafia_namespaceObject.retrieveItem)(quantity, item);
          var returned = Math.min(quantity, (0,external_kolmafia_namespaceObject.availableAmount)(item));
          (0,external_kolmafia_namespaceObject.putStash)(returned, item);
          map.set(item, quantity - returned);
        });
        return Array.isArray(items) ? countedMapToArray(map) : map;
      }
    }, {
      key: "withStash",
      value: function withStash(items, callback) {
        this._check();
  
        var map = arrayToCountedMap(items);
        return Clan._withStash(() => this.take(map), borrowed => this.put(borrowed), callback);
      }
    }], [{
      key: "_join",
      value: function _join(id) {
        var result = (0,external_kolmafia_namespaceObject.visitUrl)("showclan.php?recruiter=1&whichclan=".concat(id, "&pwd&whichclan=").concat(id, "&action=joinclan&apply=Apply+to+this+Clan&confirm=on"));
  
        if (!result.includes("clanhalltop.gif")) {
          throw new Error("Could not join clan");
        }
  
        return Clan.get();
      }
    }, {
      key: "_withStash",
      value: function _withStash(borrowFn, // eslint-disable-next-line @typescript-eslint/no-explicit-any
      returnFn, // eslint-disable-next-line @typescript-eslint/no-explicit-any
      callback) {
        var borrowed = borrowFn();
        var map = arrayToCountedMap(borrowed);
  
        try {
          return callback(borrowed);
        } finally {
          if (map.size > 0) {
            var returned = arrayToCountedMap(returnFn(borrowed));
            map.forEach((quantity, item) => {
              var remaining = quantity - (returned.get(item) || 0);
  
              if (remaining > 0) {
                map.set(item, remaining);
              } else {
                map.delete(item);
              }
            });
  
            if (map.size > 0) {
              dist_logger.error("Failed to return <b>".concat(countedMapToString(map), "</b> to <b>").concat(this.name, "</b> stash"));
            }
          }
        }
      }
      /**
       * Join a clan
       *
       * @param clanIdOrName Clan id or name
       * @returns Instance of joined clan
       */
  
    }, {
      key: "join",
      value: function join(clanIdOrName) {
        var clanId;
  
        if (typeof clanIdOrName === "string") {
          var clanName = clanIdOrName.toLowerCase();
  
          if (clanName === (0,external_kolmafia_namespaceObject.getClanName)().toLowerCase()) {
            return Clan.get();
          }
  
          if (!(clanName in clanIdCache)) {
            var clan = Clan.getWhitelisted().find(c => c.name.toLowerCase() === clanName);
  
            if (!clan) {
              throw new Error("Player is not whitelisted to clan");
            }
  
            clanIdCache[clanName] = clan.id;
          }
  
          clanId = clanIdCache[clanName];
        } else {
          clanId = clanIdOrName;
  
          if (clanId === (0,external_kolmafia_namespaceObject.getClanId)()) {
            return Clan.get();
          }
        }
  
        return Clan._join(clanId);
      }
      /**
       * Execute callback as a member of a clan and then restore prior membership
       *
       * @param clanIdOrName Clan id or name
       * @param callback Actions to carry out while member of specified can
       * @returns Return value from callback
       */
  
    }, {
      key: "with",
      value: function _with(clanIdOrName, callback) {
        var startingClan = Clan.get();
        var clan = Clan.join(clanIdOrName);
  
        try {
          return callback(clan);
        } finally {
          startingClan.join();
        }
      }
    }, {
      key: "withStash",
      value: function withStash(clanIdOrName, items, // eslint-disable-line @typescript-eslint/no-explicit-any
      callback) {
        return Clan._withStash(() => Clan.with(clanIdOrName, clan => clan.take(items)), borrowed => Clan.with(clanIdOrName, clan => clan.put(borrowed)), callback);
      }
      /**
       * Get the player's current clan
       *
       * @returns Player's clan
       */
  
    }, {
      key: "get",
      value: function get() {
        return new Clan((0,external_kolmafia_namespaceObject.getClanId)(), (0,external_kolmafia_namespaceObject.getClanName)());
      }
      /**
       * Get list of clans to which the player is whitelisted
       *
       * @returns List of clans
       */
  
    }, {
      key: "getWhitelisted",
      value: function getWhitelisted() {
        var page = (0,external_kolmafia_namespaceObject.visitUrl)("clan_signup.php");
        return (0,external_kolmafia_namespaceObject.xpath)(page, '//select[@name="whichclan"]//option').map(option => {
          var validHtml = "<select>".concat(option, "</select>");
          var id = Number.parseInt((0,external_kolmafia_namespaceObject.xpath)(validHtml, "//@value")[0]);
          var name = (0,lib.decode)((0,external_kolmafia_namespaceObject.xpath)(validHtml, "//text()")[0]);
          return new Clan(id, name);
        });
      }
    }]);
  
    return Clan;
  }();
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2022/AutumnAton.js
  var AutumnAton_templateObject, AutumnAton_templateObject2, AutumnAton_templateObject3, AutumnAton_templateObject4, AutumnAton_templateObject5, AutumnAton_templateObject6, AutumnAton_templateObject7, AutumnAton_templateObject8, AutumnAton_templateObject9;
  
  function AutumnAton_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  
  var AutumnAton_item = external_kolmafia_namespaceObject.Item.get("autumn-aton");
  /**
   * Is the autumn-aton currently in your inventory, available to deploy?
   *
   * @returns The whether the autumn-aton is currently available for deployment
   */
  
  function available() {
    return (0,external_kolmafia_namespaceObject.availableAmount)(AutumnAton_item) > 0;
  }
  /**
   * Do you own the autumn-aton?
   *
   * @returns Whether you are an autumn-aton `have`r
   */
  
  function AutumnAton_have() {
    return get("hasAutumnaton") || available();
  }
  /**
   * Internal function used to parse the fallbot's choice adventure to determine which zones are currently available
   *
   * @param html The pagetext of the fallbot's choice adventure
   * @returns The locations currently available to send the fallbot to
   */
  
  function checkLocations(html) {
    return (0,external_kolmafia_namespaceObject.xpath)(html, '//select[@name="heythereprogrammer"]//option[position()>1]/@value').map(id => (0,external_kolmafia_namespaceObject.toLocation)(Number(id)));
  }
  /**
   * @returns The current location the autumn-aton is questing in; null if it is not on a quest.
   */
  
  
  function currentlyIn() {
    return get("autumnatonQuestLocation");
  }
  
  function validateLocation(list, location) {
    return list.some(loc => loc.id === location.id);
  }
  /**
   * Deploy the autumn-aton to a location of your choosing.
   *
   * @param target A location to send the autumn-aton to, or a prioritized list of locations to send it to, or a function to pick which location to send it to.
   * @param upgrade Should we apply any upgrades we see available?
   * @returns Where we ended up sending the autumn-aton; null if we didn't send it off.
   */
  
  
  function sendTo(target) {
    var upgrade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    if (!available()) return null;
    var pageHtml = directlyUse(AutumnAton_item);
    if (upgrade && (0,external_kolmafia_namespaceObject.availableChoiceOptions)()[1]) (0,external_kolmafia_namespaceObject.runChoice)(1);
    var locationsAvailable = checkLocations(pageHtml);
    var location = target instanceof external_kolmafia_namespaceObject.Location ? target : Array.isArray(target) ? target.find(l => validateLocation(locationsAvailable, l)) : target(locationsAvailable);
    if (!location) return null;
    if (!validateLocation(locationsAvailable, location)) return null;
    if (!(0,external_kolmafia_namespaceObject.handlingChoice)()) directlyUse(AutumnAton_item);
    (0,external_kolmafia_namespaceObject.runChoice)(2, "heythereprogrammer=".concat(location.id));
    if ((0,external_kolmafia_namespaceObject.handlingChoice)()) (0,external_kolmafia_namespaceObject.visitUrl)("main.php");
    return location;
  }
  /**
   * Install any available upgrades for the autumn-aton.
   *
   * @returns Whether there were any upgrades to install.
   */
  
  function upgrade() {
    directlyUse(AutumnAton_item);
    var canUpgrade = (0,external_kolmafia_namespaceObject.availableChoiceOptions)()[1] !== undefined;
    if (canUpgrade) (0,external_kolmafia_namespaceObject.runChoice)(1);
    (0,external_kolmafia_namespaceObject.visitUrl)("main.php");
    return canUpgrade;
  }
  /**
   * @returns A list of all locations you can send your autumn-aton to right now. Empty if you are unable to send it anywhere.
   */
  
  function availableLocations() {
    if (!available()) return [];
    var pageHtml = directlyUse(AutumnAton_item);
    (0,external_kolmafia_namespaceObject.visitUrl)("main.php");
    return checkLocations(pageHtml);
  }
  /**
   * The mafia names for the autumn-aton upgrades
   */
  
  var possibleUpgrades = (/* unused pure expression or super */ null && (["leftarm1", "leftleg1", "rightarm1", "rightleg1", "base_blackhat", "cowcatcher", "periscope", "radardish", "dualexhaust"]));
  /**
   * @returns An array containing the upgrades that you currently have on your autumn-aton.
   */
  
  function currentUpgrades() {
    return property_get("autumnatonUpgrades").split(",");
  }
  /**
   * @returns The number of turns remaining in your current autumn-aton quest. This number may be negative for any number of reasons.
   */
  
  function turnsLeft() {
    return get("autumnatonQuestTurn") - totalTurnsPlayed();
  }
  /**
   * @returns The number of leg-upgrades your autumn-aton has installed
   */
  
  function legs() {
    return currentUpgrades().filter(u => u.includes("leg")).length;
  }
  /**
   * @returns The number of turns we expect your next autumn-aton quest to take.
   */
  
  function turnsForQuest() {
    return 11 * Math.max(1, get("_autumnatonQuests") - legs());
  }
  /**
   * @returns The current visual acuity level of your autumn-aton as determined by the current upgrade-state.
   */
  
  function visualAcuity() {
    var visualUpgrades = ["periscope", "radardish"];
    return 1 + currentUpgrades().filter(u => visualUpgrades.includes(u)).length;
  }
  /**
   * @returns The number of items from a zone we expect the autumn-aton to steal based on the current upgrade-state. It may not succeed in stealing every item it can.
   */
  
  function zoneItems() {
    return 3 + currentUpgrades().filter(u => u.includes("arm")).length;
  }
  /**
   * @returns The number of seasonal items we expect the autumn-aton to return with given its current upgrade-state.
   */
  
  function seasonalItems() {
    return currentUpgrades().includes("cowcatcher") ? 2 : 1;
  }
  var difficulties = (/* unused pure expression or super */ null && (["low", "mid", "high"]));
  var UNIQUES = {
    outdoor: {
      low: {
        index: 4,
        item: template_string_$item(AutumnAton_templateObject || (AutumnAton_templateObject = AutumnAton_taggedTemplateLiteral(["autumn leaf"])))
      },
      mid: {
        index: 2,
        item: template_string_$item(AutumnAton_templateObject2 || (AutumnAton_templateObject2 = AutumnAton_taggedTemplateLiteral(["autumn debris shield"])))
      },
      high: {
        index: 6,
        item: template_string_$item(AutumnAton_templateObject3 || (AutumnAton_templateObject3 = AutumnAton_taggedTemplateLiteral(["autumn leaf pendant"])))
      }
    },
    indoor: {
      low: {
        index: 0,
        item: template_string_$item(AutumnAton_templateObject4 || (AutumnAton_templateObject4 = AutumnAton_taggedTemplateLiteral(["AutumnFest ale"])))
      },
      mid: {
        index: 3,
        item: template_string_$item(AutumnAton_templateObject5 || (AutumnAton_templateObject5 = AutumnAton_taggedTemplateLiteral(["autumn-spice donut"])))
      },
      high: {
        index: 7,
        item: template_string_$item(AutumnAton_templateObject6 || (AutumnAton_templateObject6 = AutumnAton_taggedTemplateLiteral(["autumn breeze"])))
      }
    },
    underground: {
      low: {
        index: 1,
        item: template_string_$item(AutumnAton_templateObject7 || (AutumnAton_templateObject7 = AutumnAton_taggedTemplateLiteral(["autumn sweater-weather sweater"])))
      },
      mid: {
        index: 5,
        item: template_string_$item(AutumnAton_templateObject8 || (AutumnAton_templateObject8 = AutumnAton_taggedTemplateLiteral(["autumn dollar"])))
      },
      high: {
        index: 8,
        item: template_string_$item(AutumnAton_templateObject9 || (AutumnAton_templateObject9 = AutumnAton_taggedTemplateLiteral(["autumn years wisdom"])))
      }
    }
  };
  /**
   * Determines and returns the upgrade and item drop associated with the given location
   *
   * @param location The location to check the expected autumn-aton-unique drops of
   * @returns `null` if the location has no upgrade or drop; otherwise, the upgrade and the autumn-aton item associated with that item
   */
  
  function getUniques(location) {
    var env = location.environment;
    var difficulty = location.difficultyLevel;
  
    if (arrayContains(env, ["outdoor", "indoor", "underground"]) && arrayContains(difficulty, difficulties)) {
      var _UNIQUES$env$difficul = UNIQUES[env][difficulty],
          index = _UNIQUES$env$difficul.index,
          _item = _UNIQUES$env$difficul.item;
      return {
        upgrade: possibleUpgrades[index],
        item: _item
      };
    }
  
    return null;
  }
  ;// CONCATENATED MODULE: ./src/tasks/misc.ts
  var misc_templateObject, misc_templateObject2, misc_templateObject3, misc_templateObject4, misc_templateObject5, misc_templateObject6, misc_templateObject7, misc_templateObject8, misc_templateObject9, misc_templateObject10, misc_templateObject11, misc_templateObject12, misc_templateObject13, misc_templateObject14, misc_templateObject15, misc_templateObject16, misc_templateObject17, misc_templateObject18, misc_templateObject19, misc_templateObject20, misc_templateObject21, misc_templateObject22, misc_templateObject23, misc_templateObject24, misc_templateObject25, misc_templateObject26, misc_templateObject27, misc_templateObject28, misc_templateObject29, misc_templateObject30, misc_templateObject31, misc_templateObject32, misc_templateObject33, misc_templateObject34, misc_templateObject35, misc_templateObject36, misc_templateObject37, misc_templateObject38, misc_templateObject39, misc_templateObject40, misc_templateObject41, misc_templateObject42, misc_templateObject43, misc_templateObject44, misc_templateObject45, misc_templateObject46, misc_templateObject47, misc_templateObject48, misc_templateObject49, misc_templateObject50, misc_templateObject51, misc_templateObject52, misc_templateObject53, misc_templateObject54, misc_templateObject55, misc_templateObject56, misc_templateObject57, misc_templateObject58, misc_templateObject59, misc_templateObject60, misc_templateObject61, misc_templateObject62, misc_templateObject63, misc_templateObject64, misc_templateObject65, misc_templateObject66, misc_templateObject67, misc_templateObject68, misc_templateObject69, misc_templateObject70, misc_templateObject71, misc_templateObject72, misc_templateObject73, misc_templateObject74, misc_templateObject75, misc_templateObject76, misc_templateObject77, misc_templateObject78, misc_templateObject79, misc_templateObject80, misc_templateObject81, misc_templateObject82, misc_templateObject83, misc_templateObject84, misc_templateObject85, misc_templateObject86, misc_templateObject87, misc_templateObject88, misc_templateObject89, misc_templateObject90, misc_templateObject91, misc_templateObject92, misc_templateObject93, misc_templateObject94, misc_templateObject95, misc_templateObject96, misc_templateObject97, misc_templateObject98, misc_templateObject99, misc_templateObject100, misc_templateObject101, misc_templateObject102, misc_templateObject103, misc_templateObject104, misc_templateObject105, misc_templateObject106, misc_templateObject107, misc_templateObject108, misc_templateObject109, misc_templateObject110, misc_templateObject111, misc_templateObject112, misc_templateObject113, misc_templateObject114, misc_templateObject115, misc_templateObject116, misc_templateObject117, misc_templateObject118, misc_templateObject119, misc_templateObject120, misc_templateObject121;
  
  function misc_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  
  var MiscQuest = {
    name: "Misc",
    tasks: [{
      name: "Unlock Beach",
      after: [],
      completed: () => lib_have(template_string_$item(misc_templateObject || (misc_templateObject = misc_taggedTemplateLiteral(["bitchin' meatcar"])))) || lib_have(template_string_$item(misc_templateObject2 || (misc_templateObject2 = misc_taggedTemplateLiteral(["Desert Bus pass"])))),
      do: () => (0,external_kolmafia_namespaceObject.cliExecute)("acquire 1 bitchin' meatcar"),
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Unlock Island",
      after: ["Mosquito/Start"],
      completed: () => lib_have(template_string_$item(misc_templateObject3 || (misc_templateObject3 = misc_taggedTemplateLiteral(["dingy dinghy"])))) || lib_have(template_string_$item(misc_templateObject4 || (misc_templateObject4 = misc_taggedTemplateLiteral(["junk junk"])))) || lib_have(template_string_$item(misc_templateObject5 || (misc_templateObject5 = misc_taggedTemplateLiteral(["skeletal skiff"])))) || lib_have(template_string_$item(misc_templateObject6 || (misc_templateObject6 = misc_taggedTemplateLiteral(["yellow submarine"])))),
      do: () => {
        var options = template_string_$items(misc_templateObject7 || (misc_templateObject7 = misc_taggedTemplateLiteral(["skeletal skiff, yellow submarine"])));
        var bestChoice = options.sort((a, b) => (0,external_kolmafia_namespaceObject.retrievePrice)(a) - (0,external_kolmafia_namespaceObject.retrievePrice)(b))[0];
  
        if (bestChoice === template_string_$item(misc_templateObject8 || (misc_templateObject8 = misc_taggedTemplateLiteral(["yellow submarine"])))) {
          // Open the mystic store if needed
          if (!lib_have(template_string_$item(misc_templateObject9 || (misc_templateObject9 = misc_taggedTemplateLiteral(["continuum transfunctioner"]))))) {
            (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=forestvillage&action=fv_mystic");
            (0,external_kolmafia_namespaceObject.runChoice)(1);
            (0,external_kolmafia_namespaceObject.runChoice)(1);
            (0,external_kolmafia_namespaceObject.runChoice)(1);
          }
        }
  
        (0,external_kolmafia_namespaceObject.retrieveItem)(bestChoice);
      },
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Floundry",
      after: [],
      completed: () => lib_have(template_string_$item(misc_templateObject10 || (misc_templateObject10 = misc_taggedTemplateLiteral(["fish hatchet"])))) || property_get("_loop_casual_floundry_checked", "") === Clan.get().name,
      do: () => {
        var sufficientFish = (0,external_kolmafia_namespaceObject.visitUrl)("clan_viplounge.php?action=floundry").match("([0-9]+) hatchetfish");
  
        if (sufficientFish === null || parseInt(sufficientFish[1]) < 10) {
          // Recheck if the script is rerun with a new clan
          _set("_loop_casual_floundry_checked", Clan.get().name);
        } else {
          (0,external_kolmafia_namespaceObject.cliExecute)("acquire 1 fish hatchet");
        }
      },
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Short Cook",
      after: [],
      ready: () => lib_have(template_string_$familiar(misc_templateObject11 || (misc_templateObject11 = misc_taggedTemplateLiteral(["Shorter-Order Cook"])))),
      completed: () => (0,external_kolmafia_namespaceObject.familiarEquippedEquipment)(template_string_$familiar(misc_templateObject12 || (misc_templateObject12 = misc_taggedTemplateLiteral(["Shorter-Order Cook"])))) === template_string_$item(misc_templateObject13 || (misc_templateObject13 = misc_taggedTemplateLiteral(["blue plate"]))),
      acquire: [{
        item: template_string_$item(misc_templateObject14 || (misc_templateObject14 = misc_taggedTemplateLiteral(["blue plate"])))
      }],
      do: () => (0,external_kolmafia_namespaceObject.useFamiliar)(template_string_$familiar(misc_templateObject15 || (misc_templateObject15 = misc_taggedTemplateLiteral(["Mosquito"])))),
      // Switch away to keep blue plate equipped
      outfit: {
        familiar: template_string_$familiar(misc_templateObject16 || (misc_templateObject16 = misc_taggedTemplateLiteral(["Shorter-Order Cook"]))),
        equip: template_string_$items(misc_templateObject17 || (misc_templateObject17 = misc_taggedTemplateLiteral(["blue plate"])))
      },
      freeaction: true,
      limit: {
        tries: 1
      }
    }, {
      name: "Acquire Kgnee",
      after: [],
      ready: () => lib_have(template_string_$familiar(misc_templateObject18 || (misc_templateObject18 = misc_taggedTemplateLiteral(["Reagnimated Gnome"])))) && !lib_have(template_string_$item(misc_templateObject19 || (misc_templateObject19 = misc_taggedTemplateLiteral(["gnomish housemaid's kgnee"])))) && !property_get("_loopcasual_checkedGnome", false),
      completed: () => !lib_have(template_string_$familiar(misc_templateObject20 || (misc_templateObject20 = misc_taggedTemplateLiteral(["Reagnimated Gnome"])))) || lib_have(template_string_$item(misc_templateObject21 || (misc_templateObject21 = misc_taggedTemplateLiteral(["gnomish housemaid's kgnee"])))) || property_get("_loopcasual_checkedGnome", false),
      do: () => {
        (0,external_kolmafia_namespaceObject.visitUrl)("arena.php");
        (0,external_kolmafia_namespaceObject.runChoice)(4);
        _set("_loopcasual_checkedGnome", true);
      },
      outfit: {
        familiar: template_string_$familiar(misc_templateObject22 || (misc_templateObject22 = misc_taggedTemplateLiteral(["Reagnimated Gnome"])))
      },
      limit: {
        tries: 1
      }
    }, {
      name: "Acquire FamEquip",
      after: [],
      ready: () => template_string_$items(misc_templateObject23 || (misc_templateObject23 = misc_taggedTemplateLiteral(["astral pet sweater, amulet coin, luck incense"]))).some(item => !lib_have(item)) && $familiars(misc_templateObject24 || (misc_templateObject24 = misc_taggedTemplateLiteral(["Mu, Cornbeefadon"]))).some(lib_have),
      completed: () => template_string_$items(misc_templateObject25 || (misc_templateObject25 = misc_taggedTemplateLiteral(["astral pet sweater, amulet coin, luck incense"]))).some(item => lib_have(item)) || !$familiars(misc_templateObject26 || (misc_templateObject26 = misc_taggedTemplateLiteral(["Mu, Cornbeefadon"]))).some(lib_have),
      do: () => {
        var famToUse = $familiars(misc_templateObject27 || (misc_templateObject27 = misc_taggedTemplateLiteral(["Mu, Cornbeefadon"]))).find(lib_have);
  
        if (famToUse) {
          (0,external_kolmafia_namespaceObject.useFamiliar)(famToUse);
          (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(misc_templateObject28 || (misc_templateObject28 = misc_taggedTemplateLiteral(["box of Familiar Jacks"]))));
          (0,external_kolmafia_namespaceObject.use)(template_string_$item(misc_templateObject29 || (misc_templateObject29 = misc_taggedTemplateLiteral(["box of Familiar Jacks"]))));
        }
      },
      limit: {
        tries: 1
      }
    }, {
      name: "Voting",
      after: [],
      ready: () => property_get("voteAlways"),
      completed: () => lib_have(template_string_$item(misc_templateObject30 || (misc_templateObject30 = misc_taggedTemplateLiteral(["\"I Voted!\" sticker"])))) || property_get("_voteToday"),
      do: () => {
        // Taken from garbo
        var voterValueTable = [{
          monster: $monster(misc_templateObject31 || (misc_templateObject31 = misc_taggedTemplateLiteral(["terrible mutant"]))),
          value: getSaleValue(template_string_$item(misc_templateObject32 || (misc_templateObject32 = misc_taggedTemplateLiteral(["glob of undifferentiated tissue"])))) + 10
        }, {
          monster: $monster(misc_templateObject33 || (misc_templateObject33 = misc_taggedTemplateLiteral(["angry ghost"]))),
          value: getSaleValue(template_string_$item(misc_templateObject34 || (misc_templateObject34 = misc_taggedTemplateLiteral(["ghostly ectoplasm"])))) * 1.11
        }, {
          monster: $monster(misc_templateObject35 || (misc_templateObject35 = misc_taggedTemplateLiteral(["government bureaucrat"]))),
          value: getSaleValue(template_string_$item(misc_templateObject36 || (misc_templateObject36 = misc_taggedTemplateLiteral(["absentee voter ballot"])))) * 0.05 + 75 * 0.25 + 50
        }, {
          monster: $monster(misc_templateObject37 || (misc_templateObject37 = misc_taggedTemplateLiteral(["annoyed snake"]))),
          value: (0,external_kolmafia_namespaceObject.gamedayToInt)()
        }, {
          monster: $monster(misc_templateObject38 || (misc_templateObject38 = misc_taggedTemplateLiteral(["slime blob"]))),
          value: 95 - (0,external_kolmafia_namespaceObject.gamedayToInt)()
        }];
        (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=town_right&action=townright_vote");
        var votingMonsterPriority = voterValueTable.sort((a, b) => b.value - a.value).map(element => element.monster.name);
        var initPriority = new Map([["Meat Drop: +30", 10], ["Item Drop: +15", 9], ["Familiar Experience: +2", 8], ["Adventures: +1", 7], ["Monster Level: +10", 5], ["".concat((0,external_kolmafia_namespaceObject.myPrimestat)(), " Percent: +25"), 3], ["Experience (".concat((0,external_kolmafia_namespaceObject.myPrimestat)(), "): +4"), 2], ["Meat Drop: -30", -2], ["Item Drop: -15", -2], ["Familiar Experience: -2", -2]]);
        var monsterVote = votingMonsterPriority.indexOf(property_get("_voteMonster1")) < votingMonsterPriority.indexOf(property_get("_voteMonster2")) ? 1 : 2;
        var voteLocalPriorityArr = [[0, initPriority.get(property_get("_voteLocal1")) || (property_get("_voteLocal1").indexOf("-") === -1 ? 1 : -1)], [1, initPriority.get(property_get("_voteLocal2")) || (property_get("_voteLocal2").indexOf("-") === -1 ? 1 : -1)], [2, initPriority.get(property_get("_voteLocal3")) || (property_get("_voteLocal3").indexOf("-") === -1 ? 1 : -1)], [3, initPriority.get(property_get("_voteLocal4")) || (property_get("_voteLocal4").indexOf("-") === -1 ? 1 : -1)]];
        var bestVotes = voteLocalPriorityArr.sort((a, b) => b[1] - a[1]);
        var firstInit = bestVotes[0][0];
        var secondInit = bestVotes[1][0];
        (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?option=1&whichchoice=1331&g=".concat(monsterVote, "&local[]=").concat(firstInit, "&local[]=").concat(secondInit));
      },
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Protonic Ghost",
      after: [],
      completed: () => step("questL13Final") >= 0,
      // Stop after tower starts
      ready: () => {
        if (!lib_have(template_string_$item(misc_templateObject39 || (misc_templateObject39 = misc_taggedTemplateLiteral(["protonic accelerator pack"]))))) return false;
        if (property_get("questPAGhost") === "unstarted") return false;
  
        switch (property_get("ghostLocation")) {
          case $location(misc_templateObject40 || (misc_templateObject40 = misc_taggedTemplateLiteral(["Cobb's Knob Treasury"]))):
            return step("questL05Goblin") >= 1;
  
          case $location(misc_templateObject41 || (misc_templateObject41 = misc_taggedTemplateLiteral(["The Haunted Conservatory"]))):
            return step("questM20Necklace") >= 0;
  
          case $location(misc_templateObject42 || (misc_templateObject42 = misc_taggedTemplateLiteral(["The Haunted Gallery"]))):
            return step("questM21Dance") >= 1;
  
          case $location(misc_templateObject43 || (misc_templateObject43 = misc_taggedTemplateLiteral(["The Haunted Kitchen"]))):
            return step("questM20Necklace") >= 0;
  
          case $location(misc_templateObject44 || (misc_templateObject44 = misc_taggedTemplateLiteral(["The Haunted Wine Cellar"]))):
            return step("questL11Manor") >= 1;
  
          case $location(misc_templateObject45 || (misc_templateObject45 = misc_taggedTemplateLiteral(["The Icy Peak"]))):
            return step("questL08Trapper") === 999;
  
          case $location(misc_templateObject46 || (misc_templateObject46 = misc_taggedTemplateLiteral(["Inside the Palindome"]))):
            return lib_have(template_string_$item(misc_templateObject47 || (misc_templateObject47 = misc_taggedTemplateLiteral(["Talisman o' Namsilat"]))));
  
          case $location(misc_templateObject48 || (misc_templateObject48 = misc_taggedTemplateLiteral(["The Old Landfill"]))):
            return (0,external_kolmafia_namespaceObject.myBasestat)((0,external_kolmafia_namespaceObject.myPrimestat)()) >= 25 && step("questL02Larva") >= 0;
  
          case $location(misc_templateObject49 || (misc_templateObject49 = misc_taggedTemplateLiteral(["Madness Bakery"]))):
          case $location(misc_templateObject50 || (misc_templateObject50 = misc_taggedTemplateLiteral(["The Overgrown Lot"]))):
          case $location(misc_templateObject51 || (misc_templateObject51 = misc_taggedTemplateLiteral(["The Skeleton Store"]))):
            return true;
          // Can freely start quest
  
          case $location(misc_templateObject52 || (misc_templateObject52 = misc_taggedTemplateLiteral(["The Smut Orc Logging Camp"]))):
            return step("questL09Topping") >= 0;
  
          case $location(misc_templateObject53 || (misc_templateObject53 = misc_taggedTemplateLiteral(["The Spooky Forest"]))):
            return step("questL02Larva") >= 0;
        }
  
        return false;
      },
      prepare: () => {
        // Start quests if needed
        switch (property_get("ghostLocation")) {
          case $location(misc_templateObject54 || (misc_templateObject54 = misc_taggedTemplateLiteral(["Madness Bakery"]))):
            if (step("questM25Armorer") === -1) {
              (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=armory");
              (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=armory&action=talk");
              (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?pwd=&whichchoice=1065&option=1");
            }
  
            return;
  
          case $location(misc_templateObject55 || (misc_templateObject55 = misc_taggedTemplateLiteral(["The Old Landfill"]))):
            if (step("questM19Hippy") === -1) {
              (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=woods&action=woods_smokesignals");
              (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?pwd=&whichchoice=798&option=1");
              (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?pwd=&whichchoice=798&option=2");
              (0,external_kolmafia_namespaceObject.visitUrl)("woods.php");
            }
  
            return;
  
          case $location(misc_templateObject56 || (misc_templateObject56 = misc_taggedTemplateLiteral(["The Overgrown Lot"]))):
            if (step("questM24Doc") === -1) {
              (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=doc");
              (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=doc&action=talk");
              (0,external_kolmafia_namespaceObject.runChoice)(1);
            }
  
            return;
  
          case $location(misc_templateObject57 || (misc_templateObject57 = misc_taggedTemplateLiteral(["The Skeleton Store"]))):
            if (step("questM23Meatsmith") === -1) {
              (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=meatsmith");
              (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=meatsmith&action=talk");
              (0,external_kolmafia_namespaceObject.runChoice)(1);
            }
  
            return;
  
          default:
            return;
        }
      },
      do: () => {
        var _get;
  
        (0,external_kolmafia_namespaceObject.adv1)((_get = property_get("ghostLocation")) !== null && _get !== void 0 ? _get : $location(misc_templateObject58 || (misc_templateObject58 = misc_taggedTemplateLiteral(["none"]))), 0, "");
      },
      outfit: () => {
        if (property_get("ghostLocation") === $location(misc_templateObject59 || (misc_templateObject59 = misc_taggedTemplateLiteral(["Inside the Palindome"])))) return {
          equip: template_string_$items(misc_templateObject60 || (misc_templateObject60 = misc_taggedTemplateLiteral(["Talisman o' Namsilat, protonic accelerator pack"])))
        };
        return {
          equip: template_string_$items(misc_templateObject61 || (misc_templateObject61 = misc_taggedTemplateLiteral(["protonic accelerator pack"])))
        };
      },
      combat: new combat_CombatStrategy().macro(new Macro().skill(template_string_$skill(misc_templateObject62 || (misc_templateObject62 = misc_taggedTemplateLiteral(["Shoot Ghost"])))).skill(template_string_$skill(misc_templateObject63 || (misc_templateObject63 = misc_taggedTemplateLiteral(["Shoot Ghost"])))).skill(template_string_$skill(misc_templateObject64 || (misc_templateObject64 = misc_taggedTemplateLiteral(["Shoot Ghost"])))).skill(template_string_$skill(misc_templateObject65 || (misc_templateObject65 = misc_taggedTemplateLiteral(["Trap Ghost"]))))),
      limit: {
        tries: 10
      }
    }, {
      name: "CMC Pills",
      ready: () => (0,external_kolmafia_namespaceObject.getWorkshed)() === template_string_$item(misc_templateObject66 || (misc_templateObject66 = misc_taggedTemplateLiteral(["cold medicine cabinet"]))) && (property_get("_coldMedicineConsults") === 0 || (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() >= property_get("_nextColdMedicineConsult")) && template_string_$items(misc_templateObject67 || (misc_templateObject67 = misc_taggedTemplateLiteral(["Extrovermectin\u2122"]))).includes((0,external_kolmafia_namespaceObject.expectedColdMedicineCabinet)().pill),
      completed: () => property_get("_coldMedicineConsults") >= 5,
      priority: () => true,
      do: () => (0,external_kolmafia_namespaceObject.cliExecute)("cmc pill"),
      limit: {
        tries: 5
      }
    }, {
      name: "Autumn-aton",
      after: [],
      ready: () => lib_have(template_string_$item(misc_templateObject68 || (misc_templateObject68 = misc_taggedTemplateLiteral(["autumn-aton"])))),
      completed: () => step("questL13Final") >= 0,
      priority: () => true,
      combat: new combat_CombatStrategy().macro(new Macro()).kill(),
      do: () => {
        //make sure all available upgrades are installed
        upgrade(); //get upgrades
  
        if (!currentUpgrades().includes("leftleg1")) {
          sendTo($location(misc_templateObject69 || (misc_templateObject69 = misc_taggedTemplateLiteral(["Noob Cave"]))));
        } else if (!currentUpgrades().includes("rightleg1") && availableLocations().includes($location(misc_templateObject70 || (misc_templateObject70 = misc_taggedTemplateLiteral(["The Haunted Kitchen"]))))) {
          sendTo($location(misc_templateObject71 || (misc_templateObject71 = misc_taggedTemplateLiteral(["The Haunted Kitchen"]))));
        } else if (!currentUpgrades().includes("leftarm1")) {
          sendTo($location(misc_templateObject72 || (misc_templateObject72 = misc_taggedTemplateLiteral(["The Haunted Pantry"]))));
        } else if (!currentUpgrades().includes("rightarm1") && availableLocations().includes($location(misc_templateObject73 || (misc_templateObject73 = misc_taggedTemplateLiteral(["Twin Peak"]))))) {
          sendTo($location(misc_templateObject74 || (misc_templateObject74 = misc_taggedTemplateLiteral(["Twin Peak"]))));
        } //lighthouse
        else if (currentUpgrades().length >= 4 && step("questL12War") >= 1 && (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(misc_templateObject75 || (misc_templateObject75 = misc_taggedTemplateLiteral(["barrel of gunpowder"])))) < 5 && property_get("sidequestLighthouseCompleted") === "none") {
          (0,external_kolmafia_namespaceObject.adv1)($location(misc_templateObject76 || (misc_templateObject76 = misc_taggedTemplateLiteral(["Sonofa Beach"]))));
          sendTo($location(misc_templateObject77 || (misc_templateObject77 = misc_taggedTemplateLiteral(["Sonofa Beach"]))));
        } //farming
        else if (availableLocations().includes($location(misc_templateObject78 || (misc_templateObject78 = misc_taggedTemplateLiteral(["The Defiled Nook"]))))) {
          sendTo($location(misc_templateObject79 || (misc_templateObject79 = misc_taggedTemplateLiteral(["The Defiled Nook"]))));
        } //If all else fails, grab an autumn leaf. This shouldn't ever happen
        else {
          sendTo($location(misc_templateObject80 || (misc_templateObject80 = misc_taggedTemplateLiteral(["The Sleazy Back Alley"]))));
        }
      },
      limit: {
        tries: 15
      }
    }, {
      name: "Goose Exp",
      after: [],
      priority: () => true,
      completed: () => (0,external_kolmafia_namespaceObject.familiarWeight)(template_string_$familiar(misc_templateObject81 || (misc_templateObject81 = misc_taggedTemplateLiteral(["Grey Goose"])))) >= 9 || property_get("_loop_casual_chef_goose") === "true" || !lib_have(template_string_$familiar(misc_templateObject82 || (misc_templateObject82 = misc_taggedTemplateLiteral(["Grey Goose"])))) || !lib_have(template_string_$familiar(misc_templateObject83 || (misc_templateObject83 = misc_taggedTemplateLiteral(["Shorter-Order Cook"])))),
      do: () => {
        _set("_loop_casual_chef_goose", "true");
      },
      outfit: {
        familiar: template_string_$familiar(misc_templateObject84 || (misc_templateObject84 = misc_taggedTemplateLiteral(["Grey Goose"])))
      },
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Workshed",
      after: [],
      priority: () => true,
      completed: () => (0,external_kolmafia_namespaceObject.getWorkshed)() !== template_string_$item(misc_templateObject85 || (misc_templateObject85 = misc_taggedTemplateLiteral(["none"]))) || !lib_have(args.workshed),
      do: () => (0,external_kolmafia_namespaceObject.use)(args.workshed),
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Open McHugeLarge Bag",
      after: [],
      priority: () => true,
      completed: () => // eslint-disable-next-line libram/verify-constants
      !lib_have(template_string_$item(misc_templateObject86 || (misc_templateObject86 = misc_taggedTemplateLiteral(["McHugeLarge duffel bag"])))) || lib_have(template_string_$item(misc_templateObject87 || (misc_templateObject87 = misc_taggedTemplateLiteral(["McHugeLarge right pole"])))),
      // eslint-disable-next-line libram/verify-constants
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("inventory.php?action=skiduffel&pwd"),
      freeaction: true,
      limit: {
        tries: 1
      }
    }]
  };
  
  function keyCount() {
    var count = (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(misc_templateObject88 || (misc_templateObject88 = misc_taggedTemplateLiteral(["fat loot token"]))));
    if (lib_have(template_string_$item(misc_templateObject89 || (misc_templateObject89 = misc_taggedTemplateLiteral(["Boris's key"])))) || property_get("nsTowerDoorKeysUsed").includes("Boris")) count++;
    if (lib_have(template_string_$item(misc_templateObject90 || (misc_templateObject90 = misc_taggedTemplateLiteral(["Jarlsberg's key"])))) || property_get("nsTowerDoorKeysUsed").includes("Jarlsberg")) count++;
    if (lib_have(template_string_$item(misc_templateObject91 || (misc_templateObject91 = misc_taggedTemplateLiteral(["Sneaky Pete's key"])))) || property_get("nsTowerDoorKeysUsed").includes("Sneaky Pete")) count++;
    return count;
  }
  
  var KeysQuest = {
    name: "Keys",
    tasks: [{
      name: "Deck",
      after: [],
      completed: () => property_get("_deckCardsDrawn") > 0,
      do: () => (0,external_kolmafia_namespaceObject.cliExecute)("cheat tower"),
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Lockpicking",
      after: ["Deck"],
      completed: () => !lib_have(template_string_$skill(misc_templateObject92 || (misc_templateObject92 = misc_taggedTemplateLiteral(["Lock Picking"])))) || property_get("lockPicked"),
      do: () => {
        (0,external_kolmafia_namespaceObject.useSkill)(template_string_$skill(misc_templateObject93 || (misc_templateObject93 = misc_taggedTemplateLiteral(["Lock Picking"]))));
      },
      choices: {
        1414: () => {
          if (!lib_have(template_string_$item(misc_templateObject94 || (misc_templateObject94 = misc_taggedTemplateLiteral(["Boris's key"]))))) return 1;else if (!lib_have(template_string_$item(misc_templateObject95 || (misc_templateObject95 = misc_taggedTemplateLiteral(["Jarlsberg's key"]))))) return 2;else return 3;
        }
      },
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Malware",
      after: [],
      acquire: [{
        item: template_string_$item(misc_templateObject96 || (misc_templateObject96 = misc_taggedTemplateLiteral(["daily dungeon malware"])))
      }, {
        item: template_string_$item(misc_templateObject97 || (misc_templateObject97 = misc_taggedTemplateLiteral(["Pick-O-Matic lockpicks"])))
      }, {
        item: template_string_$item(misc_templateObject98 || (misc_templateObject98 = misc_taggedTemplateLiteral(["eleven-foot pole"])))
      }],
      completed: () => property_get("_dailyDungeonMalwareUsed") || property_get("dailyDungeonDone") || keyCount() >= 3,
      prepare: () => {
        _set("_loop_casual_malware_amount", (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(misc_templateObject99 || (misc_templateObject99 = misc_taggedTemplateLiteral(["daily dungeon malware"])))));
      },
      do: $location(misc_templateObject100 || (misc_templateObject100 = misc_taggedTemplateLiteral(["The Daily Dungeon"]))),
      post: () => {
        if ((0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(misc_templateObject101 || (misc_templateObject101 = misc_taggedTemplateLiteral(["daily dungeon malware"])))) < property_get("_loop_casual_malware_amount", 0)) _set("_dailyDungeonMalwareUsed", true);
        uneffect(template_string_$effect(misc_templateObject102 || (misc_templateObject102 = misc_taggedTemplateLiteral(["Apathy"]))));
      },
      outfit: {
        equip: template_string_$items(misc_templateObject103 || (misc_templateObject103 = misc_taggedTemplateLiteral(["ring of Detect Boring Doors"]))),
        avoid: template_string_$items(misc_templateObject104 || (misc_templateObject104 = misc_taggedTemplateLiteral(["carnivorous potted plant"])))
      },
      combat: new combat_CombatStrategy().macro(new Macro().item(template_string_$item(misc_templateObject105 || (misc_templateObject105 = misc_taggedTemplateLiteral(["daily dungeon malware"])))).attack().repeat()),
      choices: {
        689: 1,
        690: 2,
        691: 3,
        // Do not skip the second chest; there is a chance we skip all the monsters
        692: 3,
        693: 2
      },
      limit: {
        soft: 11
      }
    }, {
      name: "Daily Dungeon",
      after: ["Deck", "Lockpicking", "Malware"],
      acquire: [{
        item: template_string_$item(misc_templateObject106 || (misc_templateObject106 = misc_taggedTemplateLiteral(["Pick-O-Matic lockpicks"])))
      }, {
        item: template_string_$item(misc_templateObject107 || (misc_templateObject107 = misc_taggedTemplateLiteral(["eleven-foot pole"])))
      }],
      completed: () => property_get("dailyDungeonDone") || keyCount() >= 3,
      do: $location(misc_templateObject108 || (misc_templateObject108 = misc_taggedTemplateLiteral(["The Daily Dungeon"]))),
      post: () => uneffect(template_string_$effect(misc_templateObject109 || (misc_templateObject109 = misc_taggedTemplateLiteral(["Apathy"])))),
      outfit: {
        equip: template_string_$items(misc_templateObject110 || (misc_templateObject110 = misc_taggedTemplateLiteral(["ring of Detect Boring Doors"])))
      },
      combat: new combat_CombatStrategy().kill(),
      choices: {
        689: 1,
        690: 2,
        691: 2,
        692: 3,
        693: 2
      },
      limit: {
        tries: 11
      }
    }, {
      name: "Finish",
      after: ["Deck", "Lockpicking", "Malware", "Daily Dungeon"],
      completed: () => keyCount() >= 3,
      do: () => {
        throw "Unable to obtain enough fat loot tokens";
      },
      limit: {
        tries: 1
      },
      freeaction: true
    }]
  };
  var DigitalQuest = {
    name: "Digital",
    tasks: [{
      name: "Open",
      after: ["Mosquito/Start"],
      completed: () => lib_have(template_string_$item(misc_templateObject111 || (misc_templateObject111 = misc_taggedTemplateLiteral(["continuum transfunctioner"])))),
      do: () => {
        (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=forestvillage&action=fv_mystic");
        (0,external_kolmafia_namespaceObject.runChoice)(1);
        (0,external_kolmafia_namespaceObject.runChoice)(1);
        (0,external_kolmafia_namespaceObject.runChoice)(1);
      },
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Fungus",
      after: ["Open"],
      completed: () => getScore() >= 10000,
      ready: () => property_get("8BitColor", "black") === "red",
      // eslint-disable-next-line libram/verify-constants
      do: $location(misc_templateObject112 || (misc_templateObject112 = misc_taggedTemplateLiteral(["The Fungus Plains"]))),
      outfit: {
        modifier: "meat",
        equip: template_string_$items(misc_templateObject113 || (misc_templateObject113 = misc_taggedTemplateLiteral(["continuum transfunctioner"])))
      },
      combat: new combat_CombatStrategy().kill(),
      limit: {
        tries: 21
      },
      delay: 5
    }, {
      name: "Vanya",
      after: ["Open"],
      completed: () => getScore() >= 10000,
      ready: () => property_get("8BitColor", "black") === "black" || property_get("8BitColor", "black") === "",
      // eslint-disable-next-line libram/verify-constants
      do: $location(misc_templateObject114 || (misc_templateObject114 = misc_taggedTemplateLiteral(["Vanya's Castle"]))),
      outfit: {
        modifier: "init",
        equip: template_string_$items(misc_templateObject115 || (misc_templateObject115 = misc_taggedTemplateLiteral(["continuum transfunctioner"])))
      },
      combat: new combat_CombatStrategy().kill(),
      limit: {
        tries: 21
      },
      delay: 10
    }, {
      name: "Megalo",
      after: ["Open"],
      completed: () => getScore() >= 10000,
      ready: () => property_get("8BitColor", "black") === "blue",
      // eslint-disable-next-line libram/verify-constants
      do: $location(misc_templateObject116 || (misc_templateObject116 = misc_taggedTemplateLiteral(["Megalo-City"]))),
      outfit: {
        modifier: "DA",
        equip: template_string_$items(misc_templateObject117 || (misc_templateObject117 = misc_taggedTemplateLiteral(["continuum transfunctioner"])))
      },
      combat: new combat_CombatStrategy().kill(),
      limit: {
        tries: 21
      },
      delay: 5
    }, {
      name: "Hero",
      after: ["Open"],
      completed: () => getScore() >= 10000,
      ready: () => property_get("8BitColor", "black") === "green",
      // eslint-disable-next-line libram/verify-constants
      do: $location(misc_templateObject118 || (misc_templateObject118 = misc_taggedTemplateLiteral(["Hero's Field"]))),
      outfit: {
        modifier: "item",
        equip: template_string_$items(misc_templateObject119 || (misc_templateObject119 = misc_taggedTemplateLiteral(["continuum transfunctioner"])))
      },
      combat: new combat_CombatStrategy().kill(),
      limit: {
        tries: 21
      },
      delay: 5
    }, {
      name: "Key",
      after: ["Open", "Fungus", "Vanya", "Megalo", "Hero"],
      completed: () => lib_have(template_string_$item(misc_templateObject120 || (misc_templateObject120 = misc_taggedTemplateLiteral(["digital key"])))) || property_get("nsTowerDoorKeysUsed").includes("digital key"),
      do: () => {
        if (getScore() >= 10000) {
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=8bit&action=8treasure");
          (0,external_kolmafia_namespaceObject.runChoice)(1);
        }
      },
      outfit: {
        equip: template_string_$items(misc_templateObject121 || (misc_templateObject121 = misc_taggedTemplateLiteral(["continuum transfunctioner"])))
      },
      limit: {
        tries: 2
      } // The first time may only set the property
  
    }]
  };
  
  function getScore() {
    var score = (0,external_kolmafia_namespaceObject.getProperty)("8BitScore");
    if (score === "") return 0;
    return parseInt(score.replace(",", ""));
  }
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2015/ChateauMantegna.js
  
  
  /**
   * @returns Whether we own the Chateau Mantegna
   */
  
  function ChateauMantegna_have() {
    return property_get("chateauAvailable");
  }
  /**
   * @returns `null` for an empty painting; otherwise, the monster trapped in our painting
   */
  
  function paintingMonster() {
    return get("chateauMonster");
  }
  /**
   * @returns Whether or not we've fought our painted monster today
   */
  
  function paintingFought() {
    return get("_chateauMonsterFought");
  }
  /**
   * Fights your currently installed painting monster if able
   *
   * @param combatParams Any parameters you'd like to pass to `runCombat`
   * @returns The result of `runCombat`, which is the page html of the final round of combat
   */
  
  function fightPainting() {
    visitUrl("place.php?whichplace=chateau&action=chateau_painting", false);
    return runCombat.apply(void 0, arguments);
  }
  var desks = (/* unused pure expression or super */ null && (["fancy stationery set", "Swiss piggy bank", "continental juice bar"]));
  var ceilings = ["antler chandelier", "ceiling fan", "artificial skylight"];
  var nightstands = ["foreign language tapes", "bowl of potpourri", "electric muscle stimulator"];
  /**
   * @returns The currently installed desk in your chateau; `null` for none
   */
  
  function getDesk() {
    var _desks$find;
  
    return (_desks$find = desks.find(desk => Object.keys(getChateau()).includes(desk))) !== null && _desks$find !== void 0 ? _desks$find : null;
  }
  /**
   * @returns The currently installed ceiling in your chateau; `null` for none
   */
  
  function getCeiling() {
    var _ceilings$find;
  
    return (_ceilings$find = ceilings.find(ceiling => Object.keys((0,external_kolmafia_namespaceObject.getChateau)()).includes(ceiling))) !== null && _ceilings$find !== void 0 ? _ceilings$find : null;
  }
  /**
   * @returns The currently installed nightstand in your chateau; `null` for none
   */
  
  function getNightstand() {
    var _nightstands$find;
  
    return (_nightstands$find = nightstands.find(nightstand => Object.keys((0,external_kolmafia_namespaceObject.getChateau)()).includes(nightstand))) !== null && _nightstands$find !== void 0 ? _nightstands$find : null;
  }
  /**
   * @param desk The desk to change to
   * @returns Whether our desk currently matches the one requested
   */
  
  function changeDesk(desk) {
    if (getDesk() === desk) return true;
    if (!desks.includes(desk)) return false;
    buy(Item.get(desk));
    return getDesk() === desk;
  }
  /**
   * @param ceiling The ceiling to change to
   * @returns Whether our ceiling currently matches the one requested
   */
  
  function changeCeiling(ceiling) {
    if (getCeiling() === ceiling) return true;
    if (!ceilings.includes(ceiling)) return false;
    (0,external_kolmafia_namespaceObject.buy)(external_kolmafia_namespaceObject.Item.get(ceiling));
    return getCeiling() === ceiling;
  }
  /**
   * @param nightstand The nightstand to change to
   * @returns Whether our nightstand currently matches the one requested
   */
  
  function changeNightstand(nightstand) {
    if (getNightstand() === nightstand) return true;
    if (!nightstands.includes(nightstand)) return false;
    (0,external_kolmafia_namespaceObject.buy)(external_kolmafia_namespaceObject.Item.get(nightstand));
    return getNightstand() === nightstand;
  }
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2016/Witchess.js
  var Witchess_templateObject;
  
  function Witchess_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  var Witchess_item = template_string_$item(Witchess_templateObject || (Witchess_templateObject = Witchess_taggedTemplateLiteral(["Witchess Set"])));
  /**
   * @returns Is the Witchess installed and available in our campground?
   */
  
  function Witchess_have() {
    return lib_haveInCampground(Witchess_item);
  }
  /**
   * @returns How many Witchess fights have we done so far today?
   */
  
  function fightsDone() {
    return property_get("_witchessFights");
  }
  var pieces = external_kolmafia_namespaceObject.Monster.get(["Witchess Pawn", "Witchess Knight", "Witchess Bishop", "Witchess Rook", "Witchess Queen", "Witchess King", "Witchess Witch", "Witchess Ox"]);
  /**
   * Fight a Witchess piece of your choice
   *
   * @param piece The piece to fight
   * @param combatParams Any parameters you'd like to pass to `runCombat`
   * @returns The value of `runCombat()`, which is the page html of the final round
   */
  
  function fightPiece(piece) {
    if (!pieces.includes(piece)) throw new Error("That is not a valid piece.");
  
    if (!(0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=witchess").includes("whichchoice value=1181")) {
      throw new Error("Failed to open Witchess.");
    }
  
    if (!(0,external_kolmafia_namespaceObject.runChoice)(1).includes("whichchoice=1182")) {
      throw new Error("Failed to visit shrink ray.");
    }
  
    if (!(0,external_kolmafia_namespaceObject.visitUrl)("choice.php?option=1&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)(), "&whichchoice=1182&piece=").concat(piece.id), false).includes(piece.name)) {
      throw new Error("Failed to start fight.");
    }
  
    for (var _len = arguments.length, combatParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      combatParams[_key - 1] = arguments[_key];
    }
  
    return external_kolmafia_namespaceObject.runCombat.apply(void 0, combatParams);
  }
  ;// CONCATENATED MODULE: ./src/tasks/leveling.ts
  var leveling_templateObject, leveling_templateObject2, leveling_templateObject3, leveling_templateObject4, leveling_templateObject5, leveling_templateObject6, leveling_templateObject7, leveling_templateObject8, leveling_templateObject9, leveling_templateObject10, leveling_templateObject11, leveling_templateObject12, leveling_templateObject13, leveling_templateObject14, leveling_templateObject15, leveling_templateObject16, leveling_templateObject17, leveling_templateObject18, leveling_templateObject19, leveling_templateObject20, leveling_templateObject21, leveling_templateObject22, leveling_templateObject23, leveling_templateObject24, leveling_templateObject25, leveling_templateObject26, leveling_templateObject27, leveling_templateObject28, leveling_templateObject29, leveling_templateObject30, leveling_templateObject31, leveling_templateObject32, leveling_templateObject33, leveling_templateObject34, leveling_templateObject35, leveling_templateObject36, leveling_templateObject37, leveling_templateObject38, leveling_templateObject39, leveling_templateObject40, leveling_templateObject41, leveling_templateObject42, leveling_templateObject43, leveling_templateObject44, leveling_templateObject45, leveling_templateObject46, leveling_templateObject47, leveling_templateObject48, leveling_templateObject49, leveling_templateObject50, leveling_templateObject51, leveling_templateObject52, leveling_templateObject53, leveling_templateObject54, leveling_templateObject55, leveling_templateObject56, leveling_templateObject57, leveling_templateObject58, leveling_templateObject59, leveling_templateObject60;
  
  function leveling_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  
  function primestatId() {
    switch ((0,external_kolmafia_namespaceObject.myPrimestat)()) {
      case $stat(leveling_templateObject || (leveling_templateObject = leveling_taggedTemplateLiteral(["Muscle"]))):
        return 1;
  
      case $stat(leveling_templateObject2 || (leveling_templateObject2 = leveling_taggedTemplateLiteral(["Mysticality"]))):
        return 2;
  
      case $stat(leveling_templateObject3 || (leveling_templateObject3 = leveling_taggedTemplateLiteral(["Moxie"]))):
        return 3;
    }
  
    return 1;
  }
  
  var LevelingQuest = {
    name: "Leveling",
    tasks: [{
      name: "Cloud Talk",
      after: [],
      ready: () => property_get("getawayCampsiteUnlocked"),
      completed: () => lib_have(template_string_$effect(leveling_templateObject4 || (leveling_templateObject4 = leveling_taggedTemplateLiteral(["That's Just Cloud-Talk, Man"])))) || property_get("_campAwayCloudBuffs", 0) > 0 || (0,external_kolmafia_namespaceObject.myLevel)() >= args.levelto,
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=campaway&action=campaway_sky"),
      freeaction: true,
      limit: {
        tries: 1
      }
    }, {
      name: "Daycare",
      after: [],
      ready: () => property_get("daycareOpen"),
      completed: () => property_get("_daycareGymScavenges") !== 0 || (0,external_kolmafia_namespaceObject.myLevel)() >= args.levelto,
      do: () => {
        if ((property_get("daycareOpen") || property_get("_daycareToday")) && !property_get("_daycareSpa")) {
          switch ((0,external_kolmafia_namespaceObject.myPrimestat)()) {
            case $stat(leveling_templateObject5 || (leveling_templateObject5 = leveling_taggedTemplateLiteral(["Muscle"]))):
              (0,external_kolmafia_namespaceObject.cliExecute)("daycare muscle");
              break;
  
            case $stat(leveling_templateObject6 || (leveling_templateObject6 = leveling_taggedTemplateLiteral(["Mysticality"]))):
              (0,external_kolmafia_namespaceObject.cliExecute)("daycare myst");
              break;
  
            case $stat(leveling_templateObject7 || (leveling_templateObject7 = leveling_taggedTemplateLiteral(["Moxie"]))):
              (0,external_kolmafia_namespaceObject.cliExecute)("daycare moxie");
              break;
          }
        }
  
        (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=town_wrong&action=townwrong_boxingdaycare");
        (0,external_kolmafia_namespaceObject.runChoice)(3);
        (0,external_kolmafia_namespaceObject.runChoice)(2);
      },
      limit: {
        tries: 1
      },
      freeaction: true
    }, {
      name: "Bastille",
      after: [],
      ready: () => lib_have(template_string_$item(leveling_templateObject8 || (leveling_templateObject8 = leveling_taggedTemplateLiteral(["Bastille Battalion control rig"])))),
      completed: () => property_get("_bastilleGames") !== 0 || (0,external_kolmafia_namespaceObject.myLevel)() >= args.levelto,
      do: () => (0,external_kolmafia_namespaceObject.cliExecute)("bastille ".concat((0,external_kolmafia_namespaceObject.myPrimestat)() === $stat(leveling_templateObject9 || (leveling_templateObject9 = leveling_taggedTemplateLiteral(["Mysticality"]))) ? "myst" : (0,external_kolmafia_namespaceObject.myPrimestat)())),
      limit: {
        tries: 1
      },
      freeaction: true,
      outfit: {
        modifier: "exp"
      }
    }, {
      name: "Chateau",
      after: [],
      ready: () => ChateauMantegna_have(),
      completed: () => property_get("timesRested") >= (0,external_kolmafia_namespaceObject.totalFreeRests)() || (0,external_kolmafia_namespaceObject.myLevel)() >= args.levelto,
      prepare: () => {
        // Set the chateau to give the proper stats
        if ((0,external_kolmafia_namespaceObject.myPrimestat)() === $stat(leveling_templateObject10 || (leveling_templateObject10 = leveling_taggedTemplateLiteral(["Muscle"])))) {
          changeNightstand("electric muscle stimulator");
        } else if ((0,external_kolmafia_namespaceObject.myPrimestat)() === $stat(leveling_templateObject11 || (leveling_templateObject11 = leveling_taggedTemplateLiteral(["Mysticality"])))) {
          changeNightstand("foreign language tapes");
        } else if ((0,external_kolmafia_namespaceObject.myPrimestat)() === $stat(leveling_templateObject12 || (leveling_templateObject12 = leveling_taggedTemplateLiteral(["Moxie"])))) {
          changeNightstand("bowl of potpourri");
        } // Set extra free rests
  
  
        if (getCeiling() !== "ceiling fan") {
          changeCeiling("ceiling fan");
        }
      },
      do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=chateau&action=chateau_restbox"),
      freeaction: true,
      outfit: {
        modifier: "exp"
      },
      limit: {
        soft: 40
      }
    }, {
      name: "LOV Tunnel",
      after: [],
      ready: () => property_get("loveTunnelAvailable"),
      completed: () => property_get("_loveTunnelUsed") || (0,external_kolmafia_namespaceObject.myLevel)() >= args.levelto,
      do: $location(leveling_templateObject13 || (leveling_templateObject13 = leveling_taggedTemplateLiteral(["The Tunnel of L.O.V.E."]))),
      choices: {
        1222: 1,
        1223: 1,
        1224: primestatId(),
        1225: 1,
        1226: 2,
        1227: 1,
        1228: 3
      },
      combat: new combat_CombatStrategy().macro(() => new Macro().externalIf((0,external_kolmafia_namespaceObject.myPrimestat)() === $stat(leveling_templateObject14 || (leveling_templateObject14 = leveling_taggedTemplateLiteral(["mysticality"]))), new Macro().skill(template_string_$skill(leveling_templateObject15 || (leveling_templateObject15 = leveling_taggedTemplateLiteral(["Saucestorm"])))).repeat())).killHard(),
      outfit: {
        modifier: "mainstat, 4exp",
        equip: template_string_$items(leveling_templateObject16 || (leveling_templateObject16 = leveling_taggedTemplateLiteral(["makeshift garbage shirt"]))),
        familiar: template_string_$familiar(leveling_templateObject17 || (leveling_templateObject17 = leveling_taggedTemplateLiteral(["Galloping Grill"])))
      },
      limit: {
        tries: 1
      },
      freecombat: true
    }, {
      name: "Snojo",
      after: [],
      ready: () => property_get("snojoAvailable"),
      prepare: () => {
        if (property_get("snojoSetting") === null) {
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=snojo&action=snojo_controller");
          (0,external_kolmafia_namespaceObject.runChoice)(primestatId());
        }
  
        if (lib_have(template_string_$item(leveling_templateObject18 || (leveling_templateObject18 = leveling_taggedTemplateLiteral(["Greatest American Pants"]))))) {
          ensureEffect(template_string_$effect(leveling_templateObject19 || (leveling_templateObject19 = leveling_taggedTemplateLiteral(["Super Skill"])))); // after GAP are equipped
        }
  
        (0,external_kolmafia_namespaceObject.cliExecute)("uneffect ode to booze");
        if ((0,external_kolmafia_namespaceObject.myHp)() < (0,external_kolmafia_namespaceObject.myMaxhp)()) (0,external_kolmafia_namespaceObject.useSkill)(template_string_$skill(leveling_templateObject20 || (leveling_templateObject20 = leveling_taggedTemplateLiteral(["Cannelloni Cocoon"]))));
      },
      completed: () => property_get("_snojoFreeFights") >= 10 || (0,external_kolmafia_namespaceObject.myLevel)() >= 13,
      do: $location(leveling_templateObject21 || (leveling_templateObject21 = leveling_taggedTemplateLiteral(["The X-32-F Combat Training Snowman"]))),
      post: () => {
        if (property_get("_snojoFreeFights") === 10) (0,external_kolmafia_namespaceObject.cliExecute)("hottub"); // Clean -stat effects
      },
      combat: new combat_CombatStrategy().macro(() => {
        if (lib_have(template_string_$familiar(leveling_templateObject22 || (leveling_templateObject22 = leveling_taggedTemplateLiteral(["Frumious Bandersnatch"])))) && lib_have(template_string_$item(leveling_templateObject23 || (leveling_templateObject23 = leveling_taggedTemplateLiteral(["Greatest American Pants"]))))) {
          // Grind exp for Bandersnatch
          return new Macro().skill(template_string_$skill(leveling_templateObject24 || (leveling_templateObject24 = leveling_taggedTemplateLiteral(["Curse of Weaksauce"])))).skill(template_string_$skill(leveling_templateObject25 || (leveling_templateObject25 = leveling_taggedTemplateLiteral(["Stuffed Mortar Shell"])))).while_("!pastround 27 && !hpbelow 100", new Macro().skill(template_string_$skill(leveling_templateObject26 || (leveling_templateObject26 = leveling_taggedTemplateLiteral(["Cannelloni Cannon"]))))).trySkill(template_string_$skill(leveling_templateObject27 || (leveling_templateObject27 = leveling_taggedTemplateLiteral(["Saucegeyser"])))).attack().repeat();
        } else {
          // no need to grind exp
          return new Macro().skill(template_string_$skill(leveling_templateObject28 || (leveling_templateObject28 = leveling_taggedTemplateLiteral(["Saucegeyser"])))).repeat();
        }
      }).killHard(),
      outfit: {
        familiar: template_string_$familiar(leveling_templateObject29 || (leveling_templateObject29 = leveling_taggedTemplateLiteral(["Frumious Bandersnatch"]))),
        equip: template_string_$items(leveling_templateObject30 || (leveling_templateObject30 = leveling_taggedTemplateLiteral(["Greatest American Pants, familiar scrapbook"]))),
        modifier: "mainstat, 4exp, HP"
      },
      effects: $effects(leveling_templateObject31 || (leveling_templateObject31 = leveling_taggedTemplateLiteral(["Spirit of Peppermint"]))),
      limit: {
        tries: 10
      },
      freecombat: true
    }, {
      name: "God Lobster",
      after: [],
      acquire: [{
        item: template_string_$item(leveling_templateObject32 || (leveling_templateObject32 = leveling_taggedTemplateLiteral(["makeshift garbage shirt"]))),
        get: () => (0,external_kolmafia_namespaceObject.cliExecute)("fold makeshift garbage shirt")
      }],
      ready: () => lib_have(template_string_$familiar(leveling_templateObject33 || (leveling_templateObject33 = leveling_taggedTemplateLiteral(["God Lobster"])))),
      completed: () => property_get("_godLobsterFights") >= 3 || (0,external_kolmafia_namespaceObject.myLevel)() >= args.levelto,
      do: () => {
        (0,external_kolmafia_namespaceObject.visitUrl)("main.php?fightgodlobster=1");
        (0,external_kolmafia_namespaceObject.runCombat)();
        (0,external_kolmafia_namespaceObject.runChoice)(3);
      },
      combat: new combat_CombatStrategy().killHard(),
      outfit: {
        modifier: "mainstat, 4exp, monster level percent",
        equip: template_string_$items(leveling_templateObject34 || (leveling_templateObject34 = leveling_taggedTemplateLiteral(["makeshift garbage shirt, unbreakable umbrella"]))),
        familiar: template_string_$familiar(leveling_templateObject35 || (leveling_templateObject35 = leveling_taggedTemplateLiteral(["God Lobster"])))
      },
      limit: {
        tries: 3
      },
      freecombat: true
    }, {
      name: "Witchess",
      after: [],
      ready: () => Witchess_have(),
      completed: () => fightsDone() >= 5 || (0,external_kolmafia_namespaceObject.myLevel)() >= args.levelto,
      do: () => fightPiece($monster(leveling_templateObject36 || (leveling_templateObject36 = leveling_taggedTemplateLiteral(["Witchess Knight"])))),
      combat: new combat_CombatStrategy().killHard(),
      outfit: {
        modifier: "mainstat, 4exp, monster level percent",
        equip: template_string_$items(leveling_templateObject37 || (leveling_templateObject37 = leveling_taggedTemplateLiteral(["makeshift garbage shirt, unbreakable umbrella"]))),
        familiar: template_string_$familiar(leveling_templateObject38 || (leveling_templateObject38 = leveling_taggedTemplateLiteral(["Left-Hand Man"])))
      },
      limit: {
        tries: 5
      },
      freecombat: true
    }, {
      name: "Sausage Fights",
      after: [],
      acquire: [{
        item: template_string_$item(leveling_templateObject39 || (leveling_templateObject39 = leveling_taggedTemplateLiteral(["makeshift garbage shirt"]))),
        get: () => (0,external_kolmafia_namespaceObject.cliExecute)("fold makeshift garbage shirt")
      }],
      ready: () => lib_have(template_string_$familiar(leveling_templateObject40 || (leveling_templateObject40 = leveling_taggedTemplateLiteral(["Pocket Professor"])))) && lib_have(template_string_$item(leveling_templateObject41 || (leveling_templateObject41 = leveling_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"])))) && getKramcoWandererChance() === 1,
      completed: () => property_get("_sausageFights") > 0 || (0,external_kolmafia_namespaceObject.myLevel)() >= args.levelto || !args.professor,
      do: $location(leveling_templateObject42 || (leveling_templateObject42 = leveling_taggedTemplateLiteral(["The Outskirts of Cobb's Knob"]))),
      combat: new combat_CombatStrategy().macro(new Macro().trySkill(template_string_$skill(leveling_templateObject43 || (leveling_templateObject43 = leveling_taggedTemplateLiteral(["lecture on relativity"])))).trySkill(template_string_$skill(leveling_templateObject44 || (leveling_templateObject44 = leveling_taggedTemplateLiteral(["Saucegeyser"])))).repeat(), $monster(leveling_templateObject45 || (leveling_templateObject45 = leveling_taggedTemplateLiteral(["sausage goblin"])))).abort(),
      // error on everything except sausage goblin
      outfit: {
        modifier: "mainstat, 4exp",
        equip: template_string_$items(leveling_templateObject46 || (leveling_templateObject46 = leveling_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122, makeshift garbage shirt, Pocket Professor memory chip"]))),
        familiar: template_string_$familiar(leveling_templateObject47 || (leveling_templateObject47 = leveling_taggedTemplateLiteral(["Pocket Professor"])))
      },
      limit: {
        tries: 1
      },
      freecombat: true
    }, {
      name: "Neverending Party",
      after: [],
      acquire: [{
        item: template_string_$item(leveling_templateObject48 || (leveling_templateObject48 = leveling_taggedTemplateLiteral(["makeshift garbage shirt"]))),
        get: () => (0,external_kolmafia_namespaceObject.cliExecute)("fold makeshift garbage shirt")
      }],
      completed: () => property_get("_neverendingPartyFreeTurns") >= 10 || (0,external_kolmafia_namespaceObject.myLevel)() >= args.levelto,
      do: $location(leveling_templateObject49 || (leveling_templateObject49 = leveling_taggedTemplateLiteral(["The Neverending Party"]))),
      choices: {
        1322: 2,
        1324: 5
      },
      combat: new combat_CombatStrategy().macro(() => {
        if (property_get("_neverendingPartyFreeTurns") >= 7 && property_get("_feelPrideUsed") < 3 && lib_have(template_string_$skill(leveling_templateObject50 || (leveling_templateObject50 = leveling_taggedTemplateLiteral(["Feel Pride"]))))) {
          return new Macro().skill(template_string_$skill(leveling_templateObject51 || (leveling_templateObject51 = leveling_taggedTemplateLiteral(["Feel Pride"]))));
        } else if (property_get("_neverendingPartyFreeTurns") >= 6 && lib_have(template_string_$item(leveling_templateObject52 || (leveling_templateObject52 = leveling_taggedTemplateLiteral(["cosmic bowling ball"]))))) {
          return new Macro().skill(template_string_$skill(leveling_templateObject53 || (leveling_templateObject53 = leveling_taggedTemplateLiteral(["Bowl Sideways"]))));
        } else {
          return new Macro();
        }
      }).killHard(),
      outfit: {
        modifier: "mainstat, 4exp, monster level percent",
        equip: template_string_$items(leveling_templateObject54 || (leveling_templateObject54 = leveling_taggedTemplateLiteral(["makeshift garbage shirt, unbreakable umbrella"]))),
        familiar: template_string_$familiar(leveling_templateObject55 || (leveling_templateObject55 = leveling_taggedTemplateLiteral(["Left-Hand Man"])))
      },
      limit: {
        tries: 11
      },
      freecombat: true
    }, {
      name: "Machine Elf",
      after: [],
      acquire: [{
        item: template_string_$item(leveling_templateObject56 || (leveling_templateObject56 = leveling_taggedTemplateLiteral(["makeshift garbage shirt"]))),
        get: () => (0,external_kolmafia_namespaceObject.cliExecute)("fold makeshift garbage shirt")
      }],
      ready: () => lib_have(template_string_$familiar(leveling_templateObject57 || (leveling_templateObject57 = leveling_taggedTemplateLiteral(["Machine Elf"])))),
      completed: () => property_get("_machineTunnelsAdv") >= 5 || (0,external_kolmafia_namespaceObject.myLevel)() >= args.levelto,
      do: $location(leveling_templateObject58 || (leveling_templateObject58 = leveling_taggedTemplateLiteral(["The Deep Machine Tunnels"]))),
      combat: new combat_CombatStrategy().killHard(),
      outfit: {
        modifier: "mainstat, 4exp, monster level percent",
        equip: template_string_$items(leveling_templateObject59 || (leveling_templateObject59 = leveling_taggedTemplateLiteral(["makeshift garbage shirt, unbreakable umbrella"]))),
        familiar: template_string_$familiar(leveling_templateObject60 || (leveling_templateObject60 = leveling_taggedTemplateLiteral(["Machine Elf"])))
      },
      limit: {
        tries: 5
      },
      freecombat: true
    }, {
      name: "Leaflet",
      after: [],
      ready: () => (0,external_kolmafia_namespaceObject.myLevel)() >= 9,
      completed: () => property_get("leafletCompleted"),
      do: () => {
        (0,external_kolmafia_namespaceObject.visitUrl)("council.php");
        (0,external_kolmafia_namespaceObject.cliExecute)("leaflet");
        _set("leafletCompleted", true);
      },
      freeaction: true,
      limit: {
        tries: 1
      },
      outfit: {
        modifier: "exp"
      }
    }]
  };
  ;// CONCATENATED MODULE: ./src/tasks/all.ts
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  function all_tasks() {
    var quests = [TootQuest, LevelingQuest, MiscQuest, KeysQuest, DietQuest, MosquitoQuest, TavernQuest, BatQuest, KnobQuest, FriarQuest, OrganQuest, CryptQuest, McLargeHugeQuest, ChasmQuest, GiantQuest, HiddenQuest, ManorQuest, PalindomeQuest, MacguffinQuest, WarQuest, DigitalQuest, TowerQuest];
    return getTasks(quests);
  }
  function quest_tasks() {
    var quests = [TootQuest, MiscQuest, KeysQuest, DietQuest, MosquitoQuest, TavernQuest, BatQuest, KnobQuest, FriarQuest, CryptQuest, McLargeHugeQuest, ChasmQuest, GiantQuest, HiddenQuest, ManorQuest, PalindomeQuest, MacguffinQuest, WarQuest, DigitalQuest, TowerQuest];
    return getTasks(quests);
  }
  function level_tasks() {
    return getTasks([LevelingQuest]);
  }
  function organ_tasks() {
    return getTasks([TootQuest, FriarQuest, OrganQuest]);
  }
  ;// CONCATENATED MODULE: ./src/route.ts
  
  var routing = ["Diet/Numberology", // Numberology is always ready at the start of the day
  "Diet/Sausage", // Eat magical sausages as soon as they are obtained
  "Diet/Hourglass", // Pickup items
  "Misc/Short Cook", "Misc/Floundry", "Misc/Voting", "Misc/Acquire Kgnee", "Misc/Acquire FamEquip", // Start with the basic leveling tasks
  "Toot/Finish", "Leveling/Cloud Talk", "Leveling/Daycare", "Leveling/Bastille", "Leveling/Leaflet", "Leveling/Snojo", "Leveling/Chateau", // Then do the scaling leveling
  "Leveling/LOV Tunnel", "Leveling/Witchess", "Leveling/God Lobster", "Leveling/Machine Elf", "Leveling/Neverending Party", "Leveling/Sausage Fights", "Diet/Consume", "Misc/Protonic Ghost", // whenever ghosts are ready
  // Open up MacGuffin zones
  "Macguffin/Diary", "Macguffin/Desert", // charge camel, use voters
  // Line up noncombats
  "Manor/Billiards", "War/Enrage", "War/Flyers End", // Turn in flyers ASAP in-case of tracking issues
  "Giant/Airship", "Friar/Finish", "Crypt/Cranny", "Mosquito/Mosquito", "Hidden City/Open Temple", "Tavern/Finish", "Giant/Basement Finish", // Burn delay to unlock remaining noncombats
  "Palindome/Copperhead", "Palindome/Bat Snake", "Palindome/Cold Snake", "Giant/Ground", "Palindome/Zepplin", "Manor/Bedroom", "Manor/Bathroom Delay", "Manor/Gallery Delay", // Line up more noncombats
  "Manor/Gallery", // Gallery first in-case we banished Out in the Garden
  "Giant/Top Floor", "Manor/Bathroom", "Manor/Ballroom", // Detour to route Steely-Eyed Squint
  "Manor/Wine Cellar", "Manor/Laundry Room", // Finish noncombats, now with freekills available
  "Palindome/Alarm Gem", // Use Hidden City to charge camel
  "Hidden City/Open Bowling", "Hidden City/Open Office", "Hidden City/Open Hospital", "Hidden City/Open Apartment", // Nostalgia chaining
  "Orc Chasm/ABoo Start", "Crypt/Nook", "Orc Chasm/ABoo Peak", "Hidden City/Apartment", // Get this out of the way
  "Macguffin/Open Pyramid", // Open more delay for lategame
  // Non-delay quests
  "Mosquito/Finish", "Tavern/Finish", "Bat/Use Sonar", "Crypt/Finish", "McLargeHuge/Finish", "Orc Chasm/Finish", "Giant/Finish", "War/Boss Hippie", "War/Boss Frat", // Finish up with last delay
  "Macguffin/Finish", "Knob/King", "Bat/Finish", // Obtain available keys before attempting the daily dungeon
  "Keys/Deck", "Keys/Lockpicking", "Tower/Finish", "Organ/Finish" // Organ last, just so it doesn't appear in turncount
  ];
  function prioritize(tasks, ignore_missing_tasks) {
    return orderByRoute(tasks, routing, ignore_missing_tasks);
  }
  ;// CONCATENATED MODULE: ./src/engine/moods.ts
  var moods_templateObject, moods_templateObject2, moods_templateObject3, moods_templateObject4, moods_templateObject5, moods_templateObject6, moods_templateObject7, moods_templateObject8, moods_templateObject9, moods_templateObject10, moods_templateObject11, moods_templateObject12, moods_templateObject13, moods_templateObject14, moods_templateObject15, moods_templateObject16, moods_templateObject17, moods_templateObject18, moods_templateObject19, moods_templateObject20, moods_templateObject21, moods_templateObject22, moods_templateObject23, moods_templateObject24, moods_templateObject25, moods_templateObject26, moods_templateObject27, moods_templateObject28, moods_templateObject29, moods_templateObject30, moods_templateObject31, moods_templateObject32, moods_templateObject33, moods_templateObject34, moods_templateObject35, moods_templateObject36, moods_templateObject37, moods_templateObject38, moods_templateObject39;
  
  function moods_toConsumableArray(arr) { return moods_arrayWithoutHoles(arr) || moods_iterableToArray(arr) || moods_unsupportedIterableToArray(arr) || moods_nonIterableSpread(); }
  
  function moods_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function moods_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  
  function moods_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return moods_arrayLikeToArray(arr); }
  
  function moods_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = moods_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  
  function moods_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return moods_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return moods_arrayLikeToArray(o, minLen); }
  
  function moods_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function moods_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  function getRelevantEffects() {
    var result = {
      "-combat": $effects(moods_templateObject || (moods_templateObject = moods_taggedTemplateLiteral(["Smooth Movements, The Sonata of Sneakiness"]))),
      "+combat": $effects(moods_templateObject2 || (moods_templateObject2 = moods_taggedTemplateLiteral(["Carlweather's Cantata of Confrontation, Musk of the Moose"]))),
      "": $effects(moods_templateObject3 || (moods_templateObject3 = moods_taggedTemplateLiteral(["Empathy, Leash of Linguini, Astral Shell, Elemental Saucesphere"]))),
      "fam weight": $effects(moods_templateObject4 || (moods_templateObject4 = moods_taggedTemplateLiteral(["Chorale of Companionship"]))),
      init: $effects(moods_templateObject5 || (moods_templateObject5 = moods_taggedTemplateLiteral(["Walberg's Dim Bulb, Springy Fusilli"]))),
      ML: $effects(moods_templateObject6 || (moods_templateObject6 = moods_taggedTemplateLiteral(["Ur-Kel's Aria of Annoyance, Pride of the Puffin, Drescher's Annoying Noise"]))),
      item: $effects(moods_templateObject7 || (moods_templateObject7 = moods_taggedTemplateLiteral(["Fat Leon's Phat Loot Lyric, Singer's Faithful Ocelot"]))),
      meat: $effects(moods_templateObject8 || (moods_templateObject8 = moods_taggedTemplateLiteral(["Polka of Plenty"]))),
      mainstat: $effects(moods_templateObject9 || (moods_templateObject9 = moods_taggedTemplateLiteral(["Big, Tomato Power, Trivia Master, Gr8ness, Carol of the Hells, Carol of the Thrills"]))),
      muscle: $effects(moods_templateObject10 || (moods_templateObject10 = moods_taggedTemplateLiteral(["Go Get 'Em, Tiger!, Phorcefullness, Incredibly Hulking"], ["Go Get 'Em\\, Tiger!, Phorcefullness, Incredibly Hulking"]))),
      mysticality: $effects(moods_templateObject11 || (moods_templateObject11 = moods_taggedTemplateLiteral(["Glittering Eyelashes, Mystically Oiled, On the Shoulders of Giants"]))),
      moxie: $effects(moods_templateObject12 || (moods_templateObject12 = moods_taggedTemplateLiteral(["Butt-Rock Hair, Superhuman Sarcasm, Cock of the Walk"])))
    }; // Class-specific
  
    if ((0,external_kolmafia_namespaceObject.myClass)() === $class(moods_templateObject13 || (moods_templateObject13 = moods_taggedTemplateLiteral(["Seal Clubber"])))) result["init"].push(template_string_$effect(moods_templateObject14 || (moods_templateObject14 = moods_taggedTemplateLiteral(["Silent Hunting"]))));else result["init"].push(template_string_$effect(moods_templateObject15 || (moods_templateObject15 = moods_taggedTemplateLiteral(["Nearly Silent Hunting"])))); // One-per-day
  
    if (!property_get("_ballpit")) result["mainstat"].push(template_string_$effect(moods_templateObject16 || (moods_templateObject16 = moods_taggedTemplateLiteral(["Having a Ball!"]))));
    if (!property_get("_lyleFavored")) result["mainstat"].push(template_string_$effect(moods_templateObject17 || (moods_templateObject17 = moods_taggedTemplateLiteral(["Favored by Lyle"]))));
    if (!property_get("telescopeLookedHigh")) result["mainstat"].push(template_string_$effect(moods_templateObject18 || (moods_templateObject18 = moods_taggedTemplateLiteral(["Starry-Eyed"]))));
    if (property_get("spacegateAlways") && property_get("spacegateVaccine2") && !property_get("_spacegateVaccine")) result["mainstat"].push(template_string_$effect(moods_templateObject19 || (moods_templateObject19 = moods_taggedTemplateLiteral(["Broad-Spectrum Vaccine"]))));
    if (lib_have(template_string_$skill(moods_templateObject20 || (moods_templateObject20 = moods_taggedTemplateLiteral(["Emotionally Chipped"])))) && property_get("_feelExcitementUsed") < 3) result["mainstat"].push(template_string_$effect(moods_templateObject21 || (moods_templateObject21 = moods_taggedTemplateLiteral(["Feeling Excited"]))));
    if (lib_have(template_string_$item(moods_templateObject22 || (moods_templateObject22 = moods_taggedTemplateLiteral(["protonic accelerator pack"])))) && !property_get("_streamsCrossed")) result["mainstat"].push(template_string_$effect(moods_templateObject23 || (moods_templateObject23 = moods_taggedTemplateLiteral(["Total Protonic Reversal"])))); // Noncombat buffs
  
    if ((0,external_kolmafia_namespaceObject.haveSkill)(template_string_$skill(moods_templateObject24 || (moods_templateObject24 = moods_taggedTemplateLiteral(["Feel Lonely"])))) && (property_get("_feelLonelyUsed") < 3 || lib_have(template_string_$effect(moods_templateObject25 || (moods_templateObject25 = moods_taggedTemplateLiteral(["Feeling Lonely"])))))) result["-combat"].push(template_string_$effect(moods_templateObject26 || (moods_templateObject26 = moods_taggedTemplateLiteral(["Feeling Lonely"]))));
    if (!property_get("_olympicSwimmingPool") || lib_have(template_string_$effect(moods_templateObject27 || (moods_templateObject27 = moods_taggedTemplateLiteral(["Silent Running"]))))) result["-combat"].push(template_string_$effect(moods_templateObject28 || (moods_templateObject28 = moods_taggedTemplateLiteral(["Silent Running"])))); // TODO: Silence of the God Lobster?
    // TODO: Snow cleats?
  
    return result;
  }
  
  function moods_isSong(effect) {
    return (0,external_kolmafia_namespaceObject.toSkill)(effect).class === $class(moods_templateObject29 || (moods_templateObject29 = moods_taggedTemplateLiteral(["Accordion Thief"]))) && (0,external_kolmafia_namespaceObject.toSkill)(effect).buff;
  }
  
  function moods_maxSongs() {
    return lib_have(template_string_$skill(moods_templateObject30 || (moods_templateObject30 = moods_taggedTemplateLiteral(["Mariachi Memory"])))) ? 4 : 3;
  }
  
  function shrug(effects) {
    var _iterator = moods_createForOfIteratorHelper(effects),
        _step;
  
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var effect = _step.value;
        if (lib_have(effect)) uneffect(effect);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
  
  function applyEffects(modifier) {
    var relevantEffects = getRelevantEffects();
    var useful_effects = [];
  
    for (var key in relevantEffects) {
      if (modifier.includes(key)) {
        useful_effects.push.apply(useful_effects, moods_toConsumableArray(relevantEffects[key]));
      }
    }
  
    if (modifier.includes("MP")) {
      useful_effects.push.apply(useful_effects, moods_toConsumableArray(relevantEffects["mysticality"]));
    } // Handle mainstat buffing and equalizing
  
  
    switch ((0,external_kolmafia_namespaceObject.myPrimestat)()) {
      case $stat(moods_templateObject31 || (moods_templateObject31 = moods_taggedTemplateLiteral(["Muscle"]))):
        if (modifier.includes("mainstat")) useful_effects.push.apply(useful_effects, moods_toConsumableArray(relevantEffects["muscle"]));
        if (modifier.includes("moxie") || modifier.includes("myst")) useful_effects.push(template_string_$effect(moods_templateObject32 || (moods_templateObject32 = moods_taggedTemplateLiteral(["Stabilizing Oiliness"]))));
        break;
  
      case $stat(moods_templateObject33 || (moods_templateObject33 = moods_taggedTemplateLiteral(["Mysticality"]))):
        if (modifier.includes("mainstat")) useful_effects.push.apply(useful_effects, moods_toConsumableArray(relevantEffects["mysticality"]));
        if (modifier.includes("moxie") || modifier.includes("muscle")) useful_effects.push(template_string_$effect(moods_templateObject34 || (moods_templateObject34 = moods_taggedTemplateLiteral(["Expert Oiliness"]))));
        break;
  
      case $stat(moods_templateObject35 || (moods_templateObject35 = moods_taggedTemplateLiteral(["Moxie"]))):
        if (modifier.includes("mainstat")) useful_effects.push.apply(useful_effects, moods_toConsumableArray(relevantEffects["moxie"]));
        if (modifier.includes("muscle") || modifier.includes("myst")) useful_effects.push(template_string_$effect(moods_templateObject36 || (moods_templateObject36 = moods_taggedTemplateLiteral(["Slippery Oiliness"]))));
        break;
    } // Remove wrong combat effects
  
  
    if (modifier.includes("+combat")) shrug(relevantEffects["-combat"]);
    if (modifier.includes("-combat")) shrug(relevantEffects["+combat"]);
  
    if ((0,external_kolmafia_namespaceObject.myMaxmp)() < 27 && lib_have(template_string_$skill(moods_templateObject37 || (moods_templateObject37 = moods_taggedTemplateLiteral(["The Magical Mojomuscular Melody"]))))) {
      useful_effects.unshift(template_string_$effect(moods_templateObject38 || (moods_templateObject38 = moods_taggedTemplateLiteral(["The Magical Mojomuscular Melody"]))));
    } // Make room for songs
  
  
    var songs = [];
  
    for (var _i = 0, _useful_effects = useful_effects; _i < _useful_effects.length; _i++) {
      var effect = _useful_effects[_i];
      if (moods_isSong(effect)) songs.push(effect);
    }
  
    if (songs.length > moods_maxSongs()) throw "Too many AT songs.";
  
    if (songs.length > 0) {
      var extra_songs = [];
  
      for (var _i2 = 0, _Object$keys = Object.keys((0,external_kolmafia_namespaceObject.myEffects)()); _i2 < _Object$keys.length; _i2++) {
        var effect_name = _Object$keys[_i2];
  
        var _effect = external_kolmafia_namespaceObject.Effect.get(effect_name);
  
        if (moods_isSong(_effect) && !songs.includes(_effect)) {
          extra_songs.push(_effect);
        }
      }
  
      while (songs.length + extra_songs.length > moods_maxSongs()) {
        var to_remove = extra_songs.pop();
        if (to_remove === undefined) break;else uneffect(to_remove);
      }
    } // Use horsery
  
  
    if (property_get("horseryAvailable")) {
      if (modifier.includes("-combat") && property_get("_horsery") !== "dark horse") {
        (0,external_kolmafia_namespaceObject.cliExecute)("horsery dark");
      } // TODO: +combat?
  
    } // Use asdon martin
  
  
    if ((0,external_kolmafia_namespaceObject.getWorkshed)() === template_string_$item(moods_templateObject39 || (moods_templateObject39 = moods_taggedTemplateLiteral(["Asdon Martin keyfob"])))) {
      if (modifier.includes("-combat")) drive(Driving.Stealthily);else if (modifier.includes("+combat")) drive(Driving.Obnoxiously);else if (modifier.includes("init")) drive(Driving.Quickly);else if (modifier.includes("item")) drive(Driving.Observantly);
    } // Apply all relevant effects
  
  
    for (var _i3 = 0, _useful_effects2 = useful_effects; _i3 < _useful_effects2.length; _i3++) {
      var _effect2 = _useful_effects2[_i3];
      ensureEffect(_effect2);
    }
  }
  ;// CONCATENATED MODULE: ./src/engine/outfit.ts
  var engine_outfit_templateObject, engine_outfit_templateObject2, engine_outfit_templateObject3, engine_outfit_templateObject4, engine_outfit_templateObject5, engine_outfit_templateObject6, engine_outfit_templateObject7, engine_outfit_templateObject8, engine_outfit_templateObject9, engine_outfit_templateObject10, engine_outfit_templateObject11, engine_outfit_templateObject12, engine_outfit_templateObject13, engine_outfit_templateObject14, engine_outfit_templateObject15, engine_outfit_templateObject16, engine_outfit_templateObject17, engine_outfit_templateObject18, engine_outfit_templateObject19, engine_outfit_templateObject20, engine_outfit_templateObject21, engine_outfit_templateObject22, engine_outfit_templateObject23, engine_outfit_templateObject24, engine_outfit_templateObject25, engine_outfit_templateObject26, engine_outfit_templateObject27, engine_outfit_templateObject28, engine_outfit_templateObject29, engine_outfit_templateObject30, engine_outfit_templateObject31, engine_outfit_templateObject32;
  
  function engine_outfit_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  function engine_outfit_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = engine_outfit_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  
  function engine_outfit_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return engine_outfit_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return engine_outfit_arrayLikeToArray(o, minLen); }
  
  function engine_outfit_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  
  
  function equipFirst(outfit, resources) {
    var _iterator = engine_outfit_createForOfIteratorHelper(resources),
        _step;
  
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _resource$equip, _resource$equip2;
  
        var resource = _step.value;
        if (!resource.available()) continue;
        if (resource.chance && resource.chance() === 0) continue;
        if (!outfit.canEquip((_resource$equip = resource.equip) !== null && _resource$equip !== void 0 ? _resource$equip : [])) continue;
        if (!outfit.equip((_resource$equip2 = resource.equip) !== null && _resource$equip2 !== void 0 ? _resource$equip2 : [])) continue;
        return resource;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  
    return undefined;
  }
  function equipUntilCapped(outfit, resources) {
    var result = [];
  
    var _iterator2 = engine_outfit_createForOfIteratorHelper(resources),
        _step2;
  
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _resource$equip3, _resource$equip4;
  
        var resource = _step2.value;
        if (!resource.available()) continue;
        if (resource.chance && resource.chance() === 0) continue;
        if (!outfit.canEquip((_resource$equip3 = resource.equip) !== null && _resource$equip3 !== void 0 ? _resource$equip3 : [])) continue;
        if (!outfit.equip((_resource$equip4 = resource.equip) !== null && _resource$equip4 !== void 0 ? _resource$equip4 : [])) continue;
        result.push(resource);
        if (resource.chance && resource.chance() === 1) break;
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  
    return result;
  }
  function equipInitial(outfit) {
    if (outfit.modifier) {
      // Run maximizer
      if (outfit.modifier.includes("item")) {
        if (outfit.canEquip(template_string_$item(engine_outfit_templateObject || (engine_outfit_templateObject = engine_outfit_taggedTemplateLiteral(["li'l ninja costume"])))) && outfit.canEquip(template_string_$familiar(engine_outfit_templateObject2 || (engine_outfit_templateObject2 = engine_outfit_taggedTemplateLiteral(["Trick-or-Treating Tot"]))))) {
          outfit.equip(template_string_$item(engine_outfit_templateObject3 || (engine_outfit_templateObject3 = engine_outfit_taggedTemplateLiteral(["li'l ninja costume"]))));
          outfit.equip(template_string_$familiar(engine_outfit_templateObject4 || (engine_outfit_templateObject4 = engine_outfit_taggedTemplateLiteral(["Trick-or-Treating Tot"]))));
        } else {
          outfit.equip(template_string_$familiar(engine_outfit_templateObject5 || (engine_outfit_templateObject5 = engine_outfit_taggedTemplateLiteral(["Jumpsuited Hound Dog"]))));
        }
      }
    }
  }
  function equipDefaults(outfit) {
    var _outfit$modifier, _outfit$modifier2, _outfit$familiar;
  
    if ((0,external_kolmafia_namespaceObject.myBasestat)($stat(engine_outfit_templateObject6 || (engine_outfit_templateObject6 = engine_outfit_taggedTemplateLiteral(["muscle"])))) >= 40) outfit.equip(template_string_$item(engine_outfit_templateObject7 || (engine_outfit_templateObject7 = engine_outfit_taggedTemplateLiteral(["mafia thumb ring"]))));
    outfit.equip(template_string_$item(engine_outfit_templateObject8 || (engine_outfit_templateObject8 = engine_outfit_taggedTemplateLiteral(["lucky gold ring"])))); // low priority familiars for combat frequency
  
    if ((_outfit$modifier = outfit.modifier) !== null && _outfit$modifier !== void 0 && _outfit$modifier.includes("-combat")) {
      if (lib_have(template_string_$familiar(engine_outfit_templateObject9 || (engine_outfit_templateObject9 = engine_outfit_taggedTemplateLiteral(["Peace Turkey"]))))) {
        outfit.equip(template_string_$familiar(engine_outfit_templateObject10 || (engine_outfit_templateObject10 = engine_outfit_taggedTemplateLiteral(["Peace Turkey"]))));
      } else if (lib_have(template_string_$familiar(engine_outfit_templateObject11 || (engine_outfit_templateObject11 = engine_outfit_taggedTemplateLiteral(["Disgeist"]))))) {
        outfit.equip(template_string_$familiar(engine_outfit_templateObject12 || (engine_outfit_templateObject12 = engine_outfit_taggedTemplateLiteral(["Disgeist"]))));
      }
    }
  
    if ((_outfit$modifier2 = outfit.modifier) !== null && _outfit$modifier2 !== void 0 && _outfit$modifier2.includes("+combat")) outfit.equip(template_string_$familiar(engine_outfit_templateObject13 || (engine_outfit_templateObject13 = engine_outfit_taggedTemplateLiteral(["Jumpsuited Hound Dog"]))));
  
    if (!outfit.modifier) {
      // Default outfit
      outfit.equip(template_string_$item(engine_outfit_templateObject14 || (engine_outfit_templateObject14 = engine_outfit_taggedTemplateLiteral(["Fourth of May Cosplay Saber"]))));
      if ((0,external_kolmafia_namespaceObject.totalTurnsPlayed)() >= property_get("nextParanormalActivity") && property_get("questPAGhost") === "unstarted") outfit.equip(template_string_$item(engine_outfit_templateObject15 || (engine_outfit_templateObject15 = engine_outfit_taggedTemplateLiteral(["protonic accelerator pack"]))));
      outfit.equip(template_string_$item(engine_outfit_templateObject16 || (engine_outfit_templateObject16 = engine_outfit_taggedTemplateLiteral(["vampyric cloake"]))));
      if ((0,external_kolmafia_namespaceObject.myBasestat)($stat(engine_outfit_templateObject17 || (engine_outfit_templateObject17 = engine_outfit_taggedTemplateLiteral(["mysticality"])))) >= 25) outfit.equip(template_string_$item(engine_outfit_templateObject18 || (engine_outfit_templateObject18 = engine_outfit_taggedTemplateLiteral(["Mr. Cheeng's spectacles"]))));
    }
  
    if (property_get("camelSpit") < 100 && property_get("cyrptNookEvilness") > 25) {
      outfit.equip(template_string_$familiar(engine_outfit_templateObject19 || (engine_outfit_templateObject19 = engine_outfit_taggedTemplateLiteral(["Melodramedary"]))));
    } else if (lib_have(template_string_$familiar(engine_outfit_templateObject20 || (engine_outfit_templateObject20 = engine_outfit_taggedTemplateLiteral(["Temporal Riftlet"]))))) {
      outfit.equip(template_string_$familiar(engine_outfit_templateObject21 || (engine_outfit_templateObject21 = engine_outfit_taggedTemplateLiteral(["Temporal Riftlet"]))));
    } else if (lib_have(template_string_$item(engine_outfit_templateObject22 || (engine_outfit_templateObject22 = engine_outfit_taggedTemplateLiteral(["gnomish housemaid's kgnee"]))))) {
      outfit.equip(template_string_$familiar(engine_outfit_templateObject23 || (engine_outfit_templateObject23 = engine_outfit_taggedTemplateLiteral(["Reagnimated Gnome"]))));
    } else outfit.equip(template_string_$familiar(engine_outfit_templateObject24 || (engine_outfit_templateObject24 = engine_outfit_taggedTemplateLiteral(["Galloping Grill"]))));
  
    var commonFamiliarEquips = new Map([[template_string_$familiar(engine_outfit_templateObject25 || (engine_outfit_templateObject25 = engine_outfit_taggedTemplateLiteral(["Melodramedary"]))), template_string_$item(engine_outfit_templateObject26 || (engine_outfit_templateObject26 = engine_outfit_taggedTemplateLiteral(["dromedary drinking helmet"])))], [template_string_$familiar(engine_outfit_templateObject27 || (engine_outfit_templateObject27 = engine_outfit_taggedTemplateLiteral(["Reagnimated Gnome"]))), template_string_$item(engine_outfit_templateObject28 || (engine_outfit_templateObject28 = engine_outfit_taggedTemplateLiteral(["gnomish housemaid's kgnee"])))]]);
    var familiarEquip = commonFamiliarEquips.get((_outfit$familiar = outfit.familiar) !== null && _outfit$familiar !== void 0 ? _outfit$familiar : template_string_$familiar(engine_outfit_templateObject29 || (engine_outfit_templateObject29 = engine_outfit_taggedTemplateLiteral(["none"]))));
    if (familiarEquip && outfit.canEquip(familiarEquip)) outfit.equip(familiarEquip);
  }
  function fixFoldables(outfit) {
    var modifiers = getModifiersFrom(outfit); // Libram outfit cache may not autofold umbrella, so we need to
  
    if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(engine_outfit_templateObject30 || (engine_outfit_templateObject30 = engine_outfit_taggedTemplateLiteral(["unbreakable umbrella"])))) > 0) {
      if (modifiers.includes("-combat")) {
        if (property_get("umbrellaState") !== "cocoon") (0,external_kolmafia_namespaceObject.cliExecute)("umbrella cocoon");
      } else if ((modifiers.includes("ML") || modifiers.toLowerCase().includes("monster level percent")) && !modifiers.match("-[\\d .]*ML")) {
        if (property_get("umbrellaState") !== "broken") (0,external_kolmafia_namespaceObject.cliExecute)("umbrella broken");
      } else if (modifiers.includes("item")) {
        if (property_get("umbrellaState") !== "bucket style") (0,external_kolmafia_namespaceObject.cliExecute)("umbrella bucket");
      } else {
        if (property_get("umbrellaState") !== "forward-facing") (0,external_kolmafia_namespaceObject.cliExecute)("umbrella forward");
      }
    } // Libram outfit cache may not autofold camera, so we need to
  
  
    if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(engine_outfit_templateObject31 || (engine_outfit_templateObject31 = engine_outfit_taggedTemplateLiteral(["backup camera"])))) > 0) {
      var _outfit$modifier3;
  
      if (modifiers.includes("ML") && !modifiers.match("-[\\d .]*ML") || modifiers.includes("exp")) {
        if (property_get("backupCameraMode").toLowerCase() !== "ml") (0,external_kolmafia_namespaceObject.cliExecute)("backupcamera ml");
      } else if ((_outfit$modifier3 = outfit.modifier) !== null && _outfit$modifier3 !== void 0 && _outfit$modifier3.includes("init")) {
        if (property_get("backupCameraMode").toLowerCase() !== "init") (0,external_kolmafia_namespaceObject.cliExecute)("backupcamera init");
      } else {
        if (property_get("backupCameraMode").toLowerCase() !== "meat") (0,external_kolmafia_namespaceObject.cliExecute)("backupcamera meat");
      }
  
      if (!property_get("backupCameraReverserEnabled")) {
        (0,external_kolmafia_namespaceObject.cliExecute)("backupcamera reverser on");
      }
    } // Libram outfit cache may not autofold parka, so we need to
    // eslint-disable-next-line libram/verify-constants
  
  
    if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(engine_outfit_templateObject32 || (engine_outfit_templateObject32 = engine_outfit_taggedTemplateLiteral(["Jurassic Parka"])))) > 0) {
      var _outfit$modifier4, _outfit$modifier5, _outfit$modifier6, _outfit$modifier7, _outfit$modifier8;
  
      if ((_outfit$modifier4 = outfit.modifier) !== null && _outfit$modifier4 !== void 0 && _outfit$modifier4.includes("cold res")) {
        if (property_get("parkaMode").toLowerCase() !== "kachungasaur") (0,external_kolmafia_namespaceObject.cliExecute)("parka kachungasaur");
      } else if ((_outfit$modifier5 = outfit.modifier) !== null && _outfit$modifier5 !== void 0 && _outfit$modifier5.includes("stench res")) {
        if (property_get("parkaMode").toLowerCase() !== "dilophosaur") (0,external_kolmafia_namespaceObject.cliExecute)("parka dilophosaur");
      } else if ((_outfit$modifier6 = outfit.modifier) !== null && _outfit$modifier6 !== void 0 && _outfit$modifier6.includes("ML") && !modifiers.match("-[\\d .]*ML")) {
        if (property_get("parkaMode").toLowerCase() !== "spikolodon") (0,external_kolmafia_namespaceObject.cliExecute)("parka spikolodon");
      } else if ((_outfit$modifier7 = outfit.modifier) !== null && _outfit$modifier7 !== void 0 && _outfit$modifier7.includes("init") && !modifiers.match("-[\\d .]*init") || (_outfit$modifier8 = outfit.modifier) !== null && _outfit$modifier8 !== void 0 && _outfit$modifier8.includes("-combat")) {
        if (property_get("parkaMode").toLowerCase() !== "pterodactyl") (0,external_kolmafia_namespaceObject.cliExecute)("parka pterodactyl");
      } else {
        // +meat
        if (property_get("parkaMode").toLowerCase() !== "kachungasaur") (0,external_kolmafia_namespaceObject.cliExecute)("parka kachungasaur");
      }
    }
  }
  function getModifiersFrom(outfit) {
    if (!(outfit !== null && outfit !== void 0 && outfit.modifier)) return "";
    if (Array.isArray(outfit.modifier)) return outfit.modifier.join(",");
    return outfit.modifier;
  }
  ;// CONCATENATED MODULE: ./src/engine/engine.ts
  var engine_engine_templateObject, engine_templateObject2, engine_templateObject3, engine_templateObject4, engine_templateObject5, engine_templateObject6, engine_templateObject7, engine_templateObject8, engine_templateObject9;
  
  function engine_engine_toConsumableArray(arr) { return engine_engine_arrayWithoutHoles(arr) || engine_engine_iterableToArray(arr) || engine_engine_unsupportedIterableToArray(arr) || engine_engine_nonIterableSpread(); }
  
  function engine_engine_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function engine_engine_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return engine_engine_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return engine_engine_arrayLikeToArray(o, minLen); }
  
  function engine_engine_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  
  function engine_engine_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return engine_engine_arrayLikeToArray(arr); }
  
  function engine_engine_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function engine_engine_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  function engine_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  
  function engine_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? engine_ownKeys(Object(source), !0).forEach(function (key) { engine_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : engine_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  
  function engine_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function engine_engine_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function engine_engine_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function engine_engine_createClass(Constructor, protoProps, staticProps) { if (protoProps) engine_engine_defineProperties(Constructor.prototype, protoProps); if (staticProps) engine_engine_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function engine_get() { if (typeof Reflect !== "undefined" && Reflect.get) { engine_get = Reflect.get; } else { engine_get = function _get(target, property, receiver) { var base = engine_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return engine_get.apply(this, arguments); }
  
  function engine_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = engine_getPrototypeOf(object); if (object === null) break; } return object; }
  
  function engine_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) engine_setPrototypeOf(subClass, superClass); }
  
  function engine_setPrototypeOf(o, p) { engine_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return engine_setPrototypeOf(o, p); }
  
  function engine_createSuper(Derived) { var hasNativeReflectConstruct = engine_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = engine_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = engine_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return engine_possibleConstructorReturn(this, result); }; }
  
  function engine_possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return engine_assertThisInitialized(self); }
  
  function engine_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function engine_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function engine_getPrototypeOf(o) { engine_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return engine_getPrototypeOf(o); }
  
  
  
  
  
  
  
  
  
  
  
  var engine_Engine = /*#__PURE__*/function (_BaseEngine) {
    engine_inherits(Engine, _BaseEngine);
  
    var _super = engine_createSuper(Engine);
  
    function Engine(tasks) {
      engine_engine_classCallCheck(this, Engine);
  
      return _super.call(this, tasks, {
        combat_defaults: new MyActionDefaults()
      });
    }
  
    engine_engine_createClass(Engine, [{
      key: "available",
      value: function available(task) {
        if ((0,external_kolmafia_namespaceObject.myAdventures)() === 0 && !task.noadventures) return false;
        return engine_get(engine_getPrototypeOf(Engine.prototype), "available", this).call(this, task);
      }
    }, {
      key: "hasDelay",
      value: function hasDelay(task) {
        if (!task.delay) return false;
        if (!(task.do instanceof external_kolmafia_namespaceObject.Location)) return false;
        return task.do.turnsSpent < task.delay;
      }
    }, {
      key: "getNextTask",
      value: function getNextTask() {
        // First, check for any prioritized tasks
        var priority = this.tasks.find(task => this.available(task) && task.priority !== undefined && task.priority());
  
        if (priority !== undefined) {
          return priority;
        } // If a wanderer is up try to place it in a useful location
  
  
        var wanderer = wandererSources.find(source => source.available() && source.chance() === 1);
        var delay_burning = this.tasks.find(task => {
          var _wanderer$equip;
  
          return this.hasDelay(task) && this.available(task) && this.createOutfit(task).canEquip((_wanderer$equip = wanderer === null || wanderer === void 0 ? void 0 : wanderer.equip) !== null && _wanderer$equip !== void 0 ? _wanderer$equip : []);
        });
  
        if (wanderer !== undefined && delay_burning !== undefined) {
          return engine_objectSpread(engine_objectSpread({}, delay_burning), {}, {
            wanderer: wanderer
          });
        } // Otherwise, just advance the next quest on the route
  
  
        var todo = this.tasks.find(task => this.available(task));
        if (todo !== undefined) return todo; // No next task
  
        return undefined;
      }
    }, {
      key: "execute",
      value: function execute(task) {
        debug("");
        debug("Executing ".concat(task.name), "blue");
        this.checkLimits(engine_objectSpread(engine_objectSpread({}, task), {}, {
          limit: engine_objectSpread(engine_objectSpread({}, task.limit), {}, {
            unready: false
          })
        }), () => true); // ignore unready for this initial check
  
        engine_get(engine_getPrototypeOf(Engine.prototype), "execute", this).call(this, task);
  
        if (lib_have(template_string_$effect(engine_engine_templateObject || (engine_engine_templateObject = engine_engine_taggedTemplateLiteral(["Beaten Up"]))))) throw "Fight was lost; stop.";
  
        if (task.completed()) {
          debug("".concat(task.name, " completed!"), "blue");
        } else {
          debug("".concat(task.name, " not completed!"), "blue");
        }
      }
    }, {
      key: "customize",
      value: function customize(task, outfit, combat, resources) {
        equipInitial(outfit);
        var wanderers = task.wanderer ? [task.wanderer] : [];
  
        for (var _i = 0, _wanderers = wanderers; _i < _wanderers.length; _i++) {
          var _wanderer$equip2;
  
          var wanderer = _wanderers[_i];
          if (!outfit.equip((_wanderer$equip2 = wanderer === null || wanderer === void 0 ? void 0 : wanderer.equip) !== null && _wanderer$equip2 !== void 0 ? _wanderer$equip2 : [])) throw "Wanderer equipment ".concat(wanderer.equip, " conflicts with ").concat(task.name);
        }
  
        if (task.freeaction) {
          // Prepare only as requested by the task
          return;
        } // Prepare combat macro
  
  
        if (combat.getDefaultAction() === undefined) combat.action("ignore"); // Use rock-band flyers if needed (300 extra as a buffer for mafia tracking)
  
        var blacklist = new Set($locations(engine_templateObject2 || (engine_templateObject2 = engine_engine_taggedTemplateLiteral(["Oil Peak"]))));
  
        if (lib_have(template_string_$item(engine_templateObject3 || (engine_templateObject3 = engine_engine_taggedTemplateLiteral(["rock band flyers"])))) && !flyersDone() && (!(task.do instanceof external_kolmafia_namespaceObject.Location) || !blacklist.has(task.do)) && task.name !== "Misc/Protonic Ghost") {
          combat.macro(new Macro().if_( // Avoid sausage goblin (2104), ninja snowman assassin (1185), protagonist (160), quantum mechanic (223), voting monsters
          "!hpbelow 50 && !monsterid 2104 && !monsterid 1185 &&!monsterid 160 && !monsterid 223 && !monsterid 2094 && !monsterid 2095 && !monsterid 2096 && !monsterid 2097 && !monsterid 2098", new Macro().tryItem(template_string_$item(engine_templateObject4 || (engine_templateObject4 = engine_engine_taggedTemplateLiteral(["rock band flyers"]))))), undefined, true);
        }
  
        if (wanderers.length === 0) {
          // Set up a banish if needed
          var banishSources = unusedBanishes(combat.where("banish").filter(mon => mon instanceof external_kolmafia_namespaceObject.Monster));
          resources.provide("banish", equipFirst(outfit, banishSources)); // Set up a runaway if there are combats we do not care about
  
          var runaway = undefined;
  
          if (combat.can("ignore")) {
            runaway = equipFirst(outfit, runawaySources);
            resources.provide("ignore", runaway);
          }
  
          if (combat.can("ignoreNoBanish")) {
            if (runaway !== undefined && !runaway.banishes) resources.provide("ignoreNoBanish", runaway);else resources.provide("ignoreNoBanish", equipFirst(outfit, runawaySources.filter(source => !source.banishes)));
          } // Set up a free kill if needed, or if no free kills will ever be needed again
  
  
          if (combat.can("killFree") || combat.can("kill") && !task.boss && this.tasks.every(t => {
            var _t$combat;
  
            return t.completed() || !((_t$combat = t.combat) !== null && _t$combat !== void 0 && _t$combat.can("killFree"));
          })) {
            resources.provide("killFree", equipFirst(outfit, freekillSources));
          }
        } // Set up more wanderers if delay is needed
  
  
        if (wanderers.length === 0 && this.hasDelay(task)) wanderers.push.apply(wanderers, engine_engine_toConsumableArray(equipUntilCapped(outfit, wandererSources))); // Prepare full outfit
  
        if (!outfit.skipDefaults) {
          if (task.boss) outfit.equip(template_string_$familiar(engine_templateObject5 || (engine_templateObject5 = engine_engine_taggedTemplateLiteral(["Machine Elf"]))));
          var freecombat = task.freecombat || wanderers.find(wanderer => wanderer.chance() === 1);
          if (!task.boss && !freecombat) outfit.equip(template_string_$item(engine_templateObject6 || (engine_templateObject6 = engine_engine_taggedTemplateLiteral(["carnivorous potted plant"]))));
          if (canChargeVoid() && !freecombat && (combat.can("kill") && !resources.has("killFree") || combat.can("killHard") || task.boss)) outfit.equip(template_string_$item(engine_templateObject7 || (engine_templateObject7 = engine_engine_taggedTemplateLiteral(["cursed magnifying glass"]))));
          equipDefaults(outfit);
        } // Kill wanderers
  
  
        for (var _i2 = 0, _wanderers2 = wanderers; _i2 < _wanderers2.length; _i2++) {
          var _wanderer = _wanderers2[_i2];
          combat.action("killHard", _wanderer.monsters);
          if (_wanderer.macro) combat.macro(_wanderer.macro, _wanderer.monsters);
        }
  
        if (resources.has("killFree") && !task.boss) {
          var _combat$where;
  
          // Upgrade normal kills to free kills if provided
          combat.action("killFree", ((_combat$where = combat.where("kill")) !== null && _combat$where !== void 0 ? _combat$where : []).filter(mon => !mon.boss));
          if (combat.getDefaultAction() === "kill") combat.action("killFree");
        }
      }
    }, {
      key: "createOutfit",
      value: function createOutfit(task) {
        var spec = typeof task.outfit === "function" ? task.outfit() : task.outfit;
        var outfit = new Outfit();
        if (spec !== undefined) outfit.equip(spec); // no error on failure
  
        return outfit;
      }
    }, {
      key: "dress",
      value: function dress(task, outfit) {
        outfit.dress();
        fixFoldables(outfit);
        applyEffects(outfit.modifier.join(", ")); // HP/MP upkeep
  
        if (!task.freeaction) {
          if ((0,external_kolmafia_namespaceObject.myHp)() < (0,external_kolmafia_namespaceObject.myMaxhp)() / 2) (0,external_kolmafia_namespaceObject.useSkill)(template_string_$skill(engine_templateObject8 || (engine_templateObject8 = engine_engine_taggedTemplateLiteral(["Cannelloni Cocoon"]))));
          if (!lib_have(template_string_$effect(engine_templateObject9 || (engine_templateObject9 = engine_engine_taggedTemplateLiteral(["Super Skill"]))))) (0,external_kolmafia_namespaceObject.restoreMp)((0,external_kolmafia_namespaceObject.myMaxmp)() < 200 ? (0,external_kolmafia_namespaceObject.myMaxmp)() : 200);
        }
      }
    }, {
      key: "initPropertiesManager",
      value: function initPropertiesManager(manager) {
        engine_get(engine_getPrototypeOf(Engine.prototype), "initPropertiesManager", this).call(this, manager);
  
        manager.set({
          louvreGoal: 7,
          louvreDesiredGoal: 7
        });
        manager.setChoices({
          1106: 3,
          // Ghost Dog Chow
          1107: 1,
          // tennis ball
          1340: 3,
          // Is There A Doctor In The House?
          1341: 1,
          // Cure her poison
          // June cleaver noncombats
          1467: 1,
          1468: 1,
          1469: 2,
          1470: 2,
          1471: 1,
          1472: 2,
          1473: 2,
          1474: 2,
          1475: 1
        });
      }
    }]);
  
    return Engine;
  }(Engine);
  ;// CONCATENATED MODULE: ./node_modules/libram/dist/since.js
  function since_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function since_createClass(Constructor, protoProps, staticProps) { if (protoProps) since_defineProperties(Constructor.prototype, protoProps); if (staticProps) since_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  
  function since_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function since_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) since_setPrototypeOf(subClass, superClass); }
  
  function since_createSuper(Derived) { var hasNativeReflectConstruct = since_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = since_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = since_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return since_possibleConstructorReturn(this, result); }; }
  
  function since_possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return since_assertThisInitialized(self); }
  
  function since_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function since_wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; since_wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !since_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return since_construct(Class, arguments, since_getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return since_setPrototypeOf(Wrapper, Class); }; return since_wrapNativeSuper(Class); }
  
  function since_construct(Parent, args, Class) { if (since_isNativeReflectConstruct()) { since_construct = Reflect.construct; } else { since_construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) since_setPrototypeOf(instance, Class.prototype); return instance; }; } return since_construct.apply(null, arguments); }
  
  function since_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  
  function since_isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }
  
  function since_setPrototypeOf(o, p) { since_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return since_setPrototypeOf(o, p); }
  
  function since_getPrototypeOf(o) { since_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return since_getPrototypeOf(o); }
  
  /**
   * Provides functions for checking KoLmafia's version and revision.
   *
   * @packageDocumentation
   */
  
  /**
   * Represents an exception thrown when the current KoLmafia version does not
   * match an expected condition.
   */
  
  var KolmafiaVersionError = /*#__PURE__*/function (_Error) {
    since_inherits(KolmafiaVersionError, _Error);
  
    var _super = since_createSuper(KolmafiaVersionError);
  
    function KolmafiaVersionError(message) {
      var _this;
  
      since_classCallCheck(this, KolmafiaVersionError);
  
      _this = _super.call(this, message); // Explicitly set the prototype, so that 'instanceof' still works in Node.js
      // even when the class is transpiled down to ES5
      // See: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
      // Note that this code isn't needed for Rhino.
  
      Object.setPrototypeOf(since_assertThisInitialized(_this), KolmafiaVersionError.prototype);
      return _this;
    }
  
    return since_createClass(KolmafiaVersionError);
  }( /*#__PURE__*/since_wrapNativeSuper(Error)); // Manually set class name, so that the stack trace shows proper name in Rhino
  
  KolmafiaVersionError.prototype.name = "KolmafiaVersionError";
  /**
   * Returns the currently executing script name, suitable for embedding in an
   * error message.
   *
   * @returns Path of the main script wrapped in single-quotes, or `"This script"`
   *    if the path cannot be determined
   */
  
  function getScriptName() {
    var _require$main;
  
    // In Rhino, the current script name is available in require.main.id
    var scriptName = (_require$main = require.main) === null || _require$main === void 0 ? void 0 : _require$main.id;
    return scriptName ? "'".concat(scriptName, "'") : "This script";
  }
  /**
   * If KoLmafia's revision number is less than `revision`, throws an exception.
   * Otherwise, does nothing.
   *
   * This behaves like the `since rXXX;` statement in ASH.
   *
   * @param revision Revision number
   * @throws {KolmafiaVersionError}
   *    If KoLmafia's revision number is less than `revision`.
   * @throws {TypeError} If `revision` is not an integer
   * @example
   * ```ts
   * // Throws if KoLmafia revision is less than r20500
   * sinceKolmafiaRevision(20500);
   * ```
   */
  
  
  function sinceKolmafiaRevision(revision) {
    if (!Number.isInteger(revision)) {
      throw new TypeError("Invalid revision number ".concat(revision, " (must be an integer)"));
    } // Based on net.sourceforge.kolmafia.textui.Parser.sinceException()
  
  
    var currentRevision = (0,external_kolmafia_namespaceObject.getRevision)();
  
    if (currentRevision > 0 && currentRevision < revision) {
      throw new KolmafiaVersionError("".concat(getScriptName(), " requires revision r").concat(revision, " of kolmafia or higher (current: ").concat((0,external_kolmafia_namespaceObject.getRevision)(), "). Up-to-date builds can be found at https://ci.kolmafia.us/."));
    }
  }
  /**
   * If KoLmafia's version is less than `majorVersion.minorVersion`, throws an
   * exception.
   * Otherwise, does nothing.
   *
   * This behaves like the `since X.Y;` statement in ASH.
   *
   * @param majorVersion Major version number
   * @param minorVersion Minor version number
   * @deprecated Point versions are no longer released by KoLmafia
   * @throws {KolmafiaVersionError}
   *    If KoLmafia's major version is less than `majorVersion`, or if the major
   *    versions are equal but the minor version is less than `minorVersion`
   * @throws {TypeError}
   *    If either `majorVersion` or `minorVersion` are not integers
   * @example
   * ```ts
   * // Throws if KoLmafia version is less than 20.7
   * sinceKolmafiaVersion(20, 7);
   * ```
   */
  
  function sinceKolmafiaVersion(majorVersion, minorVersion) {
    if (getRevision() >= 25720) {
      return;
    }
  
    if (!Number.isInteger(majorVersion)) {
      throw new TypeError("Invalid major version number ".concat(majorVersion, " (must be an integer)"));
    }
  
    if (!Number.isInteger(minorVersion)) {
      throw new TypeError("Invalid minor version number ".concat(minorVersion, " (must be an integer)"));
    }
  
    if (majorVersion > 21 || majorVersion === 20 && minorVersion > 9) {
      throw new Error("There were no versions released after 21.09. This command will always fail");
    }
  
    var versionStr = getVersion();
    var versionStrMatch = /v(\d+)\.(\d+)/.exec(versionStr);
  
    if (!versionStrMatch) {
      // This is not something the user should handle
      throw new Error("Unexpected KoLmafia version string: \"".concat(versionStr, "\". You may need to update the script."));
    }
  
    var currentMajorVersion = Number(versionStrMatch[1]);
    var currentMinorVersion = Number(versionStrMatch[2]); // Based on net.sourceforge.kolmafia.textui.Parser.sinceException()
  
    if (currentMajorVersion < majorVersion || currentMajorVersion === majorVersion && currentMinorVersion < minorVersion) {
      throw new KolmafiaVersionError("".concat(getScriptName(), " requires version ").concat(majorVersion, ".").concat(minorVersion, " of kolmafia or higher (current: ").concat(currentMajorVersion, ".").concat(currentMinorVersion, "). Up-to-date builds can be found at https://ci.kolmafia.us/."));
    }
  }
  ;// CONCATENATED MODULE: ./src/main.ts
  var main_templateObject, main_templateObject2, main_templateObject3, main_templateObject4, main_templateObject5, main_templateObject6;
  
  function main_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = main_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  
  function main_toConsumableArray(arr) { return main_arrayWithoutHoles(arr) || main_iterableToArray(arr) || main_unsupportedIterableToArray(arr) || main_nonIterableSpread(); }
  
  function main_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function main_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return main_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return main_arrayLikeToArray(o, minLen); }
  
  function main_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  
  function main_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return main_arrayLikeToArray(arr); }
  
  function main_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  
  function main_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
  
  
  
  
  
  
  
  
  var worksheds = [// eslint-disable-next-line libram/verify-constants
  [template_string_$item(main_templateObject || (main_templateObject = main_taggedTemplateLiteral(["model train set"]))), "Swap to model train set"], [template_string_$item(main_templateObject2 || (main_templateObject2 = main_taggedTemplateLiteral(["cold medicine cabinet"]))), "Swap to cold medicine cabinet"], [template_string_$item(main_templateObject3 || (main_templateObject3 = main_taggedTemplateLiteral(["Asdon Martin keyfob"]))), "Swap to asdon martin keyfob"]];
  var args = Args.create("loopcasual", "A script to complete casual runs.", {
    goal: Args.string({
      help: "Which tasks to perform.",
      options: [["all", "Level up, complete all quests, and get your steel organ."], ["level", "Level up only."], ["quests", "Complete all quests only."], ["organ", "Get your steel organ only."], ["!organ", "Level up and complete all quests only."]],
      default: "all"
    }),
    stomach: Args.number({
      help: "Amount of stomach to fill.",
      default: 5
    }),
    liver: Args.number({
      help: "Amount of liver to fill.",
      default: 10
    }),
    spleen: Args.number({
      help: "Amount of spleen to fill.",
      default: 5
    }),
    voa: Args.number({
      help: "Value of an adventure, in meat, for determining diet.",
      setting: "valueOfAdventure",
      default: 6500
    }),
    actions: Args.number({
      help: "Maximum number of actions to perform, if given. Can be used to execute just a few steps at a time."
    }),
    levelto: Args.number({
      help: "Aim to level to this with free leveling resources.",
      default: 13
    }),
    professor: Args.flag({
      help: "Use pocket professor as one of the free leveling resources. This uses up some copiers, but may help to level.",
      default: false
    }),
    fluffers: Args.boolean({
      help: "If true, use stuffing fluffers to finish the war.",
      default: true
    }),
    workshed: Args.item({
      help: "Workshed item to place in an empty workshed at the start of the run.",
      // eslint-disable-next-line libram/verify-constants
      default: template_string_$item(main_templateObject4 || (main_templateObject4 = main_taggedTemplateLiteral(["model train set"]))),
      options: worksheds
    })
  });
  function main(command) {
    sinceKolmafiaRevision(27108);
    Args.fill(args, command);
  
    if (args.help) {
      Args.showHelp(args);
      return;
    }
  
    if (runComplete()) {
      (0,external_kolmafia_namespaceObject.print)("Casual complete!", "purple");
      return;
    }
  
    var time_property = "_loop_casual_first_start";
    var set_time_now = property_get(time_property, -1) === -1;
    if (set_time_now) _set(time_property, (0,external_kolmafia_namespaceObject.gametimeToInt)());
  
    if ((0,external_kolmafia_namespaceObject.myMeat)() > 2000000) {
      (0,external_kolmafia_namespaceObject.print)("You have too much meat; closeting some during execution.");
      (0,external_kolmafia_namespaceObject.cliExecute)("closet put ".concat((0,external_kolmafia_namespaceObject.myMeat)() - 2000000, " meat"));
    } // Select which tasks to perform
  
  
    var tasks = [];
  
    switch (args.goal) {
      case "all":
        tasks = prioritize(all_tasks());
        break;
  
      case "level":
        tasks = prioritize(level_tasks(), true);
        break;
  
      case "quests":
        tasks = prioritize(quest_tasks(), true);
        break;
  
      case "organ":
        tasks = prioritize(organ_tasks(), true);
        break;
  
      case "!organ":
        tasks = prioritize([].concat(main_toConsumableArray(level_tasks()), main_toConsumableArray(quest_tasks())), true);
        break;
    }
  
    var engine = new engine_Engine(tasks);
  
    try {
      var _args$actions;
  
      var actions_left = (_args$actions = args.actions) !== null && _args$actions !== void 0 ? _args$actions : Number.MAX_VALUE; // eslint-disable-next-line no-constant-condition
  
      while (true) {
        // Locate the next task.
        var next = engine.getNextTask();
        if (next === undefined) break; // Track the number of actions remaining to execute.
        // If there are no more actions left, just print our plan and exit.
  
        if (actions_left <= 0) {
          debug("Next task: ".concat(next.name));
          return;
        } else {
          actions_left -= 1;
        } // Do the next task.
  
  
        engine.execute(next);
      } // Script is done; ensure we have finished
  
  
      (0,external_kolmafia_namespaceObject.takeCloset)((0,external_kolmafia_namespaceObject.myClosetMeat)());
      var remaining_tasks = tasks.filter(task => !task.completed());
  
      if (!runComplete()) {
        debug("Remaining tasks:", "red");
  
        var _iterator = main_createForOfIteratorHelper(remaining_tasks),
            _step;
  
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var task = _step.value;
            if (!task.completed()) debug("".concat(task.name), "red");
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
  
        if ((0,external_kolmafia_namespaceObject.myAdventures)() === 0) {
          throw "Ran out of adventures. Consider setting higher stomach, liver, and spleen usage, or a higher voa.";
        } else {
          throw "Unable to find available task, but the run is not complete.";
        }
      }
    } finally {
      engine.propertyManager.resetAll();
    }
  
    (0,external_kolmafia_namespaceObject.print)("Casual complete!", "purple");
    (0,external_kolmafia_namespaceObject.print)("   Adventures used: ".concat((0,external_kolmafia_namespaceObject.turnsPlayed)()), "purple");
    (0,external_kolmafia_namespaceObject.print)("   Adventures remaining: ".concat((0,external_kolmafia_namespaceObject.myAdventures)()), "purple");
    if (set_time_now) (0,external_kolmafia_namespaceObject.print)("   Time: ".concat(convertMilliseconds((0,external_kolmafia_namespaceObject.gametimeToInt)() - property_get(time_property, (0,external_kolmafia_namespaceObject.gametimeToInt)()))), "purple");else (0,external_kolmafia_namespaceObject.print)("   Time: ".concat(convertMilliseconds((0,external_kolmafia_namespaceObject.gametimeToInt)() - property_get(time_property, (0,external_kolmafia_namespaceObject.gametimeToInt)())), " since first run today started"), "purple");
  }
  
  function runComplete() {
    switch (args.goal) {
      case "all":
        return step("questL13Final") === 999 && lib_have(template_string_$skill(main_templateObject5 || (main_templateObject5 = main_taggedTemplateLiteral(["Liver of Steel"])))) && (0,external_kolmafia_namespaceObject.myLevel)() >= args.levelto;
  
      case "level":
        return (0,external_kolmafia_namespaceObject.myLevel)() >= args.levelto;
  
      case "quests":
        return step("questL13Final") === 999;
  
      case "organ":
        return lib_have(template_string_$skill(main_templateObject6 || (main_templateObject6 = main_taggedTemplateLiteral(["Liver of Steel"]))));
  
      case "!organ":
        return step("questL13Final") === 999 && (0,external_kolmafia_namespaceObject.myLevel)() >= args.levelto;
  
      default:
        throw "Unknown goal ".concat(args.goal);
    }
  }
  })();
  
  var __webpack_export_target__ = exports;
  for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
  if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
  /******/ })()
  ;
